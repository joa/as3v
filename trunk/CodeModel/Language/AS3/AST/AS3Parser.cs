// $ANTLR 3.1 AS3.g 2008-08-28 13:35:11
// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
namespace  CodeModel.Language.AS3.AST 
{

/*
Copyright (c) 2008 Joa Ebert

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/


using System;
using Antlr.Runtime;
using IList 		= System.Collections.IList;
using ArrayList 	= System.Collections.ArrayList;
using Stack 		= Antlr.Runtime.Collections.StackList;

using IDictionary	= System.Collections.IDictionary;
using Hashtable 	= System.Collections.Hashtable;


using Antlr.Runtime.Tree;

public partial class AS3Parser : Parser
{
    public static readonly string[] tokenNames = new string[] 
	{
        "<invalid>", 
		"<EOR>", 
		"<DOWN>", 
		"<UP>", 
		"WhiteSpace", 
		"LineTerminator", 
		"MultiLineComment", 
		"MultiLineDocumentation", 
		"SingleLineComment", 
		"Comment", 
		"IdentifierStart", 
		"IdentifierPart", 
		"Identifier", 
		"UnicodeLetter", 
		"UnicodeEscapeSequence", 
		"UnicodeDigit", 
		"UnicodeConnectorPunctuation", 
		"UnicodeCombiningMark", 
		"NullLiteral", 
		"BooleanLiteral", 
		"NumericLiteral", 
		"StringLiteral", 
		"DecimalLiteral", 
		"HexIntegerLiteral", 
		"HexDigit", 
		"DecimalDigit", 
		"ExponentPart", 
		"DoubleStringCharacter", 
		"SingleStringCharacter", 
		"EscapeSequence", 
		"CharacterEscapeSequence", 
		"HexEscapeSequence", 
		"SingleEscapeCharacter", 
		"NonEscapeCharacter", 
		"EscapeCharacter", 
		"'this'", 
		"'('", 
		"')'", 
		"'['", 
		"','", 
		"']'", 
		"'{'", 
		"'}'", 
		"':'", 
		"'new'", 
		"'.'", 
		"'++'", 
		"'--'", 
		"'delete'", 
		"'void'", 
		"'typeof'", 
		"'+'", 
		"'-'", 
		"'~'", 
		"'!'", 
		"'*'", 
		"'/'", 
		"'%'", 
		"'<<'", 
		"'>>'", 
		"'>>>'", 
		"'<'", 
		"'>'", 
		"'<='", 
		"'>='", 
		"'instanceof'", 
		"'in'", 
		"'=='", 
		"'!='", 
		"'==='", 
		"'!=='", 
		"'&'", 
		"'^'", 
		"'|'", 
		"'&&'", 
		"'||'", 
		"'?'", 
		"'='", 
		"'*='", 
		"'/='", 
		"'%='", 
		"'+='", 
		"'-='", 
		"'<<='", 
		"'>>='", 
		"'>>>='", 
		"'&='", 
		"'^='", 
		"'|='", 
		"'var'", 
		"';'", 
		"'if'", 
		"'else'", 
		"'do'", 
		"'while'", 
		"'for'", 
		"'continue'", 
		"'break'", 
		"'return'", 
		"'with'", 
		"'switch'", 
		"'case'", 
		"'default'", 
		"'throw'", 
		"'try'", 
		"'catch'", 
		"'finally'", 
		"'function'"
    };

    public const int DecimalDigit = 25;
    public const int EOF = -1;
    public const int Identifier = 12;
    public const int SingleStringCharacter = 28;
    public const int T__93 = 93;
    public const int T__94 = 94;
    public const int T__91 = 91;
    public const int T__92 = 92;
    public const int T__90 = 90;
    public const int Comment = 9;
    public const int SingleEscapeCharacter = 32;
    public const int ExponentPart = 26;
    public const int UnicodeLetter = 13;
    public const int WhiteSpace = 4;
    public const int T__99 = 99;
    public const int T__98 = 98;
    public const int T__97 = 97;
    public const int T__96 = 96;
    public const int T__95 = 95;
    public const int UnicodeCombiningMark = 17;
    public const int UnicodeDigit = 15;
    public const int T__80 = 80;
    public const int NumericLiteral = 20;
    public const int T__81 = 81;
    public const int T__82 = 82;
    public const int T__83 = 83;
    public const int MultiLineDocumentation = 7;
    public const int IdentifierStart = 10;
    public const int DoubleStringCharacter = 27;
    public const int T__85 = 85;
    public const int T__84 = 84;
    public const int T__87 = 87;
    public const int T__86 = 86;
    public const int T__89 = 89;
    public const int T__88 = 88;
    public const int T__71 = 71;
    public const int T__72 = 72;
    public const int T__70 = 70;
    public const int CharacterEscapeSequence = 30;
    public const int T__76 = 76;
    public const int T__75 = 75;
    public const int T__74 = 74;
    public const int EscapeSequence = 29;
    public const int T__73 = 73;
    public const int BooleanLiteral = 19;
    public const int T__79 = 79;
    public const int T__78 = 78;
    public const int UnicodeConnectorPunctuation = 16;
    public const int T__77 = 77;
    public const int T__68 = 68;
    public const int T__69 = 69;
    public const int T__66 = 66;
    public const int T__67 = 67;
    public const int NullLiteral = 18;
    public const int T__64 = 64;
    public const int T__65 = 65;
    public const int T__62 = 62;
    public const int HexEscapeSequence = 31;
    public const int T__63 = 63;
    public const int SingleLineComment = 8;
    public const int T__61 = 61;
    public const int T__60 = 60;
    public const int HexDigit = 24;
    public const int T__55 = 55;
    public const int T__56 = 56;
    public const int T__57 = 57;
    public const int T__58 = 58;
    public const int T__51 = 51;
    public const int T__52 = 52;
    public const int T__53 = 53;
    public const int T__54 = 54;
    public const int T__107 = 107;
    public const int T__59 = 59;
    public const int T__103 = 103;
    public const int T__104 = 104;
    public const int T__105 = 105;
    public const int T__106 = 106;
    public const int EscapeCharacter = 34;
    public const int T__50 = 50;
    public const int MultiLineComment = 6;
    public const int IdentifierPart = 11;
    public const int T__42 = 42;
    public const int T__43 = 43;
    public const int T__40 = 40;
    public const int T__41 = 41;
    public const int T__46 = 46;
    public const int T__47 = 47;
    public const int T__44 = 44;
    public const int T__45 = 45;
    public const int T__48 = 48;
    public const int T__49 = 49;
    public const int UnicodeEscapeSequence = 14;
    public const int T__102 = 102;
    public const int T__101 = 101;
    public const int T__100 = 100;
    public const int DecimalLiteral = 22;
    public const int StringLiteral = 21;
    public const int T__35 = 35;
    public const int T__36 = 36;
    public const int T__37 = 37;
    public const int T__38 = 38;
    public const int T__39 = 39;
    public const int HexIntegerLiteral = 23;
    public const int LineTerminator = 5;
    public const int NonEscapeCharacter = 33;

    // delegates
    // delegators



        public AS3Parser(ITokenStream input)
    		: this(input, new RecognizerSharedState()) {
        }

        public AS3Parser(ITokenStream input, RecognizerSharedState state)
    		: base(input, state) {
    		InitializeCyclicDFAs();
            this.state.ruleMemo = new Hashtable[388+1];
             
             
        }
        
    protected ITreeAdaptor adaptor = new CommonTreeAdaptor();

    public ITreeAdaptor TreeAdaptor
    {
        get { return this.adaptor; }
        set {
    	this.adaptor = value;
    	}
    }

    override public string[] TokenNames {
		get { return AS3Parser.tokenNames; }
    }

    override public string GrammarFileName {
		get { return "AS3.g"; }
    }


    public class compilationUnit_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "compilationUnit"
    // AS3.g:85:1: compilationUnit : program ;
    public AS3Parser.compilationUnit_return compilationUnit() // throws RecognitionException [1]
    {   
        AS3Parser.compilationUnit_return retval = new AS3Parser.compilationUnit_return();
        retval.Start = input.LT(1);
        int compilationUnit_StartIndex = input.Index();
        CommonTree root_0 = null;

        AS3Parser.program_return program1 = default(AS3Parser.program_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 1) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:86:2: ( program )
            // AS3.g:86:4: program
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_program_in_compilationUnit87);
            	program1 = program();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, program1.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 1, compilationUnit_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public class literal_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "literal"
    // AS3.g:641:1: literal : ( NullLiteral | BooleanLiteral | NumericLiteral | StringLiteral );
    public AS3Parser.literal_return literal() // throws RecognitionException [1]
    {   
        AS3Parser.literal_return retval = new AS3Parser.literal_return();
        retval.Start = input.LT(1);
        int literal_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken set2 = null;

        CommonTree set2_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 2) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:642:2: ( NullLiteral | BooleanLiteral | NumericLiteral | StringLiteral )
            // AS3.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	set2 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= NullLiteral && input.LA(1) <= StringLiteral) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set2));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 2, literal_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public class primaryExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "primaryExpression"
    // AS3.g:741:1: primaryExpression : ( 'this' | Identifier | literal | arrayLiteral | objectLiteral | '(' ( LineTerminator )* expression ( LineTerminator )* ')' );
    public AS3Parser.primaryExpression_return primaryExpression() // throws RecognitionException [1]
    {   
        AS3Parser.primaryExpression_return retval = new AS3Parser.primaryExpression_return();
        retval.Start = input.LT(1);
        int primaryExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal3 = null;
        IToken Identifier4 = null;
        IToken char_literal8 = null;
        IToken LineTerminator9 = null;
        IToken LineTerminator11 = null;
        IToken char_literal12 = null;
        AS3Parser.literal_return literal5 = default(AS3Parser.literal_return);

        AS3Parser.arrayLiteral_return arrayLiteral6 = default(AS3Parser.arrayLiteral_return);

        AS3Parser.objectLiteral_return objectLiteral7 = default(AS3Parser.objectLiteral_return);

        AS3Parser.expression_return expression10 = default(AS3Parser.expression_return);


        CommonTree string_literal3_tree=null;
        CommonTree Identifier4_tree=null;
        CommonTree char_literal8_tree=null;
        CommonTree LineTerminator9_tree=null;
        CommonTree LineTerminator11_tree=null;
        CommonTree char_literal12_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 3) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:742:2: ( 'this' | Identifier | literal | arrayLiteral | objectLiteral | '(' ( LineTerminator )* expression ( LineTerminator )* ')' )
            int alt3 = 6;
            switch ( input.LA(1) ) 
            {
            case 35:
            	{
                alt3 = 1;
                }
                break;
            case Identifier:
            	{
                alt3 = 2;
                }
                break;
            case NullLiteral:
            case BooleanLiteral:
            case NumericLiteral:
            case StringLiteral:
            	{
                alt3 = 3;
                }
                break;
            case 38:
            	{
                alt3 = 4;
                }
                break;
            case 41:
            	{
                alt3 = 5;
                }
                break;
            case 36:
            	{
                alt3 = 6;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d3s0 =
            	        new NoViableAltException("", 3, 0, input);

            	    throw nvae_d3s0;
            }

            switch (alt3) 
            {
                case 1 :
                    // AS3.g:742:4: 'this'
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	string_literal3=(IToken)Match(input,35,FOLLOW_35_in_primaryExpression3581); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal3_tree = (CommonTree)adaptor.Create(string_literal3);
                    		adaptor.AddChild(root_0, string_literal3_tree);
                    	}

                    }
                    break;
                case 2 :
                    // AS3.g:743:4: Identifier
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	Identifier4=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_primaryExpression3586); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{Identifier4_tree = (CommonTree)adaptor.Create(Identifier4);
                    		adaptor.AddChild(root_0, Identifier4_tree);
                    	}

                    }
                    break;
                case 3 :
                    // AS3.g:744:4: literal
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_literal_in_primaryExpression3591);
                    	literal5 = literal();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, literal5.Tree);

                    }
                    break;
                case 4 :
                    // AS3.g:745:4: arrayLiteral
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_arrayLiteral_in_primaryExpression3596);
                    	arrayLiteral6 = arrayLiteral();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arrayLiteral6.Tree);

                    }
                    break;
                case 5 :
                    // AS3.g:746:4: objectLiteral
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_objectLiteral_in_primaryExpression3601);
                    	objectLiteral7 = objectLiteral();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, objectLiteral7.Tree);

                    }
                    break;
                case 6 :
                    // AS3.g:747:4: '(' ( LineTerminator )* expression ( LineTerminator )* ')'
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	char_literal8=(IToken)Match(input,36,FOLLOW_36_in_primaryExpression3606); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal8_tree = (CommonTree)adaptor.Create(char_literal8);
                    		adaptor.AddChild(root_0, char_literal8_tree);
                    	}
                    	// AS3.g:747:9: ( LineTerminator )*
                    	do 
                    	{
                    	    int alt1 = 2;
                    	    alt1 = dfa1.Predict(input);
                    	    switch (alt1) 
                    		{
                    			case 1 :
                    			    // AS3.g:0:0: LineTerminator
                    			    {
                    			    	LineTerminator9=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_primaryExpression3609); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{LineTerminator9_tree = (CommonTree)adaptor.Create(LineTerminator9);
                    			    		adaptor.AddChild(root_0, LineTerminator9_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop1;
                    	    }
                    	} while (true);

                    	loop1:
                    		;	// Stops C# compiler whining that label 'loop1' has no statements

                    	PushFollow(FOLLOW_expression_in_primaryExpression3612);
                    	expression10 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression10.Tree);
                    	// AS3.g:747:36: ( LineTerminator )*
                    	do 
                    	{
                    	    int alt2 = 2;
                    	    int LA2_0 = input.LA(1);

                    	    if ( (LA2_0 == LineTerminator) )
                    	    {
                    	        alt2 = 1;
                    	    }


                    	    switch (alt2) 
                    		{
                    			case 1 :
                    			    // AS3.g:0:0: LineTerminator
                    			    {
                    			    	LineTerminator11=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_primaryExpression3614); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{LineTerminator11_tree = (CommonTree)adaptor.Create(LineTerminator11);
                    			    		adaptor.AddChild(root_0, LineTerminator11_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop2;
                    	    }
                    	} while (true);

                    	loop2:
                    		;	// Stops C# compiler whining that label 'loop2' has no statements

                    	char_literal12=(IToken)Match(input,37,FOLLOW_37_in_primaryExpression3617); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal12_tree = (CommonTree)adaptor.Create(char_literal12);
                    		adaptor.AddChild(root_0, char_literal12_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 3, primaryExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"

    public class arrayLiteral_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "arrayLiteral"
    // AS3.g:750:1: arrayLiteral : '[' ( LineTerminator )* ( assignmentExpression )? ( ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )? )* ( LineTerminator )* ']' ;
    public AS3Parser.arrayLiteral_return arrayLiteral() // throws RecognitionException [1]
    {   
        AS3Parser.arrayLiteral_return retval = new AS3Parser.arrayLiteral_return();
        retval.Start = input.LT(1);
        int arrayLiteral_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal13 = null;
        IToken LineTerminator14 = null;
        IToken LineTerminator16 = null;
        IToken char_literal17 = null;
        IToken LineTerminator18 = null;
        IToken LineTerminator20 = null;
        IToken char_literal21 = null;
        AS3Parser.assignmentExpression_return assignmentExpression15 = default(AS3Parser.assignmentExpression_return);

        AS3Parser.assignmentExpression_return assignmentExpression19 = default(AS3Parser.assignmentExpression_return);


        CommonTree char_literal13_tree=null;
        CommonTree LineTerminator14_tree=null;
        CommonTree LineTerminator16_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree LineTerminator18_tree=null;
        CommonTree LineTerminator20_tree=null;
        CommonTree char_literal21_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 4) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:751:2: ( '[' ( LineTerminator )* ( assignmentExpression )? ( ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )? )* ( LineTerminator )* ']' )
            // AS3.g:751:4: '[' ( LineTerminator )* ( assignmentExpression )? ( ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )? )* ( LineTerminator )* ']'
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal13=(IToken)Match(input,38,FOLLOW_38_in_arrayLiteral3629); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal13_tree = (CommonTree)adaptor.Create(char_literal13);
            		adaptor.AddChild(root_0, char_literal13_tree);
            	}
            	// AS3.g:751:8: ( LineTerminator )*
            	do 
            	{
            	    int alt4 = 2;
            	    alt4 = dfa4.Predict(input);
            	    switch (alt4) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator14=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_arrayLiteral3631); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator14_tree = (CommonTree)adaptor.Create(LineTerminator14);
            			    		adaptor.AddChild(root_0, LineTerminator14_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop4;
            	    }
            	} while (true);

            	loop4:
            		;	// Stops C# compiler whining that label 'loop4' has no statements

            	// AS3.g:751:24: ( assignmentExpression )?
            	int alt5 = 2;
            	alt5 = dfa5.Predict(input);
            	switch (alt5) 
            	{
            	    case 1 :
            	        // AS3.g:0:0: assignmentExpression
            	        {
            	        	PushFollow(FOLLOW_assignmentExpression_in_arrayLiteral3634);
            	        	assignmentExpression15 = assignmentExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression15.Tree);

            	        }
            	        break;

            	}

            	// AS3.g:751:46: ( ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )? )*
            	do 
            	{
            	    int alt9 = 2;
            	    int LA9_0 = input.LA(1);

            	    if ( (LA9_0 == LineTerminator) )
            	    {
            	        int LA9_1 = input.LA(2);

            	        if ( (LA9_1 == 39) )
            	        {
            	            alt9 = 1;
            	        }
            	        else if ( (LA9_1 == LineTerminator) )
            	        {
            	            int LA9_5 = input.LA(3);

            	            if ( (synpred16_AS3()) )
            	            {
            	                alt9 = 1;
            	            }


            	        }


            	    }
            	    else if ( (LA9_0 == 39) )
            	    {
            	        alt9 = 1;
            	    }


            	    switch (alt9) 
            		{
            			case 1 :
            			    // AS3.g:751:47: ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )?
            			    {
            			    	// AS3.g:751:47: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt6 = 2;
            			    	    int LA6_0 = input.LA(1);

            			    	    if ( (LA6_0 == LineTerminator) )
            			    	    {
            			    	        alt6 = 1;
            			    	    }


            			    	    switch (alt6) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator16=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_arrayLiteral3638); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator16_tree = (CommonTree)adaptor.Create(LineTerminator16);
            			    			    		adaptor.AddChild(root_0, LineTerminator16_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop6;
            			    	    }
            			    	} while (true);

            			    	loop6:
            			    		;	// Stops C# compiler whining that label 'loop6' has no statements

            			    	char_literal17=(IToken)Match(input,39,FOLLOW_39_in_arrayLiteral3641); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal17_tree = (CommonTree)adaptor.Create(char_literal17);
            			    		adaptor.AddChild(root_0, char_literal17_tree);
            			    	}
            			    	// AS3.g:751:67: ( ( LineTerminator )* assignmentExpression )?
            			    	int alt8 = 2;
            			    	alt8 = dfa8.Predict(input);
            			    	switch (alt8) 
            			    	{
            			    	    case 1 :
            			    	        // AS3.g:751:68: ( LineTerminator )* assignmentExpression
            			    	        {
            			    	        	// AS3.g:751:68: ( LineTerminator )*
            			    	        	do 
            			    	        	{
            			    	        	    int alt7 = 2;
            			    	        	    alt7 = dfa7.Predict(input);
            			    	        	    switch (alt7) 
            			    	        		{
            			    	        			case 1 :
            			    	        			    // AS3.g:0:0: LineTerminator
            			    	        			    {
            			    	        			    	LineTerminator18=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_arrayLiteral3644); if (state.failed) return retval;
            			    	        			    	if ( state.backtracking == 0 )
            			    	        			    	{LineTerminator18_tree = (CommonTree)adaptor.Create(LineTerminator18);
            			    	        			    		adaptor.AddChild(root_0, LineTerminator18_tree);
            			    	        			    	}

            			    	        			    }
            			    	        			    break;

            			    	        			default:
            			    	        			    goto loop7;
            			    	        	    }
            			    	        	} while (true);

            			    	        	loop7:
            			    	        		;	// Stops C# compiler whining that label 'loop7' has no statements

            			    	        	PushFollow(FOLLOW_assignmentExpression_in_arrayLiteral3647);
            			    	        	assignmentExpression19 = assignmentExpression();
            			    	        	state.followingStackPointer--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression19.Tree);

            			    	        }
            			    	        break;

            			    	}


            			    }
            			    break;

            			default:
            			    goto loop9;
            	    }
            	} while (true);

            	loop9:
            		;	// Stops C# compiler whining that label 'loop9' has no statements

            	// AS3.g:751:109: ( LineTerminator )*
            	do 
            	{
            	    int alt10 = 2;
            	    int LA10_0 = input.LA(1);

            	    if ( (LA10_0 == LineTerminator) )
            	    {
            	        alt10 = 1;
            	    }


            	    switch (alt10) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator20=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_arrayLiteral3653); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator20_tree = (CommonTree)adaptor.Create(LineTerminator20);
            			    		adaptor.AddChild(root_0, LineTerminator20_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop10;
            	    }
            	} while (true);

            	loop10:
            		;	// Stops C# compiler whining that label 'loop10' has no statements

            	char_literal21=(IToken)Match(input,40,FOLLOW_40_in_arrayLiteral3656); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal21_tree = (CommonTree)adaptor.Create(char_literal21);
            		adaptor.AddChild(root_0, char_literal21_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 4, arrayLiteral_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "arrayLiteral"

    public class objectLiteral_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "objectLiteral"
    // AS3.g:754:1: objectLiteral : '{' ( LineTerminator )* propertyNameAndValue ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )* ( LineTerminator )* '}' ;
    public AS3Parser.objectLiteral_return objectLiteral() // throws RecognitionException [1]
    {   
        AS3Parser.objectLiteral_return retval = new AS3Parser.objectLiteral_return();
        retval.Start = input.LT(1);
        int objectLiteral_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal22 = null;
        IToken LineTerminator23 = null;
        IToken LineTerminator25 = null;
        IToken char_literal26 = null;
        IToken LineTerminator27 = null;
        IToken LineTerminator29 = null;
        IToken char_literal30 = null;
        AS3Parser.propertyNameAndValue_return propertyNameAndValue24 = default(AS3Parser.propertyNameAndValue_return);

        AS3Parser.propertyNameAndValue_return propertyNameAndValue28 = default(AS3Parser.propertyNameAndValue_return);


        CommonTree char_literal22_tree=null;
        CommonTree LineTerminator23_tree=null;
        CommonTree LineTerminator25_tree=null;
        CommonTree char_literal26_tree=null;
        CommonTree LineTerminator27_tree=null;
        CommonTree LineTerminator29_tree=null;
        CommonTree char_literal30_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 5) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:755:2: ( '{' ( LineTerminator )* propertyNameAndValue ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )* ( LineTerminator )* '}' )
            // AS3.g:755:4: '{' ( LineTerminator )* propertyNameAndValue ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )* ( LineTerminator )* '}'
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal22=(IToken)Match(input,41,FOLLOW_41_in_objectLiteral3668); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal22_tree = (CommonTree)adaptor.Create(char_literal22);
            		adaptor.AddChild(root_0, char_literal22_tree);
            	}
            	// AS3.g:755:8: ( LineTerminator )*
            	do 
            	{
            	    int alt11 = 2;
            	    int LA11_0 = input.LA(1);

            	    if ( (LA11_0 == LineTerminator) )
            	    {
            	        alt11 = 1;
            	    }


            	    switch (alt11) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator23=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_objectLiteral3670); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator23_tree = (CommonTree)adaptor.Create(LineTerminator23);
            			    		adaptor.AddChild(root_0, LineTerminator23_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop11;
            	    }
            	} while (true);

            	loop11:
            		;	// Stops C# compiler whining that label 'loop11' has no statements

            	PushFollow(FOLLOW_propertyNameAndValue_in_objectLiteral3673);
            	propertyNameAndValue24 = propertyNameAndValue();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, propertyNameAndValue24.Tree);
            	// AS3.g:755:45: ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )*
            	do 
            	{
            	    int alt14 = 2;
            	    int LA14_0 = input.LA(1);

            	    if ( (LA14_0 == LineTerminator) )
            	    {
            	        int LA14_1 = input.LA(2);

            	        if ( (LA14_1 == 39) )
            	        {
            	            alt14 = 1;
            	        }
            	        else if ( (LA14_1 == LineTerminator) )
            	        {
            	            int LA14_5 = input.LA(3);

            	            if ( (synpred21_AS3()) )
            	            {
            	                alt14 = 1;
            	            }


            	        }


            	    }
            	    else if ( (LA14_0 == 39) )
            	    {
            	        alt14 = 1;
            	    }


            	    switch (alt14) 
            		{
            			case 1 :
            			    // AS3.g:755:46: ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue
            			    {
            			    	// AS3.g:755:46: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt12 = 2;
            			    	    int LA12_0 = input.LA(1);

            			    	    if ( (LA12_0 == LineTerminator) )
            			    	    {
            			    	        alt12 = 1;
            			    	    }


            			    	    switch (alt12) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator25=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_objectLiteral3676); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator25_tree = (CommonTree)adaptor.Create(LineTerminator25);
            			    			    		adaptor.AddChild(root_0, LineTerminator25_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop12;
            			    	    }
            			    	} while (true);

            			    	loop12:
            			    		;	// Stops C# compiler whining that label 'loop12' has no statements

            			    	char_literal26=(IToken)Match(input,39,FOLLOW_39_in_objectLiteral3679); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal26_tree = (CommonTree)adaptor.Create(char_literal26);
            			    		adaptor.AddChild(root_0, char_literal26_tree);
            			    	}
            			    	// AS3.g:755:66: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt13 = 2;
            			    	    int LA13_0 = input.LA(1);

            			    	    if ( (LA13_0 == LineTerminator) )
            			    	    {
            			    	        alt13 = 1;
            			    	    }


            			    	    switch (alt13) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator27=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_objectLiteral3681); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator27_tree = (CommonTree)adaptor.Create(LineTerminator27);
            			    			    		adaptor.AddChild(root_0, LineTerminator27_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop13;
            			    	    }
            			    	} while (true);

            			    	loop13:
            			    		;	// Stops C# compiler whining that label 'loop13' has no statements

            			    	PushFollow(FOLLOW_propertyNameAndValue_in_objectLiteral3684);
            			    	propertyNameAndValue28 = propertyNameAndValue();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, propertyNameAndValue28.Tree);

            			    }
            			    break;

            			default:
            			    goto loop14;
            	    }
            	} while (true);

            	loop14:
            		;	// Stops C# compiler whining that label 'loop14' has no statements

            	// AS3.g:755:105: ( LineTerminator )*
            	do 
            	{
            	    int alt15 = 2;
            	    int LA15_0 = input.LA(1);

            	    if ( (LA15_0 == LineTerminator) )
            	    {
            	        alt15 = 1;
            	    }


            	    switch (alt15) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator29=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_objectLiteral3688); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator29_tree = (CommonTree)adaptor.Create(LineTerminator29);
            			    		adaptor.AddChild(root_0, LineTerminator29_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop15;
            	    }
            	} while (true);

            	loop15:
            		;	// Stops C# compiler whining that label 'loop15' has no statements

            	char_literal30=(IToken)Match(input,42,FOLLOW_42_in_objectLiteral3691); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal30_tree = (CommonTree)adaptor.Create(char_literal30);
            		adaptor.AddChild(root_0, char_literal30_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 5, objectLiteral_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "objectLiteral"

    public class propertyNameAndValue_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "propertyNameAndValue"
    // AS3.g:758:1: propertyNameAndValue : propertyName ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression ;
    public AS3Parser.propertyNameAndValue_return propertyNameAndValue() // throws RecognitionException [1]
    {   
        AS3Parser.propertyNameAndValue_return retval = new AS3Parser.propertyNameAndValue_return();
        retval.Start = input.LT(1);
        int propertyNameAndValue_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator32 = null;
        IToken char_literal33 = null;
        IToken LineTerminator34 = null;
        AS3Parser.propertyName_return propertyName31 = default(AS3Parser.propertyName_return);

        AS3Parser.assignmentExpression_return assignmentExpression35 = default(AS3Parser.assignmentExpression_return);


        CommonTree LineTerminator32_tree=null;
        CommonTree char_literal33_tree=null;
        CommonTree LineTerminator34_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 6) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:759:2: ( propertyName ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )
            // AS3.g:759:4: propertyName ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_propertyName_in_propertyNameAndValue3702);
            	propertyName31 = propertyName();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, propertyName31.Tree);
            	// AS3.g:759:17: ( LineTerminator )*
            	do 
            	{
            	    int alt16 = 2;
            	    int LA16_0 = input.LA(1);

            	    if ( (LA16_0 == LineTerminator) )
            	    {
            	        alt16 = 1;
            	    }


            	    switch (alt16) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator32=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_propertyNameAndValue3704); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator32_tree = (CommonTree)adaptor.Create(LineTerminator32);
            			    		adaptor.AddChild(root_0, LineTerminator32_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop16;
            	    }
            	} while (true);

            	loop16:
            		;	// Stops C# compiler whining that label 'loop16' has no statements

            	char_literal33=(IToken)Match(input,43,FOLLOW_43_in_propertyNameAndValue3707); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal33_tree = (CommonTree)adaptor.Create(char_literal33);
            		adaptor.AddChild(root_0, char_literal33_tree);
            	}
            	// AS3.g:759:37: ( LineTerminator )*
            	do 
            	{
            	    int alt17 = 2;
            	    alt17 = dfa17.Predict(input);
            	    switch (alt17) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator34=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_propertyNameAndValue3709); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator34_tree = (CommonTree)adaptor.Create(LineTerminator34);
            			    		adaptor.AddChild(root_0, LineTerminator34_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop17;
            	    }
            	} while (true);

            	loop17:
            		;	// Stops C# compiler whining that label 'loop17' has no statements

            	PushFollow(FOLLOW_assignmentExpression_in_propertyNameAndValue3712);
            	assignmentExpression35 = assignmentExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression35.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 6, propertyNameAndValue_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "propertyNameAndValue"

    public class propertyName_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "propertyName"
    // AS3.g:762:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
    public AS3Parser.propertyName_return propertyName() // throws RecognitionException [1]
    {   
        AS3Parser.propertyName_return retval = new AS3Parser.propertyName_return();
        retval.Start = input.LT(1);
        int propertyName_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken set36 = null;

        CommonTree set36_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 7) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:763:2: ( Identifier | StringLiteral | NumericLiteral )
            // AS3.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	set36 = (IToken)input.LT(1);
            	if ( input.LA(1) == Identifier || (input.LA(1) >= NumericLiteral && input.LA(1) <= StringLiteral) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set36));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 7, propertyName_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "propertyName"

    public class memberExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "memberExpression"
    // AS3.g:768:1: memberExpression : ( primaryExpression | functionExpression | 'new' ( LineTerminator )* memberExpression ( LineTerminator )* argumentList ) ( ( LineTerminator )* memberExpressionSuffix )* ;
    public AS3Parser.memberExpression_return memberExpression() // throws RecognitionException [1]
    {   
        AS3Parser.memberExpression_return retval = new AS3Parser.memberExpression_return();
        retval.Start = input.LT(1);
        int memberExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal39 = null;
        IToken LineTerminator40 = null;
        IToken LineTerminator42 = null;
        IToken LineTerminator44 = null;
        AS3Parser.primaryExpression_return primaryExpression37 = default(AS3Parser.primaryExpression_return);

        AS3Parser.functionExpression_return functionExpression38 = default(AS3Parser.functionExpression_return);

        AS3Parser.memberExpression_return memberExpression41 = default(AS3Parser.memberExpression_return);

        AS3Parser.argumentList_return argumentList43 = default(AS3Parser.argumentList_return);

        AS3Parser.memberExpressionSuffix_return memberExpressionSuffix45 = default(AS3Parser.memberExpressionSuffix_return);


        CommonTree string_literal39_tree=null;
        CommonTree LineTerminator40_tree=null;
        CommonTree LineTerminator42_tree=null;
        CommonTree LineTerminator44_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 8) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:769:2: ( ( primaryExpression | functionExpression | 'new' ( LineTerminator )* memberExpression ( LineTerminator )* argumentList ) ( ( LineTerminator )* memberExpressionSuffix )* )
            // AS3.g:769:4: ( primaryExpression | functionExpression | 'new' ( LineTerminator )* memberExpression ( LineTerminator )* argumentList ) ( ( LineTerminator )* memberExpressionSuffix )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	// AS3.g:769:4: ( primaryExpression | functionExpression | 'new' ( LineTerminator )* memberExpression ( LineTerminator )* argumentList )
            	int alt20 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case Identifier:
            	case NullLiteral:
            	case BooleanLiteral:
            	case NumericLiteral:
            	case StringLiteral:
            	case 35:
            	case 36:
            	case 38:
            	case 41:
            		{
            	    alt20 = 1;
            	    }
            	    break;
            	case 107:
            		{
            	    alt20 = 2;
            	    }
            	    break;
            	case 44:
            		{
            	    alt20 = 3;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d20s0 =
            		        new NoViableAltException("", 20, 0, input);

            		    throw nvae_d20s0;
            	}

            	switch (alt20) 
            	{
            	    case 1 :
            	        // AS3.g:769:5: primaryExpression
            	        {
            	        	PushFollow(FOLLOW_primaryExpression_in_memberExpression3746);
            	        	primaryExpression37 = primaryExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primaryExpression37.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // AS3.g:769:25: functionExpression
            	        {
            	        	PushFollow(FOLLOW_functionExpression_in_memberExpression3750);
            	        	functionExpression38 = functionExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, functionExpression38.Tree);

            	        }
            	        break;
            	    case 3 :
            	        // AS3.g:769:46: 'new' ( LineTerminator )* memberExpression ( LineTerminator )* argumentList
            	        {
            	        	string_literal39=(IToken)Match(input,44,FOLLOW_44_in_memberExpression3754); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal39_tree = (CommonTree)adaptor.Create(string_literal39);
            	        		adaptor.AddChild(root_0, string_literal39_tree);
            	        	}
            	        	// AS3.g:769:52: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt18 = 2;
            	        	    alt18 = dfa18.Predict(input);
            	        	    switch (alt18) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator40=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_memberExpression3756); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator40_tree = (CommonTree)adaptor.Create(LineTerminator40);
            	        			    		adaptor.AddChild(root_0, LineTerminator40_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop18;
            	        	    }
            	        	} while (true);

            	        	loop18:
            	        		;	// Stops C# compiler whining that label 'loop18' has no statements

            	        	PushFollow(FOLLOW_memberExpression_in_memberExpression3759);
            	        	memberExpression41 = memberExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, memberExpression41.Tree);
            	        	// AS3.g:769:85: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt19 = 2;
            	        	    int LA19_0 = input.LA(1);

            	        	    if ( (LA19_0 == LineTerminator) )
            	        	    {
            	        	        alt19 = 1;
            	        	    }


            	        	    switch (alt19) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator42=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_memberExpression3761); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator42_tree = (CommonTree)adaptor.Create(LineTerminator42);
            	        			    		adaptor.AddChild(root_0, LineTerminator42_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop19;
            	        	    }
            	        	} while (true);

            	        	loop19:
            	        		;	// Stops C# compiler whining that label 'loop19' has no statements

            	        	PushFollow(FOLLOW_argumentList_in_memberExpression3764);
            	        	argumentList43 = argumentList();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argumentList43.Tree);

            	        }
            	        break;

            	}

            	// AS3.g:769:115: ( ( LineTerminator )* memberExpressionSuffix )*
            	do 
            	{
            	    int alt22 = 2;
            	    alt22 = dfa22.Predict(input);
            	    switch (alt22) 
            		{
            			case 1 :
            			    // AS3.g:769:116: ( LineTerminator )* memberExpressionSuffix
            			    {
            			    	// AS3.g:769:116: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt21 = 2;
            			    	    int LA21_0 = input.LA(1);

            			    	    if ( (LA21_0 == LineTerminator) )
            			    	    {
            			    	        alt21 = 1;
            			    	    }


            			    	    switch (alt21) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator44=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_memberExpression3768); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator44_tree = (CommonTree)adaptor.Create(LineTerminator44);
            			    			    		adaptor.AddChild(root_0, LineTerminator44_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop21;
            			    	    }
            			    	} while (true);

            			    	loop21:
            			    		;	// Stops C# compiler whining that label 'loop21' has no statements

            			    	PushFollow(FOLLOW_memberExpressionSuffix_in_memberExpression3771);
            			    	memberExpressionSuffix45 = memberExpressionSuffix();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, memberExpressionSuffix45.Tree);

            			    }
            			    break;

            			default:
            			    goto loop22;
            	    }
            	} while (true);

            	loop22:
            		;	// Stops C# compiler whining that label 'loop22' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 8, memberExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "memberExpression"

    public class memberExpressionSuffix_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "memberExpressionSuffix"
    // AS3.g:772:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix );
    public AS3Parser.memberExpressionSuffix_return memberExpressionSuffix() // throws RecognitionException [1]
    {   
        AS3Parser.memberExpressionSuffix_return retval = new AS3Parser.memberExpressionSuffix_return();
        retval.Start = input.LT(1);
        int memberExpressionSuffix_StartIndex = input.Index();
        CommonTree root_0 = null;

        AS3Parser.indexSuffix_return indexSuffix46 = default(AS3Parser.indexSuffix_return);

        AS3Parser.propertyReferenceSuffix_return propertyReferenceSuffix47 = default(AS3Parser.propertyReferenceSuffix_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 9) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:773:2: ( indexSuffix | propertyReferenceSuffix )
            int alt23 = 2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0 == 38) )
            {
                alt23 = 1;
            }
            else if ( (LA23_0 == 45) )
            {
                alt23 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d23s0 =
                    new NoViableAltException("", 23, 0, input);

                throw nvae_d23s0;
            }
            switch (alt23) 
            {
                case 1 :
                    // AS3.g:773:4: indexSuffix
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_indexSuffix_in_memberExpressionSuffix3785);
                    	indexSuffix46 = indexSuffix();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexSuffix46.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:774:4: propertyReferenceSuffix
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3790);
                    	propertyReferenceSuffix47 = propertyReferenceSuffix();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, propertyReferenceSuffix47.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 9, memberExpressionSuffix_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "memberExpressionSuffix"

    public class newExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "newExpression"
    // AS3.g:777:1: newExpression : ( memberExpression | 'new' ( LineTerminator )* newExpression );
    public AS3Parser.newExpression_return newExpression() // throws RecognitionException [1]
    {   
        AS3Parser.newExpression_return retval = new AS3Parser.newExpression_return();
        retval.Start = input.LT(1);
        int newExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal49 = null;
        IToken LineTerminator50 = null;
        AS3Parser.memberExpression_return memberExpression48 = default(AS3Parser.memberExpression_return);

        AS3Parser.newExpression_return newExpression51 = default(AS3Parser.newExpression_return);


        CommonTree string_literal49_tree=null;
        CommonTree LineTerminator50_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 10) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:778:2: ( memberExpression | 'new' ( LineTerminator )* newExpression )
            int alt25 = 2;
            alt25 = dfa25.Predict(input);
            switch (alt25) 
            {
                case 1 :
                    // AS3.g:778:4: memberExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_memberExpression_in_newExpression3802);
                    	memberExpression48 = memberExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, memberExpression48.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:779:4: 'new' ( LineTerminator )* newExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	string_literal49=(IToken)Match(input,44,FOLLOW_44_in_newExpression3807); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal49_tree = (CommonTree)adaptor.Create(string_literal49);
                    		adaptor.AddChild(root_0, string_literal49_tree);
                    	}
                    	// AS3.g:779:10: ( LineTerminator )*
                    	do 
                    	{
                    	    int alt24 = 2;
                    	    alt24 = dfa24.Predict(input);
                    	    switch (alt24) 
                    		{
                    			case 1 :
                    			    // AS3.g:0:0: LineTerminator
                    			    {
                    			    	LineTerminator50=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_newExpression3809); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{LineTerminator50_tree = (CommonTree)adaptor.Create(LineTerminator50);
                    			    		adaptor.AddChild(root_0, LineTerminator50_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop24;
                    	    }
                    	} while (true);

                    	loop24:
                    		;	// Stops C# compiler whining that label 'loop24' has no statements

                    	PushFollow(FOLLOW_newExpression_in_newExpression3812);
                    	newExpression51 = newExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, newExpression51.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 10, newExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "newExpression"

    public class callExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "callExpression"
    // AS3.g:782:1: callExpression : memberExpression ( LineTerminator )* argumentList ( ( LineTerminator )* callExpressionSuffix )* ;
    public AS3Parser.callExpression_return callExpression() // throws RecognitionException [1]
    {   
        AS3Parser.callExpression_return retval = new AS3Parser.callExpression_return();
        retval.Start = input.LT(1);
        int callExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator53 = null;
        IToken LineTerminator55 = null;
        AS3Parser.memberExpression_return memberExpression52 = default(AS3Parser.memberExpression_return);

        AS3Parser.argumentList_return argumentList54 = default(AS3Parser.argumentList_return);

        AS3Parser.callExpressionSuffix_return callExpressionSuffix56 = default(AS3Parser.callExpressionSuffix_return);


        CommonTree LineTerminator53_tree=null;
        CommonTree LineTerminator55_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 11) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:783:2: ( memberExpression ( LineTerminator )* argumentList ( ( LineTerminator )* callExpressionSuffix )* )
            // AS3.g:783:4: memberExpression ( LineTerminator )* argumentList ( ( LineTerminator )* callExpressionSuffix )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_memberExpression_in_callExpression3824);
            	memberExpression52 = memberExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, memberExpression52.Tree);
            	// AS3.g:783:21: ( LineTerminator )*
            	do 
            	{
            	    int alt26 = 2;
            	    int LA26_0 = input.LA(1);

            	    if ( (LA26_0 == LineTerminator) )
            	    {
            	        alt26 = 1;
            	    }


            	    switch (alt26) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator53=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_callExpression3826); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator53_tree = (CommonTree)adaptor.Create(LineTerminator53);
            			    		adaptor.AddChild(root_0, LineTerminator53_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop26;
            	    }
            	} while (true);

            	loop26:
            		;	// Stops C# compiler whining that label 'loop26' has no statements

            	PushFollow(FOLLOW_argumentList_in_callExpression3829);
            	argumentList54 = argumentList();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argumentList54.Tree);
            	// AS3.g:783:50: ( ( LineTerminator )* callExpressionSuffix )*
            	do 
            	{
            	    int alt28 = 2;
            	    alt28 = dfa28.Predict(input);
            	    switch (alt28) 
            		{
            			case 1 :
            			    // AS3.g:783:51: ( LineTerminator )* callExpressionSuffix
            			    {
            			    	// AS3.g:783:51: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt27 = 2;
            			    	    int LA27_0 = input.LA(1);

            			    	    if ( (LA27_0 == LineTerminator) )
            			    	    {
            			    	        alt27 = 1;
            			    	    }


            			    	    switch (alt27) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator55=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_callExpression3832); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator55_tree = (CommonTree)adaptor.Create(LineTerminator55);
            			    			    		adaptor.AddChild(root_0, LineTerminator55_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop27;
            			    	    }
            			    	} while (true);

            			    	loop27:
            			    		;	// Stops C# compiler whining that label 'loop27' has no statements

            			    	PushFollow(FOLLOW_callExpressionSuffix_in_callExpression3835);
            			    	callExpressionSuffix56 = callExpressionSuffix();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, callExpressionSuffix56.Tree);

            			    }
            			    break;

            			default:
            			    goto loop28;
            	    }
            	} while (true);

            	loop28:
            		;	// Stops C# compiler whining that label 'loop28' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 11, callExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "callExpression"

    public class callExpressionSuffix_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "callExpressionSuffix"
    // AS3.g:786:1: callExpressionSuffix : ( argumentList | indexSuffix | propertyReferenceSuffix );
    public AS3Parser.callExpressionSuffix_return callExpressionSuffix() // throws RecognitionException [1]
    {   
        AS3Parser.callExpressionSuffix_return retval = new AS3Parser.callExpressionSuffix_return();
        retval.Start = input.LT(1);
        int callExpressionSuffix_StartIndex = input.Index();
        CommonTree root_0 = null;

        AS3Parser.argumentList_return argumentList57 = default(AS3Parser.argumentList_return);

        AS3Parser.indexSuffix_return indexSuffix58 = default(AS3Parser.indexSuffix_return);

        AS3Parser.propertyReferenceSuffix_return propertyReferenceSuffix59 = default(AS3Parser.propertyReferenceSuffix_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 12) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:787:2: ( argumentList | indexSuffix | propertyReferenceSuffix )
            int alt29 = 3;
            switch ( input.LA(1) ) 
            {
            case 36:
            	{
                alt29 = 1;
                }
                break;
            case 38:
            	{
                alt29 = 2;
                }
                break;
            case 45:
            	{
                alt29 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d29s0 =
            	        new NoViableAltException("", 29, 0, input);

            	    throw nvae_d29s0;
            }

            switch (alt29) 
            {
                case 1 :
                    // AS3.g:787:4: argumentList
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_argumentList_in_callExpressionSuffix3849);
                    	argumentList57 = argumentList();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argumentList57.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:788:4: indexSuffix
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_indexSuffix_in_callExpressionSuffix3854);
                    	indexSuffix58 = indexSuffix();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexSuffix58.Tree);

                    }
                    break;
                case 3 :
                    // AS3.g:789:4: propertyReferenceSuffix
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3859);
                    	propertyReferenceSuffix59 = propertyReferenceSuffix();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, propertyReferenceSuffix59.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 12, callExpressionSuffix_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "callExpressionSuffix"

    public class indexSuffix_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "indexSuffix"
    // AS3.g:792:1: indexSuffix : '[' ( LineTerminator )* expression ( LineTerminator )* ']' ;
    public AS3Parser.indexSuffix_return indexSuffix() // throws RecognitionException [1]
    {   
        AS3Parser.indexSuffix_return retval = new AS3Parser.indexSuffix_return();
        retval.Start = input.LT(1);
        int indexSuffix_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal60 = null;
        IToken LineTerminator61 = null;
        IToken LineTerminator63 = null;
        IToken char_literal64 = null;
        AS3Parser.expression_return expression62 = default(AS3Parser.expression_return);


        CommonTree char_literal60_tree=null;
        CommonTree LineTerminator61_tree=null;
        CommonTree LineTerminator63_tree=null;
        CommonTree char_literal64_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 13) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:793:2: ( '[' ( LineTerminator )* expression ( LineTerminator )* ']' )
            // AS3.g:793:4: '[' ( LineTerminator )* expression ( LineTerminator )* ']'
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal60=(IToken)Match(input,38,FOLLOW_38_in_indexSuffix3870); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal60_tree = (CommonTree)adaptor.Create(char_literal60);
            		adaptor.AddChild(root_0, char_literal60_tree);
            	}
            	// AS3.g:793:8: ( LineTerminator )*
            	do 
            	{
            	    int alt30 = 2;
            	    alt30 = dfa30.Predict(input);
            	    switch (alt30) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator61=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_indexSuffix3872); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator61_tree = (CommonTree)adaptor.Create(LineTerminator61);
            			    		adaptor.AddChild(root_0, LineTerminator61_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop30;
            	    }
            	} while (true);

            	loop30:
            		;	// Stops C# compiler whining that label 'loop30' has no statements

            	PushFollow(FOLLOW_expression_in_indexSuffix3875);
            	expression62 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression62.Tree);
            	// AS3.g:793:35: ( LineTerminator )*
            	do 
            	{
            	    int alt31 = 2;
            	    int LA31_0 = input.LA(1);

            	    if ( (LA31_0 == LineTerminator) )
            	    {
            	        alt31 = 1;
            	    }


            	    switch (alt31) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator63=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_indexSuffix3877); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator63_tree = (CommonTree)adaptor.Create(LineTerminator63);
            			    		adaptor.AddChild(root_0, LineTerminator63_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop31;
            	    }
            	} while (true);

            	loop31:
            		;	// Stops C# compiler whining that label 'loop31' has no statements

            	char_literal64=(IToken)Match(input,40,FOLLOW_40_in_indexSuffix3880); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal64_tree = (CommonTree)adaptor.Create(char_literal64);
            		adaptor.AddChild(root_0, char_literal64_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 13, indexSuffix_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "indexSuffix"

    public class propertyReferenceSuffix_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "propertyReferenceSuffix"
    // AS3.g:796:1: propertyReferenceSuffix : '.' ( LineTerminator )* Identifier ;
    public AS3Parser.propertyReferenceSuffix_return propertyReferenceSuffix() // throws RecognitionException [1]
    {   
        AS3Parser.propertyReferenceSuffix_return retval = new AS3Parser.propertyReferenceSuffix_return();
        retval.Start = input.LT(1);
        int propertyReferenceSuffix_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal65 = null;
        IToken LineTerminator66 = null;
        IToken Identifier67 = null;

        CommonTree char_literal65_tree=null;
        CommonTree LineTerminator66_tree=null;
        CommonTree Identifier67_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 14) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:797:2: ( '.' ( LineTerminator )* Identifier )
            // AS3.g:797:4: '.' ( LineTerminator )* Identifier
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal65=(IToken)Match(input,45,FOLLOW_45_in_propertyReferenceSuffix3893); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal65_tree = (CommonTree)adaptor.Create(char_literal65);
            		adaptor.AddChild(root_0, char_literal65_tree);
            	}
            	// AS3.g:797:8: ( LineTerminator )*
            	do 
            	{
            	    int alt32 = 2;
            	    int LA32_0 = input.LA(1);

            	    if ( (LA32_0 == LineTerminator) )
            	    {
            	        alt32 = 1;
            	    }


            	    switch (alt32) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator66=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_propertyReferenceSuffix3895); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator66_tree = (CommonTree)adaptor.Create(LineTerminator66);
            			    		adaptor.AddChild(root_0, LineTerminator66_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop32;
            	    }
            	} while (true);

            	loop32:
            		;	// Stops C# compiler whining that label 'loop32' has no statements

            	Identifier67=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_propertyReferenceSuffix3898); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{Identifier67_tree = (CommonTree)adaptor.Create(Identifier67);
            		adaptor.AddChild(root_0, Identifier67_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 14, propertyReferenceSuffix_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "propertyReferenceSuffix"

    public class argumentList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "argumentList"
    // AS3.g:800:1: argumentList : '(' ( ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )? ( LineTerminator )* ')' ;
    public AS3Parser.argumentList_return argumentList() // throws RecognitionException [1]
    {   
        AS3Parser.argumentList_return retval = new AS3Parser.argumentList_return();
        retval.Start = input.LT(1);
        int argumentList_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal68 = null;
        IToken LineTerminator69 = null;
        IToken LineTerminator71 = null;
        IToken char_literal72 = null;
        IToken LineTerminator73 = null;
        IToken LineTerminator75 = null;
        IToken char_literal76 = null;
        AS3Parser.assignmentExpression_return assignmentExpression70 = default(AS3Parser.assignmentExpression_return);

        AS3Parser.assignmentExpression_return assignmentExpression74 = default(AS3Parser.assignmentExpression_return);


        CommonTree char_literal68_tree=null;
        CommonTree LineTerminator69_tree=null;
        CommonTree LineTerminator71_tree=null;
        CommonTree char_literal72_tree=null;
        CommonTree LineTerminator73_tree=null;
        CommonTree LineTerminator75_tree=null;
        CommonTree char_literal76_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 15) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:801:2: ( '(' ( ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )? ( LineTerminator )* ')' )
            // AS3.g:801:4: '(' ( ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )? ( LineTerminator )* ')'
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal68=(IToken)Match(input,36,FOLLOW_36_in_argumentList3910); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal68_tree = (CommonTree)adaptor.Create(char_literal68);
            		adaptor.AddChild(root_0, char_literal68_tree);
            	}
            	// AS3.g:801:8: ( ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )?
            	int alt37 = 2;
            	alt37 = dfa37.Predict(input);
            	switch (alt37) 
            	{
            	    case 1 :
            	        // AS3.g:801:9: ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*
            	        {
            	        	// AS3.g:801:9: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt33 = 2;
            	        	    alt33 = dfa33.Predict(input);
            	        	    switch (alt33) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator69=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_argumentList3913); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator69_tree = (CommonTree)adaptor.Create(LineTerminator69);
            	        			    		adaptor.AddChild(root_0, LineTerminator69_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop33;
            	        	    }
            	        	} while (true);

            	        	loop33:
            	        		;	// Stops C# compiler whining that label 'loop33' has no statements

            	        	PushFollow(FOLLOW_assignmentExpression_in_argumentList3916);
            	        	assignmentExpression70 = assignmentExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression70.Tree);
            	        	// AS3.g:801:46: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*
            	        	do 
            	        	{
            	        	    int alt36 = 2;
            	        	    int LA36_0 = input.LA(1);

            	        	    if ( (LA36_0 == LineTerminator) )
            	        	    {
            	        	        int LA36_1 = input.LA(2);

            	        	        if ( (LA36_1 == 39) )
            	        	        {
            	        	            alt36 = 1;
            	        	        }
            	        	        else if ( (LA36_1 == LineTerminator) )
            	        	        {
            	        	            int LA36_5 = input.LA(3);

            	        	            if ( (synpred47_AS3()) )
            	        	            {
            	        	                alt36 = 1;
            	        	            }


            	        	        }


            	        	    }
            	        	    else if ( (LA36_0 == 39) )
            	        	    {
            	        	        alt36 = 1;
            	        	    }


            	        	    switch (alt36) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:801:47: ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression
            	        			    {
            	        			    	// AS3.g:801:47: ( LineTerminator )*
            	        			    	do 
            	        			    	{
            	        			    	    int alt34 = 2;
            	        			    	    int LA34_0 = input.LA(1);

            	        			    	    if ( (LA34_0 == LineTerminator) )
            	        			    	    {
            	        			    	        alt34 = 1;
            	        			    	    }


            	        			    	    switch (alt34) 
            	        			    		{
            	        			    			case 1 :
            	        			    			    // AS3.g:0:0: LineTerminator
            	        			    			    {
            	        			    			    	LineTerminator71=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_argumentList3919); if (state.failed) return retval;
            	        			    			    	if ( state.backtracking == 0 )
            	        			    			    	{LineTerminator71_tree = (CommonTree)adaptor.Create(LineTerminator71);
            	        			    			    		adaptor.AddChild(root_0, LineTerminator71_tree);
            	        			    			    	}

            	        			    			    }
            	        			    			    break;

            	        			    			default:
            	        			    			    goto loop34;
            	        			    	    }
            	        			    	} while (true);

            	        			    	loop34:
            	        			    		;	// Stops C# compiler whining that label 'loop34' has no statements

            	        			    	char_literal72=(IToken)Match(input,39,FOLLOW_39_in_argumentList3922); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{char_literal72_tree = (CommonTree)adaptor.Create(char_literal72);
            	        			    		adaptor.AddChild(root_0, char_literal72_tree);
            	        			    	}
            	        			    	// AS3.g:801:67: ( LineTerminator )*
            	        			    	do 
            	        			    	{
            	        			    	    int alt35 = 2;
            	        			    	    alt35 = dfa35.Predict(input);
            	        			    	    switch (alt35) 
            	        			    		{
            	        			    			case 1 :
            	        			    			    // AS3.g:0:0: LineTerminator
            	        			    			    {
            	        			    			    	LineTerminator73=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_argumentList3924); if (state.failed) return retval;
            	        			    			    	if ( state.backtracking == 0 )
            	        			    			    	{LineTerminator73_tree = (CommonTree)adaptor.Create(LineTerminator73);
            	        			    			    		adaptor.AddChild(root_0, LineTerminator73_tree);
            	        			    			    	}

            	        			    			    }
            	        			    			    break;

            	        			    			default:
            	        			    			    goto loop35;
            	        			    	    }
            	        			    	} while (true);

            	        			    	loop35:
            	        			    		;	// Stops C# compiler whining that label 'loop35' has no statements

            	        			    	PushFollow(FOLLOW_assignmentExpression_in_argumentList3927);
            	        			    	assignmentExpression74 = assignmentExpression();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression74.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop36;
            	        	    }
            	        	} while (true);

            	        	loop36:
            	        		;	// Stops C# compiler whining that label 'loop36' has no statements


            	        }
            	        break;

            	}

            	// AS3.g:801:108: ( LineTerminator )*
            	do 
            	{
            	    int alt38 = 2;
            	    int LA38_0 = input.LA(1);

            	    if ( (LA38_0 == LineTerminator) )
            	    {
            	        alt38 = 1;
            	    }


            	    switch (alt38) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator75=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_argumentList3933); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator75_tree = (CommonTree)adaptor.Create(LineTerminator75);
            			    		adaptor.AddChild(root_0, LineTerminator75_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop38;
            	    }
            	} while (true);

            	loop38:
            		;	// Stops C# compiler whining that label 'loop38' has no statements

            	char_literal76=(IToken)Match(input,37,FOLLOW_37_in_argumentList3936); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal76_tree = (CommonTree)adaptor.Create(char_literal76);
            		adaptor.AddChild(root_0, char_literal76_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 15, argumentList_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "argumentList"

    public class leftHandSideExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "leftHandSideExpression"
    // AS3.g:804:1: leftHandSideExpression : ( callExpression | newExpression );
    public AS3Parser.leftHandSideExpression_return leftHandSideExpression() // throws RecognitionException [1]
    {   
        AS3Parser.leftHandSideExpression_return retval = new AS3Parser.leftHandSideExpression_return();
        retval.Start = input.LT(1);
        int leftHandSideExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        AS3Parser.callExpression_return callExpression77 = default(AS3Parser.callExpression_return);

        AS3Parser.newExpression_return newExpression78 = default(AS3Parser.newExpression_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 16) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:805:2: ( callExpression | newExpression )
            int alt39 = 2;
            alt39 = dfa39.Predict(input);
            switch (alt39) 
            {
                case 1 :
                    // AS3.g:805:4: callExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_callExpression_in_leftHandSideExpression3948);
                    	callExpression77 = callExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, callExpression77.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:806:4: newExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_newExpression_in_leftHandSideExpression3953);
                    	newExpression78 = newExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, newExpression78.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 16, leftHandSideExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "leftHandSideExpression"

    public class postfixExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "postfixExpression"
    // AS3.g:809:1: postfixExpression : leftHandSideExpression ( '++' | '--' )? ;
    public AS3Parser.postfixExpression_return postfixExpression() // throws RecognitionException [1]
    {   
        AS3Parser.postfixExpression_return retval = new AS3Parser.postfixExpression_return();
        retval.Start = input.LT(1);
        int postfixExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken set80 = null;
        AS3Parser.leftHandSideExpression_return leftHandSideExpression79 = default(AS3Parser.leftHandSideExpression_return);


        CommonTree set80_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 17) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:810:2: ( leftHandSideExpression ( '++' | '--' )? )
            // AS3.g:810:4: leftHandSideExpression ( '++' | '--' )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_leftHandSideExpression_in_postfixExpression3964);
            	leftHandSideExpression79 = leftHandSideExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, leftHandSideExpression79.Tree);
            	// AS3.g:810:27: ( '++' | '--' )?
            	int alt40 = 2;
            	alt40 = dfa40.Predict(input);
            	switch (alt40) 
            	{
            	    case 1 :
            	        // AS3.g:
            	        {
            	        	set80 = (IToken)input.LT(1);
            	        	if ( (input.LA(1) >= 46 && input.LA(1) <= 47) ) 
            	        	{
            	        	    input.Consume();
            	        	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set80));
            	        	    state.errorRecovery = false;state.failed = false;
            	        	}
            	        	else 
            	        	{
            	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	        	    throw mse;
            	        	}


            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 17, postfixExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "postfixExpression"

    public class unaryExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "unaryExpression"
    // AS3.g:813:1: unaryExpression : ( postfixExpression | ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression );
    public AS3Parser.unaryExpression_return unaryExpression() // throws RecognitionException [1]
    {   
        AS3Parser.unaryExpression_return retval = new AS3Parser.unaryExpression_return();
        retval.Start = input.LT(1);
        int unaryExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken set82 = null;
        AS3Parser.postfixExpression_return postfixExpression81 = default(AS3Parser.postfixExpression_return);

        AS3Parser.unaryExpression_return unaryExpression83 = default(AS3Parser.unaryExpression_return);


        CommonTree set82_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 18) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:814:2: ( postfixExpression | ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression )
            int alt41 = 2;
            alt41 = dfa41.Predict(input);
            switch (alt41) 
            {
                case 1 :
                    // AS3.g:814:4: postfixExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_postfixExpression_in_unaryExpression3984);
                    	postfixExpression81 = postfixExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, postfixExpression81.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:815:4: ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	set82 = (IToken)input.LT(1);
                    	if ( (input.LA(1) >= 46 && input.LA(1) <= 54) ) 
                    	{
                    	    input.Consume();
                    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set82));
                    	    state.errorRecovery = false;state.failed = false;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    MismatchedSetException mse = new MismatchedSetException(null,input);
                    	    throw mse;
                    	}

                    	PushFollow(FOLLOW_unaryExpression_in_unaryExpression4025);
                    	unaryExpression83 = unaryExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unaryExpression83.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 18, unaryExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public class multiplicativeExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "multiplicativeExpression"
    // AS3.g:818:1: multiplicativeExpression : unaryExpression ( ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression )* ;
    public AS3Parser.multiplicativeExpression_return multiplicativeExpression() // throws RecognitionException [1]
    {   
        AS3Parser.multiplicativeExpression_return retval = new AS3Parser.multiplicativeExpression_return();
        retval.Start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator85 = null;
        IToken set86 = null;
        IToken LineTerminator87 = null;
        AS3Parser.unaryExpression_return unaryExpression84 = default(AS3Parser.unaryExpression_return);

        AS3Parser.unaryExpression_return unaryExpression88 = default(AS3Parser.unaryExpression_return);


        CommonTree LineTerminator85_tree=null;
        CommonTree set86_tree=null;
        CommonTree LineTerminator87_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 19) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:819:2: ( unaryExpression ( ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression )* )
            // AS3.g:819:4: unaryExpression ( ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression4036);
            	unaryExpression84 = unaryExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unaryExpression84.Tree);
            	// AS3.g:819:20: ( ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression )*
            	do 
            	{
            	    int alt44 = 2;
            	    alt44 = dfa44.Predict(input);
            	    switch (alt44) 
            		{
            			case 1 :
            			    // AS3.g:819:21: ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression
            			    {
            			    	// AS3.g:819:21: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt42 = 2;
            			    	    int LA42_0 = input.LA(1);

            			    	    if ( (LA42_0 == LineTerminator) )
            			    	    {
            			    	        alt42 = 1;
            			    	    }


            			    	    switch (alt42) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator85=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_multiplicativeExpression4039); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator85_tree = (CommonTree)adaptor.Create(LineTerminator85);
            			    			    		adaptor.AddChild(root_0, LineTerminator85_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop42;
            			    	    }
            			    	} while (true);

            			    	loop42:
            			    		;	// Stops C# compiler whining that label 'loop42' has no statements

            			    	set86 = (IToken)input.LT(1);
            			    	if ( (input.LA(1) >= 55 && input.LA(1) <= 57) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set86));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	// AS3.g:819:55: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt43 = 2;
            			    	    alt43 = dfa43.Predict(input);
            			    	    switch (alt43) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator87=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_multiplicativeExpression4054); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator87_tree = (CommonTree)adaptor.Create(LineTerminator87);
            			    			    		adaptor.AddChild(root_0, LineTerminator87_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop43;
            			    	    }
            			    	} while (true);

            			    	loop43:
            			    		;	// Stops C# compiler whining that label 'loop43' has no statements

            			    	PushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression4057);
            			    	unaryExpression88 = unaryExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unaryExpression88.Tree);

            			    }
            			    break;

            			default:
            			    goto loop44;
            	    }
            	} while (true);

            	loop44:
            		;	// Stops C# compiler whining that label 'loop44' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 19, multiplicativeExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public class additiveExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "additiveExpression"
    // AS3.g:822:1: additiveExpression : multiplicativeExpression ( ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression )* ;
    public AS3Parser.additiveExpression_return additiveExpression() // throws RecognitionException [1]
    {   
        AS3Parser.additiveExpression_return retval = new AS3Parser.additiveExpression_return();
        retval.Start = input.LT(1);
        int additiveExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator90 = null;
        IToken set91 = null;
        IToken LineTerminator92 = null;
        AS3Parser.multiplicativeExpression_return multiplicativeExpression89 = default(AS3Parser.multiplicativeExpression_return);

        AS3Parser.multiplicativeExpression_return multiplicativeExpression93 = default(AS3Parser.multiplicativeExpression_return);


        CommonTree LineTerminator90_tree=null;
        CommonTree set91_tree=null;
        CommonTree LineTerminator92_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 20) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:823:2: ( multiplicativeExpression ( ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression )* )
            // AS3.g:823:4: multiplicativeExpression ( ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression4070);
            	multiplicativeExpression89 = multiplicativeExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, multiplicativeExpression89.Tree);
            	// AS3.g:823:29: ( ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression )*
            	do 
            	{
            	    int alt47 = 2;
            	    alt47 = dfa47.Predict(input);
            	    switch (alt47) 
            		{
            			case 1 :
            			    // AS3.g:823:30: ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression
            			    {
            			    	// AS3.g:823:30: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt45 = 2;
            			    	    int LA45_0 = input.LA(1);

            			    	    if ( (LA45_0 == LineTerminator) )
            			    	    {
            			    	        alt45 = 1;
            			    	    }


            			    	    switch (alt45) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator90=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_additiveExpression4073); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator90_tree = (CommonTree)adaptor.Create(LineTerminator90);
            			    			    		adaptor.AddChild(root_0, LineTerminator90_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop45;
            			    	    }
            			    	} while (true);

            			    	loop45:
            			    		;	// Stops C# compiler whining that label 'loop45' has no statements

            			    	set91 = (IToken)input.LT(1);
            			    	if ( (input.LA(1) >= 51 && input.LA(1) <= 52) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set91));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	// AS3.g:823:58: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt46 = 2;
            			    	    alt46 = dfa46.Predict(input);
            			    	    switch (alt46) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator92=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_additiveExpression4084); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator92_tree = (CommonTree)adaptor.Create(LineTerminator92);
            			    			    		adaptor.AddChild(root_0, LineTerminator92_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop46;
            			    	    }
            			    	} while (true);

            			    	loop46:
            			    		;	// Stops C# compiler whining that label 'loop46' has no statements

            			    	PushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression4087);
            			    	multiplicativeExpression93 = multiplicativeExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, multiplicativeExpression93.Tree);

            			    }
            			    break;

            			default:
            			    goto loop47;
            	    }
            	} while (true);

            	loop47:
            		;	// Stops C# compiler whining that label 'loop47' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 20, additiveExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public class shiftExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "shiftExpression"
    // AS3.g:826:1: shiftExpression : additiveExpression ( ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression )* ;
    public AS3Parser.shiftExpression_return shiftExpression() // throws RecognitionException [1]
    {   
        AS3Parser.shiftExpression_return retval = new AS3Parser.shiftExpression_return();
        retval.Start = input.LT(1);
        int shiftExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator95 = null;
        IToken set96 = null;
        IToken LineTerminator97 = null;
        AS3Parser.additiveExpression_return additiveExpression94 = default(AS3Parser.additiveExpression_return);

        AS3Parser.additiveExpression_return additiveExpression98 = default(AS3Parser.additiveExpression_return);


        CommonTree LineTerminator95_tree=null;
        CommonTree set96_tree=null;
        CommonTree LineTerminator97_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 21) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:827:2: ( additiveExpression ( ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression )* )
            // AS3.g:827:4: additiveExpression ( ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_additiveExpression_in_shiftExpression4100);
            	additiveExpression94 = additiveExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, additiveExpression94.Tree);
            	// AS3.g:827:23: ( ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression )*
            	do 
            	{
            	    int alt50 = 2;
            	    alt50 = dfa50.Predict(input);
            	    switch (alt50) 
            		{
            			case 1 :
            			    // AS3.g:827:24: ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression
            			    {
            			    	// AS3.g:827:24: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt48 = 2;
            			    	    int LA48_0 = input.LA(1);

            			    	    if ( (LA48_0 == LineTerminator) )
            			    	    {
            			    	        alt48 = 1;
            			    	    }


            			    	    switch (alt48) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator95=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_shiftExpression4103); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator95_tree = (CommonTree)adaptor.Create(LineTerminator95);
            			    			    		adaptor.AddChild(root_0, LineTerminator95_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop48;
            			    	    }
            			    	} while (true);

            			    	loop48:
            			    		;	// Stops C# compiler whining that label 'loop48' has no statements

            			    	set96 = (IToken)input.LT(1);
            			    	if ( (input.LA(1) >= 58 && input.LA(1) <= 60) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set96));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	// AS3.g:827:62: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt49 = 2;
            			    	    alt49 = dfa49.Predict(input);
            			    	    switch (alt49) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator97=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_shiftExpression4118); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator97_tree = (CommonTree)adaptor.Create(LineTerminator97);
            			    			    		adaptor.AddChild(root_0, LineTerminator97_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop49;
            			    	    }
            			    	} while (true);

            			    	loop49:
            			    		;	// Stops C# compiler whining that label 'loop49' has no statements

            			    	PushFollow(FOLLOW_additiveExpression_in_shiftExpression4121);
            			    	additiveExpression98 = additiveExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, additiveExpression98.Tree);

            			    }
            			    break;

            			default:
            			    goto loop50;
            	    }
            	} while (true);

            	loop50:
            		;	// Stops C# compiler whining that label 'loop50' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 21, shiftExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public class relationalExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "relationalExpression"
    // AS3.g:830:1: relationalExpression : shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LineTerminator )* shiftExpression )* ;
    public AS3Parser.relationalExpression_return relationalExpression() // throws RecognitionException [1]
    {   
        AS3Parser.relationalExpression_return retval = new AS3Parser.relationalExpression_return();
        retval.Start = input.LT(1);
        int relationalExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator100 = null;
        IToken set101 = null;
        IToken LineTerminator102 = null;
        AS3Parser.shiftExpression_return shiftExpression99 = default(AS3Parser.shiftExpression_return);

        AS3Parser.shiftExpression_return shiftExpression103 = default(AS3Parser.shiftExpression_return);


        CommonTree LineTerminator100_tree=null;
        CommonTree set101_tree=null;
        CommonTree LineTerminator102_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 22) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:831:2: ( shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LineTerminator )* shiftExpression )* )
            // AS3.g:831:4: shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LineTerminator )* shiftExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_shiftExpression_in_relationalExpression4134);
            	shiftExpression99 = shiftExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, shiftExpression99.Tree);
            	// AS3.g:831:20: ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LineTerminator )* shiftExpression )*
            	do 
            	{
            	    int alt53 = 2;
            	    alt53 = dfa53.Predict(input);
            	    switch (alt53) 
            		{
            			case 1 :
            			    // AS3.g:831:21: ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LineTerminator )* shiftExpression
            			    {
            			    	// AS3.g:831:21: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt51 = 2;
            			    	    int LA51_0 = input.LA(1);

            			    	    if ( (LA51_0 == LineTerminator) )
            			    	    {
            			    	        alt51 = 1;
            			    	    }


            			    	    switch (alt51) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator100=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_relationalExpression4137); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator100_tree = (CommonTree)adaptor.Create(LineTerminator100);
            			    			    		adaptor.AddChild(root_0, LineTerminator100_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop51;
            			    	    }
            			    	} while (true);

            			    	loop51:
            			    		;	// Stops C# compiler whining that label 'loop51' has no statements

            			    	set101 = (IToken)input.LT(1);
            			    	if ( (input.LA(1) >= 61 && input.LA(1) <= 66) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set101));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	// AS3.g:831:85: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt52 = 2;
            			    	    alt52 = dfa52.Predict(input);
            			    	    switch (alt52) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator102=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_relationalExpression4164); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator102_tree = (CommonTree)adaptor.Create(LineTerminator102);
            			    			    		adaptor.AddChild(root_0, LineTerminator102_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop52;
            			    	    }
            			    	} while (true);

            			    	loop52:
            			    		;	// Stops C# compiler whining that label 'loop52' has no statements

            			    	PushFollow(FOLLOW_shiftExpression_in_relationalExpression4167);
            			    	shiftExpression103 = shiftExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, shiftExpression103.Tree);

            			    }
            			    break;

            			default:
            			    goto loop53;
            	    }
            	} while (true);

            	loop53:
            		;	// Stops C# compiler whining that label 'loop53' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 22, relationalExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public class relationalExpressionNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "relationalExpressionNoIn"
    // AS3.g:834:1: relationalExpressionNoIn : shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LineTerminator )* shiftExpression )* ;
    public AS3Parser.relationalExpressionNoIn_return relationalExpressionNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.relationalExpressionNoIn_return retval = new AS3Parser.relationalExpressionNoIn_return();
        retval.Start = input.LT(1);
        int relationalExpressionNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator105 = null;
        IToken set106 = null;
        IToken LineTerminator107 = null;
        AS3Parser.shiftExpression_return shiftExpression104 = default(AS3Parser.shiftExpression_return);

        AS3Parser.shiftExpression_return shiftExpression108 = default(AS3Parser.shiftExpression_return);


        CommonTree LineTerminator105_tree=null;
        CommonTree set106_tree=null;
        CommonTree LineTerminator107_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 23) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:835:2: ( shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LineTerminator )* shiftExpression )* )
            // AS3.g:835:4: shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LineTerminator )* shiftExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_shiftExpression_in_relationalExpressionNoIn4181);
            	shiftExpression104 = shiftExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, shiftExpression104.Tree);
            	// AS3.g:835:20: ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LineTerminator )* shiftExpression )*
            	do 
            	{
            	    int alt56 = 2;
            	    alt56 = dfa56.Predict(input);
            	    switch (alt56) 
            		{
            			case 1 :
            			    // AS3.g:835:21: ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LineTerminator )* shiftExpression
            			    {
            			    	// AS3.g:835:21: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt54 = 2;
            			    	    int LA54_0 = input.LA(1);

            			    	    if ( (LA54_0 == LineTerminator) )
            			    	    {
            			    	        alt54 = 1;
            			    	    }


            			    	    switch (alt54) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator105=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_relationalExpressionNoIn4184); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator105_tree = (CommonTree)adaptor.Create(LineTerminator105);
            			    			    		adaptor.AddChild(root_0, LineTerminator105_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop54;
            			    	    }
            			    	} while (true);

            			    	loop54:
            			    		;	// Stops C# compiler whining that label 'loop54' has no statements

            			    	set106 = (IToken)input.LT(1);
            			    	if ( (input.LA(1) >= 61 && input.LA(1) <= 65) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set106));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	// AS3.g:835:79: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt55 = 2;
            			    	    alt55 = dfa55.Predict(input);
            			    	    switch (alt55) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator107=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_relationalExpressionNoIn4208); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator107_tree = (CommonTree)adaptor.Create(LineTerminator107);
            			    			    		adaptor.AddChild(root_0, LineTerminator107_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop55;
            			    	    }
            			    	} while (true);

            			    	loop55:
            			    		;	// Stops C# compiler whining that label 'loop55' has no statements

            			    	PushFollow(FOLLOW_shiftExpression_in_relationalExpressionNoIn4211);
            			    	shiftExpression108 = shiftExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, shiftExpression108.Tree);

            			    }
            			    break;

            			default:
            			    goto loop56;
            	    }
            	} while (true);

            	loop56:
            		;	// Stops C# compiler whining that label 'loop56' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 23, relationalExpressionNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "relationalExpressionNoIn"

    public class equalityExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "equalityExpression"
    // AS3.g:838:1: equalityExpression : relationalExpression ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression )* ;
    public AS3Parser.equalityExpression_return equalityExpression() // throws RecognitionException [1]
    {   
        AS3Parser.equalityExpression_return retval = new AS3Parser.equalityExpression_return();
        retval.Start = input.LT(1);
        int equalityExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator110 = null;
        IToken set111 = null;
        IToken LineTerminator112 = null;
        AS3Parser.relationalExpression_return relationalExpression109 = default(AS3Parser.relationalExpression_return);

        AS3Parser.relationalExpression_return relationalExpression113 = default(AS3Parser.relationalExpression_return);


        CommonTree LineTerminator110_tree=null;
        CommonTree set111_tree=null;
        CommonTree LineTerminator112_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 24) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:839:2: ( relationalExpression ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression )* )
            // AS3.g:839:4: relationalExpression ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_relationalExpression_in_equalityExpression4225);
            	relationalExpression109 = relationalExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, relationalExpression109.Tree);
            	// AS3.g:839:25: ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression )*
            	do 
            	{
            	    int alt59 = 2;
            	    alt59 = dfa59.Predict(input);
            	    switch (alt59) 
            		{
            			case 1 :
            			    // AS3.g:839:26: ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression
            			    {
            			    	// AS3.g:839:26: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt57 = 2;
            			    	    int LA57_0 = input.LA(1);

            			    	    if ( (LA57_0 == LineTerminator) )
            			    	    {
            			    	        alt57 = 1;
            			    	    }


            			    	    switch (alt57) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator110=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_equalityExpression4228); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator110_tree = (CommonTree)adaptor.Create(LineTerminator110);
            			    			    		adaptor.AddChild(root_0, LineTerminator110_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop57;
            			    	    }
            			    	} while (true);

            			    	loop57:
            			    		;	// Stops C# compiler whining that label 'loop57' has no statements

            			    	set111 = (IToken)input.LT(1);
            			    	if ( (input.LA(1) >= 67 && input.LA(1) <= 70) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set111));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	// AS3.g:839:72: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt58 = 2;
            			    	    alt58 = dfa58.Predict(input);
            			    	    switch (alt58) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator112=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_equalityExpression4247); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator112_tree = (CommonTree)adaptor.Create(LineTerminator112);
            			    			    		adaptor.AddChild(root_0, LineTerminator112_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop58;
            			    	    }
            			    	} while (true);

            			    	loop58:
            			    		;	// Stops C# compiler whining that label 'loop58' has no statements

            			    	PushFollow(FOLLOW_relationalExpression_in_equalityExpression4250);
            			    	relationalExpression113 = relationalExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, relationalExpression113.Tree);

            			    }
            			    break;

            			default:
            			    goto loop59;
            	    }
            	} while (true);

            	loop59:
            		;	// Stops C# compiler whining that label 'loop59' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 24, equalityExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public class equalityExpressionNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "equalityExpressionNoIn"
    // AS3.g:842:1: equalityExpressionNoIn : relationalExpressionNoIn ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn )* ;
    public AS3Parser.equalityExpressionNoIn_return equalityExpressionNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.equalityExpressionNoIn_return retval = new AS3Parser.equalityExpressionNoIn_return();
        retval.Start = input.LT(1);
        int equalityExpressionNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator115 = null;
        IToken set116 = null;
        IToken LineTerminator117 = null;
        AS3Parser.relationalExpressionNoIn_return relationalExpressionNoIn114 = default(AS3Parser.relationalExpressionNoIn_return);

        AS3Parser.relationalExpressionNoIn_return relationalExpressionNoIn118 = default(AS3Parser.relationalExpressionNoIn_return);


        CommonTree LineTerminator115_tree=null;
        CommonTree set116_tree=null;
        CommonTree LineTerminator117_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 25) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:843:2: ( relationalExpressionNoIn ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn )* )
            // AS3.g:843:4: relationalExpressionNoIn ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4263);
            	relationalExpressionNoIn114 = relationalExpressionNoIn();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, relationalExpressionNoIn114.Tree);
            	// AS3.g:843:29: ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn )*
            	do 
            	{
            	    int alt62 = 2;
            	    alt62 = dfa62.Predict(input);
            	    switch (alt62) 
            		{
            			case 1 :
            			    // AS3.g:843:30: ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn
            			    {
            			    	// AS3.g:843:30: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt60 = 2;
            			    	    int LA60_0 = input.LA(1);

            			    	    if ( (LA60_0 == LineTerminator) )
            			    	    {
            			    	        alt60 = 1;
            			    	    }


            			    	    switch (alt60) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator115=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_equalityExpressionNoIn4266); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator115_tree = (CommonTree)adaptor.Create(LineTerminator115);
            			    			    		adaptor.AddChild(root_0, LineTerminator115_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop60;
            			    	    }
            			    	} while (true);

            			    	loop60:
            			    		;	// Stops C# compiler whining that label 'loop60' has no statements

            			    	set116 = (IToken)input.LT(1);
            			    	if ( (input.LA(1) >= 67 && input.LA(1) <= 70) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set116));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	// AS3.g:843:76: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt61 = 2;
            			    	    alt61 = dfa61.Predict(input);
            			    	    switch (alt61) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator117=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_equalityExpressionNoIn4285); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator117_tree = (CommonTree)adaptor.Create(LineTerminator117);
            			    			    		adaptor.AddChild(root_0, LineTerminator117_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop61;
            			    	    }
            			    	} while (true);

            			    	loop61:
            			    		;	// Stops C# compiler whining that label 'loop61' has no statements

            			    	PushFollow(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4288);
            			    	relationalExpressionNoIn118 = relationalExpressionNoIn();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, relationalExpressionNoIn118.Tree);

            			    }
            			    break;

            			default:
            			    goto loop62;
            	    }
            	} while (true);

            	loop62:
            		;	// Stops C# compiler whining that label 'loop62' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 25, equalityExpressionNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "equalityExpressionNoIn"

    public class bitwiseANDExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "bitwiseANDExpression"
    // AS3.g:846:1: bitwiseANDExpression : equalityExpression ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpression )* ;
    public AS3Parser.bitwiseANDExpression_return bitwiseANDExpression() // throws RecognitionException [1]
    {   
        AS3Parser.bitwiseANDExpression_return retval = new AS3Parser.bitwiseANDExpression_return();
        retval.Start = input.LT(1);
        int bitwiseANDExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator120 = null;
        IToken char_literal121 = null;
        IToken LineTerminator122 = null;
        AS3Parser.equalityExpression_return equalityExpression119 = default(AS3Parser.equalityExpression_return);

        AS3Parser.equalityExpression_return equalityExpression123 = default(AS3Parser.equalityExpression_return);


        CommonTree LineTerminator120_tree=null;
        CommonTree char_literal121_tree=null;
        CommonTree LineTerminator122_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 26) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:847:2: ( equalityExpression ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpression )* )
            // AS3.g:847:4: equalityExpression ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_equalityExpression_in_bitwiseANDExpression4301);
            	equalityExpression119 = equalityExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, equalityExpression119.Tree);
            	// AS3.g:847:23: ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpression )*
            	do 
            	{
            	    int alt65 = 2;
            	    alt65 = dfa65.Predict(input);
            	    switch (alt65) 
            		{
            			case 1 :
            			    // AS3.g:847:24: ( LineTerminator )* '&' ( LineTerminator )* equalityExpression
            			    {
            			    	// AS3.g:847:24: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt63 = 2;
            			    	    int LA63_0 = input.LA(1);

            			    	    if ( (LA63_0 == LineTerminator) )
            			    	    {
            			    	        alt63 = 1;
            			    	    }


            			    	    switch (alt63) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator120=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseANDExpression4304); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator120_tree = (CommonTree)adaptor.Create(LineTerminator120);
            			    			    		adaptor.AddChild(root_0, LineTerminator120_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop63;
            			    	    }
            			    	} while (true);

            			    	loop63:
            			    		;	// Stops C# compiler whining that label 'loop63' has no statements

            			    	char_literal121=(IToken)Match(input,71,FOLLOW_71_in_bitwiseANDExpression4307); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal121_tree = (CommonTree)adaptor.Create(char_literal121);
            			    		adaptor.AddChild(root_0, char_literal121_tree);
            			    	}
            			    	// AS3.g:847:44: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt64 = 2;
            			    	    alt64 = dfa64.Predict(input);
            			    	    switch (alt64) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator122=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseANDExpression4309); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator122_tree = (CommonTree)adaptor.Create(LineTerminator122);
            			    			    		adaptor.AddChild(root_0, LineTerminator122_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop64;
            			    	    }
            			    	} while (true);

            			    	loop64:
            			    		;	// Stops C# compiler whining that label 'loop64' has no statements

            			    	PushFollow(FOLLOW_equalityExpression_in_bitwiseANDExpression4312);
            			    	equalityExpression123 = equalityExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, equalityExpression123.Tree);

            			    }
            			    break;

            			default:
            			    goto loop65;
            	    }
            	} while (true);

            	loop65:
            		;	// Stops C# compiler whining that label 'loop65' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 26, bitwiseANDExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "bitwiseANDExpression"

    public class bitwiseANDExpressionNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "bitwiseANDExpressionNoIn"
    // AS3.g:850:1: bitwiseANDExpressionNoIn : equalityExpressionNoIn ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn )* ;
    public AS3Parser.bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.bitwiseANDExpressionNoIn_return retval = new AS3Parser.bitwiseANDExpressionNoIn_return();
        retval.Start = input.LT(1);
        int bitwiseANDExpressionNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator125 = null;
        IToken char_literal126 = null;
        IToken LineTerminator127 = null;
        AS3Parser.equalityExpressionNoIn_return equalityExpressionNoIn124 = default(AS3Parser.equalityExpressionNoIn_return);

        AS3Parser.equalityExpressionNoIn_return equalityExpressionNoIn128 = default(AS3Parser.equalityExpressionNoIn_return);


        CommonTree LineTerminator125_tree=null;
        CommonTree char_literal126_tree=null;
        CommonTree LineTerminator127_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 27) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:851:2: ( equalityExpressionNoIn ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn )* )
            // AS3.g:851:4: equalityExpressionNoIn ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4326);
            	equalityExpressionNoIn124 = equalityExpressionNoIn();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, equalityExpressionNoIn124.Tree);
            	// AS3.g:851:27: ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn )*
            	do 
            	{
            	    int alt68 = 2;
            	    alt68 = dfa68.Predict(input);
            	    switch (alt68) 
            		{
            			case 1 :
            			    // AS3.g:851:28: ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn
            			    {
            			    	// AS3.g:851:28: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt66 = 2;
            			    	    int LA66_0 = input.LA(1);

            			    	    if ( (LA66_0 == LineTerminator) )
            			    	    {
            			    	        alt66 = 1;
            			    	    }


            			    	    switch (alt66) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator125=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseANDExpressionNoIn4329); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator125_tree = (CommonTree)adaptor.Create(LineTerminator125);
            			    			    		adaptor.AddChild(root_0, LineTerminator125_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop66;
            			    	    }
            			    	} while (true);

            			    	loop66:
            			    		;	// Stops C# compiler whining that label 'loop66' has no statements

            			    	char_literal126=(IToken)Match(input,71,FOLLOW_71_in_bitwiseANDExpressionNoIn4332); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal126_tree = (CommonTree)adaptor.Create(char_literal126);
            			    		adaptor.AddChild(root_0, char_literal126_tree);
            			    	}
            			    	// AS3.g:851:48: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt67 = 2;
            			    	    alt67 = dfa67.Predict(input);
            			    	    switch (alt67) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator127=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseANDExpressionNoIn4334); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator127_tree = (CommonTree)adaptor.Create(LineTerminator127);
            			    			    		adaptor.AddChild(root_0, LineTerminator127_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop67;
            			    	    }
            			    	} while (true);

            			    	loop67:
            			    		;	// Stops C# compiler whining that label 'loop67' has no statements

            			    	PushFollow(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4337);
            			    	equalityExpressionNoIn128 = equalityExpressionNoIn();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, equalityExpressionNoIn128.Tree);

            			    }
            			    break;

            			default:
            			    goto loop68;
            	    }
            	} while (true);

            	loop68:
            		;	// Stops C# compiler whining that label 'loop68' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 27, bitwiseANDExpressionNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "bitwiseANDExpressionNoIn"

    public class bitwiseXORExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "bitwiseXORExpression"
    // AS3.g:854:1: bitwiseXORExpression : bitwiseANDExpression ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression )* ;
    public AS3Parser.bitwiseXORExpression_return bitwiseXORExpression() // throws RecognitionException [1]
    {   
        AS3Parser.bitwiseXORExpression_return retval = new AS3Parser.bitwiseXORExpression_return();
        retval.Start = input.LT(1);
        int bitwiseXORExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator130 = null;
        IToken char_literal131 = null;
        IToken LineTerminator132 = null;
        AS3Parser.bitwiseANDExpression_return bitwiseANDExpression129 = default(AS3Parser.bitwiseANDExpression_return);

        AS3Parser.bitwiseANDExpression_return bitwiseANDExpression133 = default(AS3Parser.bitwiseANDExpression_return);


        CommonTree LineTerminator130_tree=null;
        CommonTree char_literal131_tree=null;
        CommonTree LineTerminator132_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 28) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:855:2: ( bitwiseANDExpression ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression )* )
            // AS3.g:855:4: bitwiseANDExpression ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4350);
            	bitwiseANDExpression129 = bitwiseANDExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseANDExpression129.Tree);
            	// AS3.g:855:25: ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression )*
            	do 
            	{
            	    int alt71 = 2;
            	    alt71 = dfa71.Predict(input);
            	    switch (alt71) 
            		{
            			case 1 :
            			    // AS3.g:855:26: ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression
            			    {
            			    	// AS3.g:855:26: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt69 = 2;
            			    	    int LA69_0 = input.LA(1);

            			    	    if ( (LA69_0 == LineTerminator) )
            			    	    {
            			    	        alt69 = 1;
            			    	    }


            			    	    switch (alt69) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator130=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseXORExpression4353); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator130_tree = (CommonTree)adaptor.Create(LineTerminator130);
            			    			    		adaptor.AddChild(root_0, LineTerminator130_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop69;
            			    	    }
            			    	} while (true);

            			    	loop69:
            			    		;	// Stops C# compiler whining that label 'loop69' has no statements

            			    	char_literal131=(IToken)Match(input,72,FOLLOW_72_in_bitwiseXORExpression4356); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal131_tree = (CommonTree)adaptor.Create(char_literal131);
            			    		adaptor.AddChild(root_0, char_literal131_tree);
            			    	}
            			    	// AS3.g:855:46: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt70 = 2;
            			    	    alt70 = dfa70.Predict(input);
            			    	    switch (alt70) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator132=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseXORExpression4358); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator132_tree = (CommonTree)adaptor.Create(LineTerminator132);
            			    			    		adaptor.AddChild(root_0, LineTerminator132_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop70;
            			    	    }
            			    	} while (true);

            			    	loop70:
            			    		;	// Stops C# compiler whining that label 'loop70' has no statements

            			    	PushFollow(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4361);
            			    	bitwiseANDExpression133 = bitwiseANDExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseANDExpression133.Tree);

            			    }
            			    break;

            			default:
            			    goto loop71;
            	    }
            	} while (true);

            	loop71:
            		;	// Stops C# compiler whining that label 'loop71' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 28, bitwiseXORExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "bitwiseXORExpression"

    public class bitwiseXORExpressionNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "bitwiseXORExpressionNoIn"
    // AS3.g:858:1: bitwiseXORExpressionNoIn : bitwiseANDExpressionNoIn ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn )* ;
    public AS3Parser.bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.bitwiseXORExpressionNoIn_return retval = new AS3Parser.bitwiseXORExpressionNoIn_return();
        retval.Start = input.LT(1);
        int bitwiseXORExpressionNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator135 = null;
        IToken char_literal136 = null;
        IToken LineTerminator137 = null;
        AS3Parser.bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn134 = default(AS3Parser.bitwiseANDExpressionNoIn_return);

        AS3Parser.bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn138 = default(AS3Parser.bitwiseANDExpressionNoIn_return);


        CommonTree LineTerminator135_tree=null;
        CommonTree char_literal136_tree=null;
        CommonTree LineTerminator137_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 29) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:859:2: ( bitwiseANDExpressionNoIn ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn )* )
            // AS3.g:859:4: bitwiseANDExpressionNoIn ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4375);
            	bitwiseANDExpressionNoIn134 = bitwiseANDExpressionNoIn();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseANDExpressionNoIn134.Tree);
            	// AS3.g:859:29: ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn )*
            	do 
            	{
            	    int alt74 = 2;
            	    alt74 = dfa74.Predict(input);
            	    switch (alt74) 
            		{
            			case 1 :
            			    // AS3.g:859:30: ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn
            			    {
            			    	// AS3.g:859:30: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt72 = 2;
            			    	    int LA72_0 = input.LA(1);

            			    	    if ( (LA72_0 == LineTerminator) )
            			    	    {
            			    	        alt72 = 1;
            			    	    }


            			    	    switch (alt72) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator135=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseXORExpressionNoIn4378); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator135_tree = (CommonTree)adaptor.Create(LineTerminator135);
            			    			    		adaptor.AddChild(root_0, LineTerminator135_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop72;
            			    	    }
            			    	} while (true);

            			    	loop72:
            			    		;	// Stops C# compiler whining that label 'loop72' has no statements

            			    	char_literal136=(IToken)Match(input,72,FOLLOW_72_in_bitwiseXORExpressionNoIn4381); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal136_tree = (CommonTree)adaptor.Create(char_literal136);
            			    		adaptor.AddChild(root_0, char_literal136_tree);
            			    	}
            			    	// AS3.g:859:50: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt73 = 2;
            			    	    alt73 = dfa73.Predict(input);
            			    	    switch (alt73) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator137=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseXORExpressionNoIn4383); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator137_tree = (CommonTree)adaptor.Create(LineTerminator137);
            			    			    		adaptor.AddChild(root_0, LineTerminator137_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop73;
            			    	    }
            			    	} while (true);

            			    	loop73:
            			    		;	// Stops C# compiler whining that label 'loop73' has no statements

            			    	PushFollow(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4386);
            			    	bitwiseANDExpressionNoIn138 = bitwiseANDExpressionNoIn();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseANDExpressionNoIn138.Tree);

            			    }
            			    break;

            			default:
            			    goto loop74;
            	    }
            	} while (true);

            	loop74:
            		;	// Stops C# compiler whining that label 'loop74' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 29, bitwiseXORExpressionNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "bitwiseXORExpressionNoIn"

    public class bitwiseORExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "bitwiseORExpression"
    // AS3.g:862:1: bitwiseORExpression : bitwiseXORExpression ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression )* ;
    public AS3Parser.bitwiseORExpression_return bitwiseORExpression() // throws RecognitionException [1]
    {   
        AS3Parser.bitwiseORExpression_return retval = new AS3Parser.bitwiseORExpression_return();
        retval.Start = input.LT(1);
        int bitwiseORExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator140 = null;
        IToken char_literal141 = null;
        IToken LineTerminator142 = null;
        AS3Parser.bitwiseXORExpression_return bitwiseXORExpression139 = default(AS3Parser.bitwiseXORExpression_return);

        AS3Parser.bitwiseXORExpression_return bitwiseXORExpression143 = default(AS3Parser.bitwiseXORExpression_return);


        CommonTree LineTerminator140_tree=null;
        CommonTree char_literal141_tree=null;
        CommonTree LineTerminator142_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 30) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:863:2: ( bitwiseXORExpression ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression )* )
            // AS3.g:863:4: bitwiseXORExpression ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4400);
            	bitwiseXORExpression139 = bitwiseXORExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseXORExpression139.Tree);
            	// AS3.g:863:25: ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression )*
            	do 
            	{
            	    int alt77 = 2;
            	    alt77 = dfa77.Predict(input);
            	    switch (alt77) 
            		{
            			case 1 :
            			    // AS3.g:863:26: ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression
            			    {
            			    	// AS3.g:863:26: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt75 = 2;
            			    	    int LA75_0 = input.LA(1);

            			    	    if ( (LA75_0 == LineTerminator) )
            			    	    {
            			    	        alt75 = 1;
            			    	    }


            			    	    switch (alt75) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator140=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseORExpression4403); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator140_tree = (CommonTree)adaptor.Create(LineTerminator140);
            			    			    		adaptor.AddChild(root_0, LineTerminator140_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop75;
            			    	    }
            			    	} while (true);

            			    	loop75:
            			    		;	// Stops C# compiler whining that label 'loop75' has no statements

            			    	char_literal141=(IToken)Match(input,73,FOLLOW_73_in_bitwiseORExpression4406); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal141_tree = (CommonTree)adaptor.Create(char_literal141);
            			    		adaptor.AddChild(root_0, char_literal141_tree);
            			    	}
            			    	// AS3.g:863:46: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt76 = 2;
            			    	    alt76 = dfa76.Predict(input);
            			    	    switch (alt76) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator142=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseORExpression4408); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator142_tree = (CommonTree)adaptor.Create(LineTerminator142);
            			    			    		adaptor.AddChild(root_0, LineTerminator142_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop76;
            			    	    }
            			    	} while (true);

            			    	loop76:
            			    		;	// Stops C# compiler whining that label 'loop76' has no statements

            			    	PushFollow(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4411);
            			    	bitwiseXORExpression143 = bitwiseXORExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseXORExpression143.Tree);

            			    }
            			    break;

            			default:
            			    goto loop77;
            	    }
            	} while (true);

            	loop77:
            		;	// Stops C# compiler whining that label 'loop77' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 30, bitwiseORExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "bitwiseORExpression"

    public class bitwiseORExpressionNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "bitwiseORExpressionNoIn"
    // AS3.g:866:1: bitwiseORExpressionNoIn : bitwiseXORExpressionNoIn ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn )* ;
    public AS3Parser.bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.bitwiseORExpressionNoIn_return retval = new AS3Parser.bitwiseORExpressionNoIn_return();
        retval.Start = input.LT(1);
        int bitwiseORExpressionNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator145 = null;
        IToken char_literal146 = null;
        IToken LineTerminator147 = null;
        AS3Parser.bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn144 = default(AS3Parser.bitwiseXORExpressionNoIn_return);

        AS3Parser.bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn148 = default(AS3Parser.bitwiseXORExpressionNoIn_return);


        CommonTree LineTerminator145_tree=null;
        CommonTree char_literal146_tree=null;
        CommonTree LineTerminator147_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 31) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:867:2: ( bitwiseXORExpressionNoIn ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn )* )
            // AS3.g:867:4: bitwiseXORExpressionNoIn ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4425);
            	bitwiseXORExpressionNoIn144 = bitwiseXORExpressionNoIn();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseXORExpressionNoIn144.Tree);
            	// AS3.g:867:29: ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn )*
            	do 
            	{
            	    int alt80 = 2;
            	    alt80 = dfa80.Predict(input);
            	    switch (alt80) 
            		{
            			case 1 :
            			    // AS3.g:867:30: ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn
            			    {
            			    	// AS3.g:867:30: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt78 = 2;
            			    	    int LA78_0 = input.LA(1);

            			    	    if ( (LA78_0 == LineTerminator) )
            			    	    {
            			    	        alt78 = 1;
            			    	    }


            			    	    switch (alt78) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator145=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseORExpressionNoIn4428); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator145_tree = (CommonTree)adaptor.Create(LineTerminator145);
            			    			    		adaptor.AddChild(root_0, LineTerminator145_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop78;
            			    	    }
            			    	} while (true);

            			    	loop78:
            			    		;	// Stops C# compiler whining that label 'loop78' has no statements

            			    	char_literal146=(IToken)Match(input,73,FOLLOW_73_in_bitwiseORExpressionNoIn4431); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal146_tree = (CommonTree)adaptor.Create(char_literal146);
            			    		adaptor.AddChild(root_0, char_literal146_tree);
            			    	}
            			    	// AS3.g:867:50: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt79 = 2;
            			    	    alt79 = dfa79.Predict(input);
            			    	    switch (alt79) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator147=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_bitwiseORExpressionNoIn4433); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator147_tree = (CommonTree)adaptor.Create(LineTerminator147);
            			    			    		adaptor.AddChild(root_0, LineTerminator147_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop79;
            			    	    }
            			    	} while (true);

            			    	loop79:
            			    		;	// Stops C# compiler whining that label 'loop79' has no statements

            			    	PushFollow(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4436);
            			    	bitwiseXORExpressionNoIn148 = bitwiseXORExpressionNoIn();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseXORExpressionNoIn148.Tree);

            			    }
            			    break;

            			default:
            			    goto loop80;
            	    }
            	} while (true);

            	loop80:
            		;	// Stops C# compiler whining that label 'loop80' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 31, bitwiseORExpressionNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "bitwiseORExpressionNoIn"

    public class logicalANDExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "logicalANDExpression"
    // AS3.g:870:1: logicalANDExpression : bitwiseORExpression ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression )* ;
    public AS3Parser.logicalANDExpression_return logicalANDExpression() // throws RecognitionException [1]
    {   
        AS3Parser.logicalANDExpression_return retval = new AS3Parser.logicalANDExpression_return();
        retval.Start = input.LT(1);
        int logicalANDExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator150 = null;
        IToken string_literal151 = null;
        IToken LineTerminator152 = null;
        AS3Parser.bitwiseORExpression_return bitwiseORExpression149 = default(AS3Parser.bitwiseORExpression_return);

        AS3Parser.bitwiseORExpression_return bitwiseORExpression153 = default(AS3Parser.bitwiseORExpression_return);


        CommonTree LineTerminator150_tree=null;
        CommonTree string_literal151_tree=null;
        CommonTree LineTerminator152_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 32) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:871:2: ( bitwiseORExpression ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression )* )
            // AS3.g:871:4: bitwiseORExpression ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_bitwiseORExpression_in_logicalANDExpression4450);
            	bitwiseORExpression149 = bitwiseORExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseORExpression149.Tree);
            	// AS3.g:871:24: ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression )*
            	do 
            	{
            	    int alt83 = 2;
            	    alt83 = dfa83.Predict(input);
            	    switch (alt83) 
            		{
            			case 1 :
            			    // AS3.g:871:25: ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression
            			    {
            			    	// AS3.g:871:25: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt81 = 2;
            			    	    int LA81_0 = input.LA(1);

            			    	    if ( (LA81_0 == LineTerminator) )
            			    	    {
            			    	        alt81 = 1;
            			    	    }


            			    	    switch (alt81) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator150=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_logicalANDExpression4453); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator150_tree = (CommonTree)adaptor.Create(LineTerminator150);
            			    			    		adaptor.AddChild(root_0, LineTerminator150_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop81;
            			    	    }
            			    	} while (true);

            			    	loop81:
            			    		;	// Stops C# compiler whining that label 'loop81' has no statements

            			    	string_literal151=(IToken)Match(input,74,FOLLOW_74_in_logicalANDExpression4456); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{string_literal151_tree = (CommonTree)adaptor.Create(string_literal151);
            			    		adaptor.AddChild(root_0, string_literal151_tree);
            			    	}
            			    	// AS3.g:871:46: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt82 = 2;
            			    	    alt82 = dfa82.Predict(input);
            			    	    switch (alt82) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator152=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_logicalANDExpression4458); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator152_tree = (CommonTree)adaptor.Create(LineTerminator152);
            			    			    		adaptor.AddChild(root_0, LineTerminator152_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop82;
            			    	    }
            			    	} while (true);

            			    	loop82:
            			    		;	// Stops C# compiler whining that label 'loop82' has no statements

            			    	PushFollow(FOLLOW_bitwiseORExpression_in_logicalANDExpression4461);
            			    	bitwiseORExpression153 = bitwiseORExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseORExpression153.Tree);

            			    }
            			    break;

            			default:
            			    goto loop83;
            	    }
            	} while (true);

            	loop83:
            		;	// Stops C# compiler whining that label 'loop83' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 32, logicalANDExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "logicalANDExpression"

    public class logicalANDExpressionNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "logicalANDExpressionNoIn"
    // AS3.g:874:1: logicalANDExpressionNoIn : bitwiseORExpressionNoIn ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn )* ;
    public AS3Parser.logicalANDExpressionNoIn_return logicalANDExpressionNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.logicalANDExpressionNoIn_return retval = new AS3Parser.logicalANDExpressionNoIn_return();
        retval.Start = input.LT(1);
        int logicalANDExpressionNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator155 = null;
        IToken string_literal156 = null;
        IToken LineTerminator157 = null;
        AS3Parser.bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn154 = default(AS3Parser.bitwiseORExpressionNoIn_return);

        AS3Parser.bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn158 = default(AS3Parser.bitwiseORExpressionNoIn_return);


        CommonTree LineTerminator155_tree=null;
        CommonTree string_literal156_tree=null;
        CommonTree LineTerminator157_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 33) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:875:2: ( bitwiseORExpressionNoIn ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn )* )
            // AS3.g:875:4: bitwiseORExpressionNoIn ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4475);
            	bitwiseORExpressionNoIn154 = bitwiseORExpressionNoIn();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseORExpressionNoIn154.Tree);
            	// AS3.g:875:28: ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn )*
            	do 
            	{
            	    int alt86 = 2;
            	    alt86 = dfa86.Predict(input);
            	    switch (alt86) 
            		{
            			case 1 :
            			    // AS3.g:875:29: ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn
            			    {
            			    	// AS3.g:875:29: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt84 = 2;
            			    	    int LA84_0 = input.LA(1);

            			    	    if ( (LA84_0 == LineTerminator) )
            			    	    {
            			    	        alt84 = 1;
            			    	    }


            			    	    switch (alt84) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator155=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_logicalANDExpressionNoIn4478); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator155_tree = (CommonTree)adaptor.Create(LineTerminator155);
            			    			    		adaptor.AddChild(root_0, LineTerminator155_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop84;
            			    	    }
            			    	} while (true);

            			    	loop84:
            			    		;	// Stops C# compiler whining that label 'loop84' has no statements

            			    	string_literal156=(IToken)Match(input,74,FOLLOW_74_in_logicalANDExpressionNoIn4481); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{string_literal156_tree = (CommonTree)adaptor.Create(string_literal156);
            			    		adaptor.AddChild(root_0, string_literal156_tree);
            			    	}
            			    	// AS3.g:875:50: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt85 = 2;
            			    	    alt85 = dfa85.Predict(input);
            			    	    switch (alt85) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator157=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_logicalANDExpressionNoIn4483); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator157_tree = (CommonTree)adaptor.Create(LineTerminator157);
            			    			    		adaptor.AddChild(root_0, LineTerminator157_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop85;
            			    	    }
            			    	} while (true);

            			    	loop85:
            			    		;	// Stops C# compiler whining that label 'loop85' has no statements

            			    	PushFollow(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4486);
            			    	bitwiseORExpressionNoIn158 = bitwiseORExpressionNoIn();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bitwiseORExpressionNoIn158.Tree);

            			    }
            			    break;

            			default:
            			    goto loop86;
            	    }
            	} while (true);

            	loop86:
            		;	// Stops C# compiler whining that label 'loop86' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 33, logicalANDExpressionNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "logicalANDExpressionNoIn"

    public class logicalORExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "logicalORExpression"
    // AS3.g:878:1: logicalORExpression : logicalANDExpression ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression )* ;
    public AS3Parser.logicalORExpression_return logicalORExpression() // throws RecognitionException [1]
    {   
        AS3Parser.logicalORExpression_return retval = new AS3Parser.logicalORExpression_return();
        retval.Start = input.LT(1);
        int logicalORExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator160 = null;
        IToken string_literal161 = null;
        IToken LineTerminator162 = null;
        AS3Parser.logicalANDExpression_return logicalANDExpression159 = default(AS3Parser.logicalANDExpression_return);

        AS3Parser.logicalANDExpression_return logicalANDExpression163 = default(AS3Parser.logicalANDExpression_return);


        CommonTree LineTerminator160_tree=null;
        CommonTree string_literal161_tree=null;
        CommonTree LineTerminator162_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 34) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:879:2: ( logicalANDExpression ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression )* )
            // AS3.g:879:4: logicalANDExpression ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_logicalANDExpression_in_logicalORExpression4500);
            	logicalANDExpression159 = logicalANDExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, logicalANDExpression159.Tree);
            	// AS3.g:879:25: ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression )*
            	do 
            	{
            	    int alt89 = 2;
            	    alt89 = dfa89.Predict(input);
            	    switch (alt89) 
            		{
            			case 1 :
            			    // AS3.g:879:26: ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression
            			    {
            			    	// AS3.g:879:26: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt87 = 2;
            			    	    int LA87_0 = input.LA(1);

            			    	    if ( (LA87_0 == LineTerminator) )
            			    	    {
            			    	        alt87 = 1;
            			    	    }


            			    	    switch (alt87) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator160=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_logicalORExpression4503); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator160_tree = (CommonTree)adaptor.Create(LineTerminator160);
            			    			    		adaptor.AddChild(root_0, LineTerminator160_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop87;
            			    	    }
            			    	} while (true);

            			    	loop87:
            			    		;	// Stops C# compiler whining that label 'loop87' has no statements

            			    	string_literal161=(IToken)Match(input,75,FOLLOW_75_in_logicalORExpression4506); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{string_literal161_tree = (CommonTree)adaptor.Create(string_literal161);
            			    		adaptor.AddChild(root_0, string_literal161_tree);
            			    	}
            			    	// AS3.g:879:47: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt88 = 2;
            			    	    alt88 = dfa88.Predict(input);
            			    	    switch (alt88) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator162=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_logicalORExpression4508); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator162_tree = (CommonTree)adaptor.Create(LineTerminator162);
            			    			    		adaptor.AddChild(root_0, LineTerminator162_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop88;
            			    	    }
            			    	} while (true);

            			    	loop88:
            			    		;	// Stops C# compiler whining that label 'loop88' has no statements

            			    	PushFollow(FOLLOW_logicalANDExpression_in_logicalORExpression4511);
            			    	logicalANDExpression163 = logicalANDExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, logicalANDExpression163.Tree);

            			    }
            			    break;

            			default:
            			    goto loop89;
            	    }
            	} while (true);

            	loop89:
            		;	// Stops C# compiler whining that label 'loop89' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 34, logicalORExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "logicalORExpression"

    public class logicalORExpressionNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "logicalORExpressionNoIn"
    // AS3.g:882:1: logicalORExpressionNoIn : logicalANDExpressionNoIn ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn )* ;
    public AS3Parser.logicalORExpressionNoIn_return logicalORExpressionNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.logicalORExpressionNoIn_return retval = new AS3Parser.logicalORExpressionNoIn_return();
        retval.Start = input.LT(1);
        int logicalORExpressionNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator165 = null;
        IToken string_literal166 = null;
        IToken LineTerminator167 = null;
        AS3Parser.logicalANDExpressionNoIn_return logicalANDExpressionNoIn164 = default(AS3Parser.logicalANDExpressionNoIn_return);

        AS3Parser.logicalANDExpressionNoIn_return logicalANDExpressionNoIn168 = default(AS3Parser.logicalANDExpressionNoIn_return);


        CommonTree LineTerminator165_tree=null;
        CommonTree string_literal166_tree=null;
        CommonTree LineTerminator167_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 35) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:883:2: ( logicalANDExpressionNoIn ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn )* )
            // AS3.g:883:4: logicalANDExpressionNoIn ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4524);
            	logicalANDExpressionNoIn164 = logicalANDExpressionNoIn();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, logicalANDExpressionNoIn164.Tree);
            	// AS3.g:883:29: ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn )*
            	do 
            	{
            	    int alt92 = 2;
            	    alt92 = dfa92.Predict(input);
            	    switch (alt92) 
            		{
            			case 1 :
            			    // AS3.g:883:30: ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn
            			    {
            			    	// AS3.g:883:30: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt90 = 2;
            			    	    int LA90_0 = input.LA(1);

            			    	    if ( (LA90_0 == LineTerminator) )
            			    	    {
            			    	        alt90 = 1;
            			    	    }


            			    	    switch (alt90) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator165=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_logicalORExpressionNoIn4527); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator165_tree = (CommonTree)adaptor.Create(LineTerminator165);
            			    			    		adaptor.AddChild(root_0, LineTerminator165_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop90;
            			    	    }
            			    	} while (true);

            			    	loop90:
            			    		;	// Stops C# compiler whining that label 'loop90' has no statements

            			    	string_literal166=(IToken)Match(input,75,FOLLOW_75_in_logicalORExpressionNoIn4530); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{string_literal166_tree = (CommonTree)adaptor.Create(string_literal166);
            			    		adaptor.AddChild(root_0, string_literal166_tree);
            			    	}
            			    	// AS3.g:883:51: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt91 = 2;
            			    	    alt91 = dfa91.Predict(input);
            			    	    switch (alt91) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator167=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_logicalORExpressionNoIn4532); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator167_tree = (CommonTree)adaptor.Create(LineTerminator167);
            			    			    		adaptor.AddChild(root_0, LineTerminator167_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop91;
            			    	    }
            			    	} while (true);

            			    	loop91:
            			    		;	// Stops C# compiler whining that label 'loop91' has no statements

            			    	PushFollow(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4535);
            			    	logicalANDExpressionNoIn168 = logicalANDExpressionNoIn();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, logicalANDExpressionNoIn168.Tree);

            			    }
            			    break;

            			default:
            			    goto loop92;
            	    }
            	} while (true);

            	loop92:
            		;	// Stops C# compiler whining that label 'loop92' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 35, logicalORExpressionNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "logicalORExpressionNoIn"

    public class conditionalExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "conditionalExpression"
    // AS3.g:886:1: conditionalExpression : logicalORExpression ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )? ;
    public AS3Parser.conditionalExpression_return conditionalExpression() // throws RecognitionException [1]
    {   
        AS3Parser.conditionalExpression_return retval = new AS3Parser.conditionalExpression_return();
        retval.Start = input.LT(1);
        int conditionalExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator170 = null;
        IToken char_literal171 = null;
        IToken LineTerminator172 = null;
        IToken LineTerminator174 = null;
        IToken char_literal175 = null;
        IToken LineTerminator176 = null;
        AS3Parser.logicalORExpression_return logicalORExpression169 = default(AS3Parser.logicalORExpression_return);

        AS3Parser.assignmentExpression_return assignmentExpression173 = default(AS3Parser.assignmentExpression_return);

        AS3Parser.assignmentExpression_return assignmentExpression177 = default(AS3Parser.assignmentExpression_return);


        CommonTree LineTerminator170_tree=null;
        CommonTree char_literal171_tree=null;
        CommonTree LineTerminator172_tree=null;
        CommonTree LineTerminator174_tree=null;
        CommonTree char_literal175_tree=null;
        CommonTree LineTerminator176_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 36) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:887:2: ( logicalORExpression ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )? )
            // AS3.g:887:4: logicalORExpression ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_logicalORExpression_in_conditionalExpression4549);
            	logicalORExpression169 = logicalORExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, logicalORExpression169.Tree);
            	// AS3.g:887:24: ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?
            	int alt97 = 2;
            	alt97 = dfa97.Predict(input);
            	switch (alt97) 
            	{
            	    case 1 :
            	        // AS3.g:887:25: ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression
            	        {
            	        	// AS3.g:887:25: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt93 = 2;
            	        	    int LA93_0 = input.LA(1);

            	        	    if ( (LA93_0 == LineTerminator) )
            	        	    {
            	        	        alt93 = 1;
            	        	    }


            	        	    switch (alt93) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator170=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_conditionalExpression4552); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator170_tree = (CommonTree)adaptor.Create(LineTerminator170);
            	        			    		adaptor.AddChild(root_0, LineTerminator170_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop93;
            	        	    }
            	        	} while (true);

            	        	loop93:
            	        		;	// Stops C# compiler whining that label 'loop93' has no statements

            	        	char_literal171=(IToken)Match(input,76,FOLLOW_76_in_conditionalExpression4555); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal171_tree = (CommonTree)adaptor.Create(char_literal171);
            	        		adaptor.AddChild(root_0, char_literal171_tree);
            	        	}
            	        	// AS3.g:887:45: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt94 = 2;
            	        	    alt94 = dfa94.Predict(input);
            	        	    switch (alt94) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator172=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_conditionalExpression4557); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator172_tree = (CommonTree)adaptor.Create(LineTerminator172);
            	        			    		adaptor.AddChild(root_0, LineTerminator172_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop94;
            	        	    }
            	        	} while (true);

            	        	loop94:
            	        		;	// Stops C# compiler whining that label 'loop94' has no statements

            	        	PushFollow(FOLLOW_assignmentExpression_in_conditionalExpression4560);
            	        	assignmentExpression173 = assignmentExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression173.Tree);
            	        	// AS3.g:887:82: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt95 = 2;
            	        	    int LA95_0 = input.LA(1);

            	        	    if ( (LA95_0 == LineTerminator) )
            	        	    {
            	        	        alt95 = 1;
            	        	    }


            	        	    switch (alt95) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator174=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_conditionalExpression4562); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator174_tree = (CommonTree)adaptor.Create(LineTerminator174);
            	        			    		adaptor.AddChild(root_0, LineTerminator174_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop95;
            	        	    }
            	        	} while (true);

            	        	loop95:
            	        		;	// Stops C# compiler whining that label 'loop95' has no statements

            	        	char_literal175=(IToken)Match(input,43,FOLLOW_43_in_conditionalExpression4565); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal175_tree = (CommonTree)adaptor.Create(char_literal175);
            	        		adaptor.AddChild(root_0, char_literal175_tree);
            	        	}
            	        	// AS3.g:887:102: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt96 = 2;
            	        	    alt96 = dfa96.Predict(input);
            	        	    switch (alt96) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator176=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_conditionalExpression4567); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator176_tree = (CommonTree)adaptor.Create(LineTerminator176);
            	        			    		adaptor.AddChild(root_0, LineTerminator176_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop96;
            	        	    }
            	        	} while (true);

            	        	loop96:
            	        		;	// Stops C# compiler whining that label 'loop96' has no statements

            	        	PushFollow(FOLLOW_assignmentExpression_in_conditionalExpression4570);
            	        	assignmentExpression177 = assignmentExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression177.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 36, conditionalExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public class conditionalExpressionNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "conditionalExpressionNoIn"
    // AS3.g:890:1: conditionalExpressionNoIn : logicalORExpressionNoIn ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )? ;
    public AS3Parser.conditionalExpressionNoIn_return conditionalExpressionNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.conditionalExpressionNoIn_return retval = new AS3Parser.conditionalExpressionNoIn_return();
        retval.Start = input.LT(1);
        int conditionalExpressionNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator179 = null;
        IToken char_literal180 = null;
        IToken LineTerminator181 = null;
        IToken LineTerminator183 = null;
        IToken char_literal184 = null;
        IToken LineTerminator185 = null;
        AS3Parser.logicalORExpressionNoIn_return logicalORExpressionNoIn178 = default(AS3Parser.logicalORExpressionNoIn_return);

        AS3Parser.assignmentExpression_return assignmentExpression182 = default(AS3Parser.assignmentExpression_return);

        AS3Parser.assignmentExpression_return assignmentExpression186 = default(AS3Parser.assignmentExpression_return);


        CommonTree LineTerminator179_tree=null;
        CommonTree char_literal180_tree=null;
        CommonTree LineTerminator181_tree=null;
        CommonTree LineTerminator183_tree=null;
        CommonTree char_literal184_tree=null;
        CommonTree LineTerminator185_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 37) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:891:2: ( logicalORExpressionNoIn ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )? )
            // AS3.g:891:4: logicalORExpressionNoIn ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn4584);
            	logicalORExpressionNoIn178 = logicalORExpressionNoIn();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, logicalORExpressionNoIn178.Tree);
            	// AS3.g:891:28: ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?
            	int alt102 = 2;
            	alt102 = dfa102.Predict(input);
            	switch (alt102) 
            	{
            	    case 1 :
            	        // AS3.g:891:29: ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression
            	        {
            	        	// AS3.g:891:29: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt98 = 2;
            	        	    int LA98_0 = input.LA(1);

            	        	    if ( (LA98_0 == LineTerminator) )
            	        	    {
            	        	        alt98 = 1;
            	        	    }


            	        	    switch (alt98) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator179=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_conditionalExpressionNoIn4587); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator179_tree = (CommonTree)adaptor.Create(LineTerminator179);
            	        			    		adaptor.AddChild(root_0, LineTerminator179_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop98;
            	        	    }
            	        	} while (true);

            	        	loop98:
            	        		;	// Stops C# compiler whining that label 'loop98' has no statements

            	        	char_literal180=(IToken)Match(input,76,FOLLOW_76_in_conditionalExpressionNoIn4590); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal180_tree = (CommonTree)adaptor.Create(char_literal180);
            	        		adaptor.AddChild(root_0, char_literal180_tree);
            	        	}
            	        	// AS3.g:891:49: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt99 = 2;
            	        	    alt99 = dfa99.Predict(input);
            	        	    switch (alt99) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator181=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_conditionalExpressionNoIn4592); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator181_tree = (CommonTree)adaptor.Create(LineTerminator181);
            	        			    		adaptor.AddChild(root_0, LineTerminator181_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop99;
            	        	    }
            	        	} while (true);

            	        	loop99:
            	        		;	// Stops C# compiler whining that label 'loop99' has no statements

            	        	PushFollow(FOLLOW_assignmentExpression_in_conditionalExpressionNoIn4595);
            	        	assignmentExpression182 = assignmentExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression182.Tree);
            	        	// AS3.g:891:86: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt100 = 2;
            	        	    int LA100_0 = input.LA(1);

            	        	    if ( (LA100_0 == LineTerminator) )
            	        	    {
            	        	        alt100 = 1;
            	        	    }


            	        	    switch (alt100) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator183=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_conditionalExpressionNoIn4597); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator183_tree = (CommonTree)adaptor.Create(LineTerminator183);
            	        			    		adaptor.AddChild(root_0, LineTerminator183_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop100;
            	        	    }
            	        	} while (true);

            	        	loop100:
            	        		;	// Stops C# compiler whining that label 'loop100' has no statements

            	        	char_literal184=(IToken)Match(input,43,FOLLOW_43_in_conditionalExpressionNoIn4600); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal184_tree = (CommonTree)adaptor.Create(char_literal184);
            	        		adaptor.AddChild(root_0, char_literal184_tree);
            	        	}
            	        	// AS3.g:891:106: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt101 = 2;
            	        	    alt101 = dfa101.Predict(input);
            	        	    switch (alt101) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator185=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_conditionalExpressionNoIn4602); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator185_tree = (CommonTree)adaptor.Create(LineTerminator185);
            	        			    		adaptor.AddChild(root_0, LineTerminator185_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop101;
            	        	    }
            	        	} while (true);

            	        	loop101:
            	        		;	// Stops C# compiler whining that label 'loop101' has no statements

            	        	PushFollow(FOLLOW_assignmentExpression_in_conditionalExpressionNoIn4605);
            	        	assignmentExpression186 = assignmentExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression186.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 37, conditionalExpressionNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpressionNoIn"

    public class assignmentExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "assignmentExpression"
    // AS3.g:894:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpression );
    public AS3Parser.assignmentExpression_return assignmentExpression() // throws RecognitionException [1]
    {   
        AS3Parser.assignmentExpression_return retval = new AS3Parser.assignmentExpression_return();
        retval.Start = input.LT(1);
        int assignmentExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator189 = null;
        IToken LineTerminator191 = null;
        AS3Parser.conditionalExpression_return conditionalExpression187 = default(AS3Parser.conditionalExpression_return);

        AS3Parser.leftHandSideExpression_return leftHandSideExpression188 = default(AS3Parser.leftHandSideExpression_return);

        AS3Parser.assignmentOperator_return assignmentOperator190 = default(AS3Parser.assignmentOperator_return);

        AS3Parser.assignmentExpression_return assignmentExpression192 = default(AS3Parser.assignmentExpression_return);


        CommonTree LineTerminator189_tree=null;
        CommonTree LineTerminator191_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 38) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:895:2: ( conditionalExpression | leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpression )
            int alt105 = 2;
            alt105 = dfa105.Predict(input);
            switch (alt105) 
            {
                case 1 :
                    // AS3.g:895:4: conditionalExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_conditionalExpression_in_assignmentExpression4618);
                    	conditionalExpression187 = conditionalExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conditionalExpression187.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:896:4: leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_leftHandSideExpression_in_assignmentExpression4623);
                    	leftHandSideExpression188 = leftHandSideExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, leftHandSideExpression188.Tree);
                    	// AS3.g:896:27: ( LineTerminator )*
                    	do 
                    	{
                    	    int alt103 = 2;
                    	    int LA103_0 = input.LA(1);

                    	    if ( (LA103_0 == LineTerminator) )
                    	    {
                    	        alt103 = 1;
                    	    }


                    	    switch (alt103) 
                    		{
                    			case 1 :
                    			    // AS3.g:0:0: LineTerminator
                    			    {
                    			    	LineTerminator189=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_assignmentExpression4625); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{LineTerminator189_tree = (CommonTree)adaptor.Create(LineTerminator189);
                    			    		adaptor.AddChild(root_0, LineTerminator189_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop103;
                    	    }
                    	} while (true);

                    	loop103:
                    		;	// Stops C# compiler whining that label 'loop103' has no statements

                    	PushFollow(FOLLOW_assignmentOperator_in_assignmentExpression4628);
                    	assignmentOperator190 = assignmentOperator();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentOperator190.Tree);
                    	// AS3.g:896:62: ( LineTerminator )*
                    	do 
                    	{
                    	    int alt104 = 2;
                    	    alt104 = dfa104.Predict(input);
                    	    switch (alt104) 
                    		{
                    			case 1 :
                    			    // AS3.g:0:0: LineTerminator
                    			    {
                    			    	LineTerminator191=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_assignmentExpression4630); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{LineTerminator191_tree = (CommonTree)adaptor.Create(LineTerminator191);
                    			    		adaptor.AddChild(root_0, LineTerminator191_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop104;
                    	    }
                    	} while (true);

                    	loop104:
                    		;	// Stops C# compiler whining that label 'loop104' has no statements

                    	PushFollow(FOLLOW_assignmentExpression_in_assignmentExpression4633);
                    	assignmentExpression192 = assignmentExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression192.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 38, assignmentExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "assignmentExpression"

    public class assignmentExpressionNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "assignmentExpressionNoIn"
    // AS3.g:899:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpressionNoIn );
    public AS3Parser.assignmentExpressionNoIn_return assignmentExpressionNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.assignmentExpressionNoIn_return retval = new AS3Parser.assignmentExpressionNoIn_return();
        retval.Start = input.LT(1);
        int assignmentExpressionNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator195 = null;
        IToken LineTerminator197 = null;
        AS3Parser.conditionalExpressionNoIn_return conditionalExpressionNoIn193 = default(AS3Parser.conditionalExpressionNoIn_return);

        AS3Parser.leftHandSideExpression_return leftHandSideExpression194 = default(AS3Parser.leftHandSideExpression_return);

        AS3Parser.assignmentOperator_return assignmentOperator196 = default(AS3Parser.assignmentOperator_return);

        AS3Parser.assignmentExpressionNoIn_return assignmentExpressionNoIn198 = default(AS3Parser.assignmentExpressionNoIn_return);


        CommonTree LineTerminator195_tree=null;
        CommonTree LineTerminator197_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 39) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:900:2: ( conditionalExpressionNoIn | leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpressionNoIn )
            int alt108 = 2;
            alt108 = dfa108.Predict(input);
            switch (alt108) 
            {
                case 1 :
                    // AS3.g:900:4: conditionalExpressionNoIn
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4645);
                    	conditionalExpressionNoIn193 = conditionalExpressionNoIn();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conditionalExpressionNoIn193.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:901:4: leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpressionNoIn
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4650);
                    	leftHandSideExpression194 = leftHandSideExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, leftHandSideExpression194.Tree);
                    	// AS3.g:901:27: ( LineTerminator )*
                    	do 
                    	{
                    	    int alt106 = 2;
                    	    int LA106_0 = input.LA(1);

                    	    if ( (LA106_0 == LineTerminator) )
                    	    {
                    	        alt106 = 1;
                    	    }


                    	    switch (alt106) 
                    		{
                    			case 1 :
                    			    // AS3.g:0:0: LineTerminator
                    			    {
                    			    	LineTerminator195=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_assignmentExpressionNoIn4652); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{LineTerminator195_tree = (CommonTree)adaptor.Create(LineTerminator195);
                    			    		adaptor.AddChild(root_0, LineTerminator195_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop106;
                    	    }
                    	} while (true);

                    	loop106:
                    		;	// Stops C# compiler whining that label 'loop106' has no statements

                    	PushFollow(FOLLOW_assignmentOperator_in_assignmentExpressionNoIn4655);
                    	assignmentOperator196 = assignmentOperator();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentOperator196.Tree);
                    	// AS3.g:901:62: ( LineTerminator )*
                    	do 
                    	{
                    	    int alt107 = 2;
                    	    alt107 = dfa107.Predict(input);
                    	    switch (alt107) 
                    		{
                    			case 1 :
                    			    // AS3.g:0:0: LineTerminator
                    			    {
                    			    	LineTerminator197=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_assignmentExpressionNoIn4657); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{LineTerminator197_tree = (CommonTree)adaptor.Create(LineTerminator197);
                    			    		adaptor.AddChild(root_0, LineTerminator197_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop107;
                    	    }
                    	} while (true);

                    	loop107:
                    		;	// Stops C# compiler whining that label 'loop107' has no statements

                    	PushFollow(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn4660);
                    	assignmentExpressionNoIn198 = assignmentExpressionNoIn();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpressionNoIn198.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 39, assignmentExpressionNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "assignmentExpressionNoIn"

    public class assignmentOperator_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "assignmentOperator"
    // AS3.g:904:1: assignmentOperator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' );
    public AS3Parser.assignmentOperator_return assignmentOperator() // throws RecognitionException [1]
    {   
        AS3Parser.assignmentOperator_return retval = new AS3Parser.assignmentOperator_return();
        retval.Start = input.LT(1);
        int assignmentOperator_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken set199 = null;

        CommonTree set199_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 40) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:905:2: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' )
            // AS3.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	set199 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 77 && input.LA(1) <= 88) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set199));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 40, assignmentOperator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public class expression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "expression"
    // AS3.g:908:1: expression : assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* ;
    public AS3Parser.expression_return expression() // throws RecognitionException [1]
    {   
        AS3Parser.expression_return retval = new AS3Parser.expression_return();
        retval.Start = input.LT(1);
        int expression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator201 = null;
        IToken char_literal202 = null;
        IToken LineTerminator203 = null;
        AS3Parser.assignmentExpression_return assignmentExpression200 = default(AS3Parser.assignmentExpression_return);

        AS3Parser.assignmentExpression_return assignmentExpression204 = default(AS3Parser.assignmentExpression_return);


        CommonTree LineTerminator201_tree=null;
        CommonTree char_literal202_tree=null;
        CommonTree LineTerminator203_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 41) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:909:2: ( assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )
            // AS3.g:909:4: assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_assignmentExpression_in_expression4728);
            	assignmentExpression200 = assignmentExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression200.Tree);
            	// AS3.g:909:25: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*
            	do 
            	{
            	    int alt111 = 2;
            	    alt111 = dfa111.Predict(input);
            	    switch (alt111) 
            		{
            			case 1 :
            			    // AS3.g:909:26: ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression
            			    {
            			    	// AS3.g:909:26: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt109 = 2;
            			    	    int LA109_0 = input.LA(1);

            			    	    if ( (LA109_0 == LineTerminator) )
            			    	    {
            			    	        alt109 = 1;
            			    	    }


            			    	    switch (alt109) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator201=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_expression4731); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator201_tree = (CommonTree)adaptor.Create(LineTerminator201);
            			    			    		adaptor.AddChild(root_0, LineTerminator201_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop109;
            			    	    }
            			    	} while (true);

            			    	loop109:
            			    		;	// Stops C# compiler whining that label 'loop109' has no statements

            			    	char_literal202=(IToken)Match(input,39,FOLLOW_39_in_expression4734); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal202_tree = (CommonTree)adaptor.Create(char_literal202);
            			    		adaptor.AddChild(root_0, char_literal202_tree);
            			    	}
            			    	// AS3.g:909:46: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt110 = 2;
            			    	    alt110 = dfa110.Predict(input);
            			    	    switch (alt110) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator203=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_expression4736); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator203_tree = (CommonTree)adaptor.Create(LineTerminator203);
            			    			    		adaptor.AddChild(root_0, LineTerminator203_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop110;
            			    	    }
            			    	} while (true);

            			    	loop110:
            			    		;	// Stops C# compiler whining that label 'loop110' has no statements

            			    	PushFollow(FOLLOW_assignmentExpression_in_expression4739);
            			    	assignmentExpression204 = assignmentExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression204.Tree);

            			    }
            			    break;

            			default:
            			    goto loop111;
            	    }
            	} while (true);

            	loop111:
            		;	// Stops C# compiler whining that label 'loop111' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 41, expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public class expressionNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "expressionNoIn"
    // AS3.g:912:1: expressionNoIn : assignmentExpressionNoIn ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn )* ;
    public AS3Parser.expressionNoIn_return expressionNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.expressionNoIn_return retval = new AS3Parser.expressionNoIn_return();
        retval.Start = input.LT(1);
        int expressionNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator206 = null;
        IToken char_literal207 = null;
        IToken LineTerminator208 = null;
        AS3Parser.assignmentExpressionNoIn_return assignmentExpressionNoIn205 = default(AS3Parser.assignmentExpressionNoIn_return);

        AS3Parser.assignmentExpressionNoIn_return assignmentExpressionNoIn209 = default(AS3Parser.assignmentExpressionNoIn_return);


        CommonTree LineTerminator206_tree=null;
        CommonTree char_literal207_tree=null;
        CommonTree LineTerminator208_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 42) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:913:2: ( assignmentExpressionNoIn ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn )* )
            // AS3.g:913:4: assignmentExpressionNoIn ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4753);
            	assignmentExpressionNoIn205 = assignmentExpressionNoIn();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpressionNoIn205.Tree);
            	// AS3.g:913:29: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn )*
            	do 
            	{
            	    int alt114 = 2;
            	    int LA114_0 = input.LA(1);

            	    if ( (LA114_0 == LineTerminator) )
            	    {
            	        int LA114_1 = input.LA(2);

            	        if ( (LA114_1 == 39) )
            	        {
            	            alt114 = 1;
            	        }
            	        else if ( (LA114_1 == LineTerminator) )
            	        {
            	            int LA114_6 = input.LA(3);

            	            if ( (synpred165_AS3()) )
            	            {
            	                alt114 = 1;
            	            }


            	        }


            	    }
            	    else if ( (LA114_0 == 39) )
            	    {
            	        alt114 = 1;
            	    }


            	    switch (alt114) 
            		{
            			case 1 :
            			    // AS3.g:913:30: ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn
            			    {
            			    	// AS3.g:913:30: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt112 = 2;
            			    	    int LA112_0 = input.LA(1);

            			    	    if ( (LA112_0 == LineTerminator) )
            			    	    {
            			    	        alt112 = 1;
            			    	    }


            			    	    switch (alt112) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator206=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_expressionNoIn4756); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator206_tree = (CommonTree)adaptor.Create(LineTerminator206);
            			    			    		adaptor.AddChild(root_0, LineTerminator206_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop112;
            			    	    }
            			    	} while (true);

            			    	loop112:
            			    		;	// Stops C# compiler whining that label 'loop112' has no statements

            			    	char_literal207=(IToken)Match(input,39,FOLLOW_39_in_expressionNoIn4759); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal207_tree = (CommonTree)adaptor.Create(char_literal207);
            			    		adaptor.AddChild(root_0, char_literal207_tree);
            			    	}
            			    	// AS3.g:913:50: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt113 = 2;
            			    	    alt113 = dfa113.Predict(input);
            			    	    switch (alt113) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator208=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_expressionNoIn4761); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator208_tree = (CommonTree)adaptor.Create(LineTerminator208);
            			    			    		adaptor.AddChild(root_0, LineTerminator208_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop113;
            			    	    }
            			    	} while (true);

            			    	loop113:
            			    		;	// Stops C# compiler whining that label 'loop113' has no statements

            			    	PushFollow(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4764);
            			    	assignmentExpressionNoIn209 = assignmentExpressionNoIn();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpressionNoIn209.Tree);

            			    }
            			    break;

            			default:
            			    goto loop114;
            	    }
            	} while (true);

            	loop114:
            		;	// Stops C# compiler whining that label 'loop114' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 42, expressionNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "expressionNoIn"

    public class statement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "statement"
    // AS3.g:920:1: statement : ( blockStatement | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement );
    public AS3Parser.statement_return statement() // throws RecognitionException [1]
    {   
        AS3Parser.statement_return retval = new AS3Parser.statement_return();
        retval.Start = input.LT(1);
        int statement_StartIndex = input.Index();
        CommonTree root_0 = null;

        AS3Parser.blockStatement_return blockStatement210 = default(AS3Parser.blockStatement_return);

        AS3Parser.variableStatement_return variableStatement211 = default(AS3Parser.variableStatement_return);

        AS3Parser.emptyStatement_return emptyStatement212 = default(AS3Parser.emptyStatement_return);

        AS3Parser.expressionStatement_return expressionStatement213 = default(AS3Parser.expressionStatement_return);

        AS3Parser.ifStatement_return ifStatement214 = default(AS3Parser.ifStatement_return);

        AS3Parser.iterationStatement_return iterationStatement215 = default(AS3Parser.iterationStatement_return);

        AS3Parser.continueStatement_return continueStatement216 = default(AS3Parser.continueStatement_return);

        AS3Parser.breakStatement_return breakStatement217 = default(AS3Parser.breakStatement_return);

        AS3Parser.returnStatement_return returnStatement218 = default(AS3Parser.returnStatement_return);

        AS3Parser.withStatement_return withStatement219 = default(AS3Parser.withStatement_return);

        AS3Parser.labelledStatement_return labelledStatement220 = default(AS3Parser.labelledStatement_return);

        AS3Parser.switchStatement_return switchStatement221 = default(AS3Parser.switchStatement_return);

        AS3Parser.throwStatement_return throwStatement222 = default(AS3Parser.throwStatement_return);

        AS3Parser.tryStatement_return tryStatement223 = default(AS3Parser.tryStatement_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 43) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:921:2: ( blockStatement | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement )
            int alt115 = 14;
            alt115 = dfa115.Predict(input);
            switch (alt115) 
            {
                case 1 :
                    // AS3.g:921:4: blockStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_blockStatement_in_statement4782);
                    	blockStatement210 = blockStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, blockStatement210.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:922:4: variableStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_variableStatement_in_statement4787);
                    	variableStatement211 = variableStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variableStatement211.Tree);

                    }
                    break;
                case 3 :
                    // AS3.g:923:4: emptyStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_emptyStatement_in_statement4792);
                    	emptyStatement212 = emptyStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, emptyStatement212.Tree);

                    }
                    break;
                case 4 :
                    // AS3.g:924:4: expressionStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_expressionStatement_in_statement4797);
                    	expressionStatement213 = expressionStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expressionStatement213.Tree);

                    }
                    break;
                case 5 :
                    // AS3.g:925:4: ifStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_ifStatement_in_statement4802);
                    	ifStatement214 = ifStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ifStatement214.Tree);

                    }
                    break;
                case 6 :
                    // AS3.g:926:4: iterationStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_iterationStatement_in_statement4807);
                    	iterationStatement215 = iterationStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, iterationStatement215.Tree);

                    }
                    break;
                case 7 :
                    // AS3.g:927:4: continueStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_continueStatement_in_statement4812);
                    	continueStatement216 = continueStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, continueStatement216.Tree);

                    }
                    break;
                case 8 :
                    // AS3.g:928:4: breakStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_breakStatement_in_statement4817);
                    	breakStatement217 = breakStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, breakStatement217.Tree);

                    }
                    break;
                case 9 :
                    // AS3.g:929:4: returnStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_returnStatement_in_statement4822);
                    	returnStatement218 = returnStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, returnStatement218.Tree);

                    }
                    break;
                case 10 :
                    // AS3.g:930:4: withStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_withStatement_in_statement4827);
                    	withStatement219 = withStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, withStatement219.Tree);

                    }
                    break;
                case 11 :
                    // AS3.g:931:4: labelledStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_labelledStatement_in_statement4832);
                    	labelledStatement220 = labelledStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, labelledStatement220.Tree);

                    }
                    break;
                case 12 :
                    // AS3.g:932:4: switchStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_switchStatement_in_statement4837);
                    	switchStatement221 = switchStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switchStatement221.Tree);

                    }
                    break;
                case 13 :
                    // AS3.g:933:4: throwStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_throwStatement_in_statement4842);
                    	throwStatement222 = throwStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, throwStatement222.Tree);

                    }
                    break;
                case 14 :
                    // AS3.g:934:4: tryStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_tryStatement_in_statement4847);
                    	tryStatement223 = tryStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, tryStatement223.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 43, statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public class blockStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "blockStatement"
    // AS3.g:937:1: blockStatement : '{' ( LineTerminator )* ( statementList )? ( LineTerminator )* ')' ;
    public AS3Parser.blockStatement_return blockStatement() // throws RecognitionException [1]
    {   
        AS3Parser.blockStatement_return retval = new AS3Parser.blockStatement_return();
        retval.Start = input.LT(1);
        int blockStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal224 = null;
        IToken LineTerminator225 = null;
        IToken LineTerminator227 = null;
        IToken char_literal228 = null;
        AS3Parser.statementList_return statementList226 = default(AS3Parser.statementList_return);


        CommonTree char_literal224_tree=null;
        CommonTree LineTerminator225_tree=null;
        CommonTree LineTerminator227_tree=null;
        CommonTree char_literal228_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 44) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:938:2: ( '{' ( LineTerminator )* ( statementList )? ( LineTerminator )* ')' )
            // AS3.g:938:4: '{' ( LineTerminator )* ( statementList )? ( LineTerminator )* ')'
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal224=(IToken)Match(input,41,FOLLOW_41_in_blockStatement4858); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal224_tree = (CommonTree)adaptor.Create(char_literal224);
            		adaptor.AddChild(root_0, char_literal224_tree);
            	}
            	// AS3.g:938:8: ( LineTerminator )*
            	do 
            	{
            	    int alt116 = 2;
            	    alt116 = dfa116.Predict(input);
            	    switch (alt116) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator225=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_blockStatement4860); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator225_tree = (CommonTree)adaptor.Create(LineTerminator225);
            			    		adaptor.AddChild(root_0, LineTerminator225_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop116;
            	    }
            	} while (true);

            	loop116:
            		;	// Stops C# compiler whining that label 'loop116' has no statements

            	// AS3.g:938:24: ( statementList )?
            	int alt117 = 2;
            	alt117 = dfa117.Predict(input);
            	switch (alt117) 
            	{
            	    case 1 :
            	        // AS3.g:0:0: statementList
            	        {
            	        	PushFollow(FOLLOW_statementList_in_blockStatement4863);
            	        	statementList226 = statementList();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statementList226.Tree);

            	        }
            	        break;

            	}

            	// AS3.g:938:39: ( LineTerminator )*
            	do 
            	{
            	    int alt118 = 2;
            	    int LA118_0 = input.LA(1);

            	    if ( (LA118_0 == LineTerminator) )
            	    {
            	        alt118 = 1;
            	    }


            	    switch (alt118) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator227=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_blockStatement4866); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator227_tree = (CommonTree)adaptor.Create(LineTerminator227);
            			    		adaptor.AddChild(root_0, LineTerminator227_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop118;
            	    }
            	} while (true);

            	loop118:
            		;	// Stops C# compiler whining that label 'loop118' has no statements

            	char_literal228=(IToken)Match(input,37,FOLLOW_37_in_blockStatement4869); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal228_tree = (CommonTree)adaptor.Create(char_literal228);
            		adaptor.AddChild(root_0, char_literal228_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 44, blockStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public class statementList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "statementList"
    // AS3.g:941:1: statementList : statement ( ( LineTerminator )* statement )* ;
    public AS3Parser.statementList_return statementList() // throws RecognitionException [1]
    {   
        AS3Parser.statementList_return retval = new AS3Parser.statementList_return();
        retval.Start = input.LT(1);
        int statementList_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator230 = null;
        AS3Parser.statement_return statement229 = default(AS3Parser.statement_return);

        AS3Parser.statement_return statement231 = default(AS3Parser.statement_return);


        CommonTree LineTerminator230_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 45) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:942:2: ( statement ( ( LineTerminator )* statement )* )
            // AS3.g:942:4: statement ( ( LineTerminator )* statement )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_statement_in_statementList4881);
            	statement229 = statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement229.Tree);
            	// AS3.g:942:14: ( ( LineTerminator )* statement )*
            	do 
            	{
            	    int alt120 = 2;
            	    alt120 = dfa120.Predict(input);
            	    switch (alt120) 
            		{
            			case 1 :
            			    // AS3.g:942:15: ( LineTerminator )* statement
            			    {
            			    	// AS3.g:942:15: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt119 = 2;
            			    	    alt119 = dfa119.Predict(input);
            			    	    switch (alt119) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator230=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_statementList4884); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator230_tree = (CommonTree)adaptor.Create(LineTerminator230);
            			    			    		adaptor.AddChild(root_0, LineTerminator230_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop119;
            			    	    }
            			    	} while (true);

            			    	loop119:
            			    		;	// Stops C# compiler whining that label 'loop119' has no statements

            			    	PushFollow(FOLLOW_statement_in_statementList4887);
            			    	statement231 = statement();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement231.Tree);

            			    }
            			    break;

            			default:
            			    goto loop120;
            	    }
            	} while (true);

            	loop120:
            		;	// Stops C# compiler whining that label 'loop120' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 45, statementList_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "statementList"

    public class variableStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "variableStatement"
    // AS3.g:945:1: variableStatement : 'var' ( LineTerminator )* variableDeclarationList ( LineTerminator | ';' ) ;
    public AS3Parser.variableStatement_return variableStatement() // throws RecognitionException [1]
    {   
        AS3Parser.variableStatement_return retval = new AS3Parser.variableStatement_return();
        retval.Start = input.LT(1);
        int variableStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal232 = null;
        IToken LineTerminator233 = null;
        IToken set235 = null;
        AS3Parser.variableDeclarationList_return variableDeclarationList234 = default(AS3Parser.variableDeclarationList_return);


        CommonTree string_literal232_tree=null;
        CommonTree LineTerminator233_tree=null;
        CommonTree set235_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 46) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:946:2: ( 'var' ( LineTerminator )* variableDeclarationList ( LineTerminator | ';' ) )
            // AS3.g:946:4: 'var' ( LineTerminator )* variableDeclarationList ( LineTerminator | ';' )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal232=(IToken)Match(input,89,FOLLOW_89_in_variableStatement4901); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal232_tree = (CommonTree)adaptor.Create(string_literal232);
            		adaptor.AddChild(root_0, string_literal232_tree);
            	}
            	// AS3.g:946:10: ( LineTerminator )*
            	do 
            	{
            	    int alt121 = 2;
            	    int LA121_0 = input.LA(1);

            	    if ( (LA121_0 == LineTerminator) )
            	    {
            	        alt121 = 1;
            	    }


            	    switch (alt121) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator233=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_variableStatement4903); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator233_tree = (CommonTree)adaptor.Create(LineTerminator233);
            			    		adaptor.AddChild(root_0, LineTerminator233_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop121;
            	    }
            	} while (true);

            	loop121:
            		;	// Stops C# compiler whining that label 'loop121' has no statements

            	PushFollow(FOLLOW_variableDeclarationList_in_variableStatement4906);
            	variableDeclarationList234 = variableDeclarationList();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variableDeclarationList234.Tree);
            	set235 = (IToken)input.LT(1);
            	if ( input.LA(1) == LineTerminator || input.LA(1) == 90 ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set235));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 46, variableStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variableStatement"

    public class variableDeclarationList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "variableDeclarationList"
    // AS3.g:949:1: variableDeclarationList : variableDeclaration ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration )* ;
    public AS3Parser.variableDeclarationList_return variableDeclarationList() // throws RecognitionException [1]
    {   
        AS3Parser.variableDeclarationList_return retval = new AS3Parser.variableDeclarationList_return();
        retval.Start = input.LT(1);
        int variableDeclarationList_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator237 = null;
        IToken char_literal238 = null;
        IToken LineTerminator239 = null;
        AS3Parser.variableDeclaration_return variableDeclaration236 = default(AS3Parser.variableDeclaration_return);

        AS3Parser.variableDeclaration_return variableDeclaration240 = default(AS3Parser.variableDeclaration_return);


        CommonTree LineTerminator237_tree=null;
        CommonTree char_literal238_tree=null;
        CommonTree LineTerminator239_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 47) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:950:2: ( variableDeclaration ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration )* )
            // AS3.g:950:4: variableDeclaration ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList4926);
            	variableDeclaration236 = variableDeclaration();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variableDeclaration236.Tree);
            	// AS3.g:950:24: ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration )*
            	do 
            	{
            	    int alt124 = 2;
            	    alt124 = dfa124.Predict(input);
            	    switch (alt124) 
            		{
            			case 1 :
            			    // AS3.g:950:25: ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration
            			    {
            			    	// AS3.g:950:25: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt122 = 2;
            			    	    int LA122_0 = input.LA(1);

            			    	    if ( (LA122_0 == LineTerminator) )
            			    	    {
            			    	        alt122 = 1;
            			    	    }


            			    	    switch (alt122) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator237=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_variableDeclarationList4929); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator237_tree = (CommonTree)adaptor.Create(LineTerminator237);
            			    			    		adaptor.AddChild(root_0, LineTerminator237_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop122;
            			    	    }
            			    	} while (true);

            			    	loop122:
            			    		;	// Stops C# compiler whining that label 'loop122' has no statements

            			    	char_literal238=(IToken)Match(input,39,FOLLOW_39_in_variableDeclarationList4932); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal238_tree = (CommonTree)adaptor.Create(char_literal238);
            			    		adaptor.AddChild(root_0, char_literal238_tree);
            			    	}
            			    	// AS3.g:950:45: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt123 = 2;
            			    	    int LA123_0 = input.LA(1);

            			    	    if ( (LA123_0 == LineTerminator) )
            			    	    {
            			    	        alt123 = 1;
            			    	    }


            			    	    switch (alt123) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator239=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_variableDeclarationList4934); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator239_tree = (CommonTree)adaptor.Create(LineTerminator239);
            			    			    		adaptor.AddChild(root_0, LineTerminator239_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop123;
            			    	    }
            			    	} while (true);

            			    	loop123:
            			    		;	// Stops C# compiler whining that label 'loop123' has no statements

            			    	PushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList4937);
            			    	variableDeclaration240 = variableDeclaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variableDeclaration240.Tree);

            			    }
            			    break;

            			default:
            			    goto loop124;
            	    }
            	} while (true);

            	loop124:
            		;	// Stops C# compiler whining that label 'loop124' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 47, variableDeclarationList_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarationList"

    public class variableDeclarationListNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "variableDeclarationListNoIn"
    // AS3.g:953:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn )* ;
    public AS3Parser.variableDeclarationListNoIn_return variableDeclarationListNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.variableDeclarationListNoIn_return retval = new AS3Parser.variableDeclarationListNoIn_return();
        retval.Start = input.LT(1);
        int variableDeclarationListNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator242 = null;
        IToken char_literal243 = null;
        IToken LineTerminator244 = null;
        AS3Parser.variableDeclarationNoIn_return variableDeclarationNoIn241 = default(AS3Parser.variableDeclarationNoIn_return);

        AS3Parser.variableDeclarationNoIn_return variableDeclarationNoIn245 = default(AS3Parser.variableDeclarationNoIn_return);


        CommonTree LineTerminator242_tree=null;
        CommonTree char_literal243_tree=null;
        CommonTree LineTerminator244_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 48) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:954:2: ( variableDeclarationNoIn ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn )* )
            // AS3.g:954:4: variableDeclarationNoIn ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn4951);
            	variableDeclarationNoIn241 = variableDeclarationNoIn();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variableDeclarationNoIn241.Tree);
            	// AS3.g:954:28: ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn )*
            	do 
            	{
            	    int alt127 = 2;
            	    int LA127_0 = input.LA(1);

            	    if ( (LA127_0 == LineTerminator) )
            	    {
            	        int LA127_1 = input.LA(2);

            	        if ( (LA127_1 == 39) )
            	        {
            	            alt127 = 1;
            	        }
            	        else if ( (LA127_1 == LineTerminator) )
            	        {
            	            int LA127_6 = input.LA(3);

            	            if ( (synpred191_AS3()) )
            	            {
            	                alt127 = 1;
            	            }


            	        }


            	    }
            	    else if ( (LA127_0 == 39) )
            	    {
            	        alt127 = 1;
            	    }


            	    switch (alt127) 
            		{
            			case 1 :
            			    // AS3.g:954:29: ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn
            			    {
            			    	// AS3.g:954:29: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt125 = 2;
            			    	    int LA125_0 = input.LA(1);

            			    	    if ( (LA125_0 == LineTerminator) )
            			    	    {
            			    	        alt125 = 1;
            			    	    }


            			    	    switch (alt125) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator242=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_variableDeclarationListNoIn4954); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator242_tree = (CommonTree)adaptor.Create(LineTerminator242);
            			    			    		adaptor.AddChild(root_0, LineTerminator242_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop125;
            			    	    }
            			    	} while (true);

            			    	loop125:
            			    		;	// Stops C# compiler whining that label 'loop125' has no statements

            			    	char_literal243=(IToken)Match(input,39,FOLLOW_39_in_variableDeclarationListNoIn4957); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal243_tree = (CommonTree)adaptor.Create(char_literal243);
            			    		adaptor.AddChild(root_0, char_literal243_tree);
            			    	}
            			    	// AS3.g:954:49: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt126 = 2;
            			    	    int LA126_0 = input.LA(1);

            			    	    if ( (LA126_0 == LineTerminator) )
            			    	    {
            			    	        alt126 = 1;
            			    	    }


            			    	    switch (alt126) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator244=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_variableDeclarationListNoIn4959); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator244_tree = (CommonTree)adaptor.Create(LineTerminator244);
            			    			    		adaptor.AddChild(root_0, LineTerminator244_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop126;
            			    	    }
            			    	} while (true);

            			    	loop126:
            			    		;	// Stops C# compiler whining that label 'loop126' has no statements

            			    	PushFollow(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn4962);
            			    	variableDeclarationNoIn245 = variableDeclarationNoIn();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variableDeclarationNoIn245.Tree);

            			    }
            			    break;

            			default:
            			    goto loop127;
            	    }
            	} while (true);

            	loop127:
            		;	// Stops C# compiler whining that label 'loop127' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 48, variableDeclarationListNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarationListNoIn"

    public class variableDeclaration_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "variableDeclaration"
    // AS3.g:957:1: variableDeclaration : Identifier ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )? ( LineTerminator )* ( initialiser )? ;
    public AS3Parser.variableDeclaration_return variableDeclaration() // throws RecognitionException [1]
    {   
        AS3Parser.variableDeclaration_return retval = new AS3Parser.variableDeclaration_return();
        retval.Start = input.LT(1);
        int variableDeclaration_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken Identifier246 = null;
        IToken LineTerminator247 = null;
        IToken char_literal248 = null;
        IToken LineTerminator249 = null;
        IToken Identifier250 = null;
        IToken LineTerminator251 = null;
        AS3Parser.initialiser_return initialiser252 = default(AS3Parser.initialiser_return);


        CommonTree Identifier246_tree=null;
        CommonTree LineTerminator247_tree=null;
        CommonTree char_literal248_tree=null;
        CommonTree LineTerminator249_tree=null;
        CommonTree Identifier250_tree=null;
        CommonTree LineTerminator251_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 49) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:958:2: ( Identifier ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )? ( LineTerminator )* ( initialiser )? )
            // AS3.g:958:4: Identifier ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )? ( LineTerminator )* ( initialiser )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	Identifier246=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration4975); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{Identifier246_tree = (CommonTree)adaptor.Create(Identifier246);
            		adaptor.AddChild(root_0, Identifier246_tree);
            	}
            	// AS3.g:958:15: ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )?
            	int alt130 = 2;
            	alt130 = dfa130.Predict(input);
            	switch (alt130) 
            	{
            	    case 1 :
            	        // AS3.g:958:16: ( LineTerminator )* ':' ( LineTerminator )* Identifier
            	        {
            	        	// AS3.g:958:16: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt128 = 2;
            	        	    int LA128_0 = input.LA(1);

            	        	    if ( (LA128_0 == LineTerminator) )
            	        	    {
            	        	        alt128 = 1;
            	        	    }


            	        	    switch (alt128) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator247=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_variableDeclaration4978); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator247_tree = (CommonTree)adaptor.Create(LineTerminator247);
            	        			    		adaptor.AddChild(root_0, LineTerminator247_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop128;
            	        	    }
            	        	} while (true);

            	        	loop128:
            	        		;	// Stops C# compiler whining that label 'loop128' has no statements

            	        	char_literal248=(IToken)Match(input,43,FOLLOW_43_in_variableDeclaration4981); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal248_tree = (CommonTree)adaptor.Create(char_literal248);
            	        		adaptor.AddChild(root_0, char_literal248_tree);
            	        	}
            	        	// AS3.g:958:36: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt129 = 2;
            	        	    int LA129_0 = input.LA(1);

            	        	    if ( (LA129_0 == LineTerminator) )
            	        	    {
            	        	        alt129 = 1;
            	        	    }


            	        	    switch (alt129) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator249=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_variableDeclaration4983); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator249_tree = (CommonTree)adaptor.Create(LineTerminator249);
            	        			    		adaptor.AddChild(root_0, LineTerminator249_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop129;
            	        	    }
            	        	} while (true);

            	        	loop129:
            	        		;	// Stops C# compiler whining that label 'loop129' has no statements

            	        	Identifier250=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration4986); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{Identifier250_tree = (CommonTree)adaptor.Create(Identifier250);
            	        		adaptor.AddChild(root_0, Identifier250_tree);
            	        	}

            	        }
            	        break;

            	}

            	// AS3.g:958:65: ( LineTerminator )*
            	do 
            	{
            	    int alt131 = 2;
            	    alt131 = dfa131.Predict(input);
            	    switch (alt131) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator251=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_variableDeclaration4990); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator251_tree = (CommonTree)adaptor.Create(LineTerminator251);
            			    		adaptor.AddChild(root_0, LineTerminator251_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop131;
            	    }
            	} while (true);

            	loop131:
            		;	// Stops C# compiler whining that label 'loop131' has no statements

            	// AS3.g:958:81: ( initialiser )?
            	int alt132 = 2;
            	int LA132_0 = input.LA(1);

            	if ( (LA132_0 == 77) )
            	{
            	    alt132 = 1;
            	}
            	switch (alt132) 
            	{
            	    case 1 :
            	        // AS3.g:0:0: initialiser
            	        {
            	        	PushFollow(FOLLOW_initialiser_in_variableDeclaration4993);
            	        	initialiser252 = initialiser();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, initialiser252.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 49, variableDeclaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaration"

    public class variableDeclarationNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "variableDeclarationNoIn"
    // AS3.g:961:1: variableDeclarationNoIn : Identifier ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )? ( LineTerminator )* ( initialiserNoIn )? ;
    public AS3Parser.variableDeclarationNoIn_return variableDeclarationNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.variableDeclarationNoIn_return retval = new AS3Parser.variableDeclarationNoIn_return();
        retval.Start = input.LT(1);
        int variableDeclarationNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken Identifier253 = null;
        IToken LineTerminator254 = null;
        IToken char_literal255 = null;
        IToken LineTerminator256 = null;
        IToken Identifier257 = null;
        IToken LineTerminator258 = null;
        AS3Parser.initialiserNoIn_return initialiserNoIn259 = default(AS3Parser.initialiserNoIn_return);


        CommonTree Identifier253_tree=null;
        CommonTree LineTerminator254_tree=null;
        CommonTree char_literal255_tree=null;
        CommonTree LineTerminator256_tree=null;
        CommonTree Identifier257_tree=null;
        CommonTree LineTerminator258_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 50) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:962:2: ( Identifier ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )? ( LineTerminator )* ( initialiserNoIn )? )
            // AS3.g:962:4: Identifier ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )? ( LineTerminator )* ( initialiserNoIn )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	Identifier253=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_variableDeclarationNoIn5005); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{Identifier253_tree = (CommonTree)adaptor.Create(Identifier253);
            		adaptor.AddChild(root_0, Identifier253_tree);
            	}
            	// AS3.g:962:15: ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )?
            	int alt135 = 2;
            	alt135 = dfa135.Predict(input);
            	switch (alt135) 
            	{
            	    case 1 :
            	        // AS3.g:962:16: ( LineTerminator )* ':' ( LineTerminator )* Identifier
            	        {
            	        	// AS3.g:962:16: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt133 = 2;
            	        	    int LA133_0 = input.LA(1);

            	        	    if ( (LA133_0 == LineTerminator) )
            	        	    {
            	        	        alt133 = 1;
            	        	    }


            	        	    switch (alt133) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator254=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_variableDeclarationNoIn5008); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator254_tree = (CommonTree)adaptor.Create(LineTerminator254);
            	        			    		adaptor.AddChild(root_0, LineTerminator254_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop133;
            	        	    }
            	        	} while (true);

            	        	loop133:
            	        		;	// Stops C# compiler whining that label 'loop133' has no statements

            	        	char_literal255=(IToken)Match(input,43,FOLLOW_43_in_variableDeclarationNoIn5011); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal255_tree = (CommonTree)adaptor.Create(char_literal255);
            	        		adaptor.AddChild(root_0, char_literal255_tree);
            	        	}
            	        	// AS3.g:962:36: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt134 = 2;
            	        	    int LA134_0 = input.LA(1);

            	        	    if ( (LA134_0 == LineTerminator) )
            	        	    {
            	        	        alt134 = 1;
            	        	    }


            	        	    switch (alt134) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator256=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_variableDeclarationNoIn5013); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator256_tree = (CommonTree)adaptor.Create(LineTerminator256);
            	        			    		adaptor.AddChild(root_0, LineTerminator256_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop134;
            	        	    }
            	        	} while (true);

            	        	loop134:
            	        		;	// Stops C# compiler whining that label 'loop134' has no statements

            	        	Identifier257=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_variableDeclarationNoIn5016); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{Identifier257_tree = (CommonTree)adaptor.Create(Identifier257);
            	        		adaptor.AddChild(root_0, Identifier257_tree);
            	        	}

            	        }
            	        break;

            	}

            	// AS3.g:962:65: ( LineTerminator )*
            	do 
            	{
            	    int alt136 = 2;
            	    alt136 = dfa136.Predict(input);
            	    switch (alt136) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator258=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_variableDeclarationNoIn5020); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator258_tree = (CommonTree)adaptor.Create(LineTerminator258);
            			    		adaptor.AddChild(root_0, LineTerminator258_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop136;
            	    }
            	} while (true);

            	loop136:
            		;	// Stops C# compiler whining that label 'loop136' has no statements

            	// AS3.g:962:81: ( initialiserNoIn )?
            	int alt137 = 2;
            	int LA137_0 = input.LA(1);

            	if ( (LA137_0 == 77) )
            	{
            	    alt137 = 1;
            	}
            	switch (alt137) 
            	{
            	    case 1 :
            	        // AS3.g:0:0: initialiserNoIn
            	        {
            	        	PushFollow(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn5023);
            	        	initialiserNoIn259 = initialiserNoIn();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, initialiserNoIn259.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 50, variableDeclarationNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarationNoIn"

    public class initialiser_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "initialiser"
    // AS3.g:965:1: initialiser : '=' ( LineTerminator )* assignmentExpression ;
    public AS3Parser.initialiser_return initialiser() // throws RecognitionException [1]
    {   
        AS3Parser.initialiser_return retval = new AS3Parser.initialiser_return();
        retval.Start = input.LT(1);
        int initialiser_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal260 = null;
        IToken LineTerminator261 = null;
        AS3Parser.assignmentExpression_return assignmentExpression262 = default(AS3Parser.assignmentExpression_return);


        CommonTree char_literal260_tree=null;
        CommonTree LineTerminator261_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 51) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:966:2: ( '=' ( LineTerminator )* assignmentExpression )
            // AS3.g:966:4: '=' ( LineTerminator )* assignmentExpression
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal260=(IToken)Match(input,77,FOLLOW_77_in_initialiser5035); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal260_tree = (CommonTree)adaptor.Create(char_literal260);
            		adaptor.AddChild(root_0, char_literal260_tree);
            	}
            	// AS3.g:966:8: ( LineTerminator )*
            	do 
            	{
            	    int alt138 = 2;
            	    alt138 = dfa138.Predict(input);
            	    switch (alt138) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator261=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_initialiser5037); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator261_tree = (CommonTree)adaptor.Create(LineTerminator261);
            			    		adaptor.AddChild(root_0, LineTerminator261_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop138;
            	    }
            	} while (true);

            	loop138:
            		;	// Stops C# compiler whining that label 'loop138' has no statements

            	PushFollow(FOLLOW_assignmentExpression_in_initialiser5040);
            	assignmentExpression262 = assignmentExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpression262.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 51, initialiser_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "initialiser"

    public class initialiserNoIn_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "initialiserNoIn"
    // AS3.g:969:1: initialiserNoIn : '=' ( LineTerminator )* assignmentExpressionNoIn ;
    public AS3Parser.initialiserNoIn_return initialiserNoIn() // throws RecognitionException [1]
    {   
        AS3Parser.initialiserNoIn_return retval = new AS3Parser.initialiserNoIn_return();
        retval.Start = input.LT(1);
        int initialiserNoIn_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal263 = null;
        IToken LineTerminator264 = null;
        AS3Parser.assignmentExpressionNoIn_return assignmentExpressionNoIn265 = default(AS3Parser.assignmentExpressionNoIn_return);


        CommonTree char_literal263_tree=null;
        CommonTree LineTerminator264_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 52) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:970:2: ( '=' ( LineTerminator )* assignmentExpressionNoIn )
            // AS3.g:970:4: '=' ( LineTerminator )* assignmentExpressionNoIn
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal263=(IToken)Match(input,77,FOLLOW_77_in_initialiserNoIn5052); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal263_tree = (CommonTree)adaptor.Create(char_literal263);
            		adaptor.AddChild(root_0, char_literal263_tree);
            	}
            	// AS3.g:970:8: ( LineTerminator )*
            	do 
            	{
            	    int alt139 = 2;
            	    alt139 = dfa139.Predict(input);
            	    switch (alt139) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator264=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_initialiserNoIn5054); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator264_tree = (CommonTree)adaptor.Create(LineTerminator264);
            			    		adaptor.AddChild(root_0, LineTerminator264_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop139;
            	    }
            	} while (true);

            	loop139:
            		;	// Stops C# compiler whining that label 'loop139' has no statements

            	PushFollow(FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn5057);
            	assignmentExpressionNoIn265 = assignmentExpressionNoIn();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignmentExpressionNoIn265.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 52, initialiserNoIn_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "initialiserNoIn"

    public class emptyStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "emptyStatement"
    // AS3.g:973:1: emptyStatement : ';' ;
    public AS3Parser.emptyStatement_return emptyStatement() // throws RecognitionException [1]
    {   
        AS3Parser.emptyStatement_return retval = new AS3Parser.emptyStatement_return();
        retval.Start = input.LT(1);
        int emptyStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal266 = null;

        CommonTree char_literal266_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 53) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:974:2: ( ';' )
            // AS3.g:974:4: ';'
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal266=(IToken)Match(input,90,FOLLOW_90_in_emptyStatement5069); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal266_tree = (CommonTree)adaptor.Create(char_literal266);
            		adaptor.AddChild(root_0, char_literal266_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 53, emptyStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "emptyStatement"

    public class expressionStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "expressionStatement"
    // AS3.g:977:1: expressionStatement : expression ( ( LineTerminator )* | ';' ) ;
    public AS3Parser.expressionStatement_return expressionStatement() // throws RecognitionException [1]
    {   
        AS3Parser.expressionStatement_return retval = new AS3Parser.expressionStatement_return();
        retval.Start = input.LT(1);
        int expressionStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator268 = null;
        IToken char_literal269 = null;
        AS3Parser.expression_return expression267 = default(AS3Parser.expression_return);


        CommonTree LineTerminator268_tree=null;
        CommonTree char_literal269_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 54) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:978:2: ( expression ( ( LineTerminator )* | ';' ) )
            // AS3.g:978:4: expression ( ( LineTerminator )* | ';' )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_expression_in_expressionStatement5081);
            	expression267 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression267.Tree);
            	// AS3.g:978:15: ( ( LineTerminator )* | ';' )
            	int alt141 = 2;
            	alt141 = dfa141.Predict(input);
            	switch (alt141) 
            	{
            	    case 1 :
            	        // AS3.g:978:16: ( LineTerminator )*
            	        {
            	        	// AS3.g:978:16: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt140 = 2;
            	        	    alt140 = dfa140.Predict(input);
            	        	    switch (alt140) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator268=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_expressionStatement5084); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator268_tree = (CommonTree)adaptor.Create(LineTerminator268);
            	        			    		adaptor.AddChild(root_0, LineTerminator268_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop140;
            	        	    }
            	        	} while (true);

            	        	loop140:
            	        		;	// Stops C# compiler whining that label 'loop140' has no statements


            	        }
            	        break;
            	    case 2 :
            	        // AS3.g:978:34: ';'
            	        {
            	        	char_literal269=(IToken)Match(input,90,FOLLOW_90_in_expressionStatement5089); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal269_tree = (CommonTree)adaptor.Create(char_literal269);
            	        		adaptor.AddChild(root_0, char_literal269_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 54, expressionStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "expressionStatement"

    public class ifStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "ifStatement"
    // AS3.g:981:1: ifStatement : 'if' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ( ( LineTerminator )* 'else' ( LineTerminator )* statement )? ;
    public AS3Parser.ifStatement_return ifStatement() // throws RecognitionException [1]
    {   
        AS3Parser.ifStatement_return retval = new AS3Parser.ifStatement_return();
        retval.Start = input.LT(1);
        int ifStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal270 = null;
        IToken LineTerminator271 = null;
        IToken char_literal272 = null;
        IToken LineTerminator273 = null;
        IToken LineTerminator275 = null;
        IToken char_literal276 = null;
        IToken LineTerminator277 = null;
        IToken LineTerminator279 = null;
        IToken string_literal280 = null;
        IToken LineTerminator281 = null;
        AS3Parser.expression_return expression274 = default(AS3Parser.expression_return);

        AS3Parser.statement_return statement278 = default(AS3Parser.statement_return);

        AS3Parser.statement_return statement282 = default(AS3Parser.statement_return);


        CommonTree string_literal270_tree=null;
        CommonTree LineTerminator271_tree=null;
        CommonTree char_literal272_tree=null;
        CommonTree LineTerminator273_tree=null;
        CommonTree LineTerminator275_tree=null;
        CommonTree char_literal276_tree=null;
        CommonTree LineTerminator277_tree=null;
        CommonTree LineTerminator279_tree=null;
        CommonTree string_literal280_tree=null;
        CommonTree LineTerminator281_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 55) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:982:2: ( 'if' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ( ( LineTerminator )* 'else' ( LineTerminator )* statement )? )
            // AS3.g:982:4: 'if' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ( ( LineTerminator )* 'else' ( LineTerminator )* statement )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal270=(IToken)Match(input,91,FOLLOW_91_in_ifStatement5101); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal270_tree = (CommonTree)adaptor.Create(string_literal270);
            		adaptor.AddChild(root_0, string_literal270_tree);
            	}
            	// AS3.g:982:9: ( LineTerminator )*
            	do 
            	{
            	    int alt142 = 2;
            	    int LA142_0 = input.LA(1);

            	    if ( (LA142_0 == LineTerminator) )
            	    {
            	        alt142 = 1;
            	    }


            	    switch (alt142) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator271=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_ifStatement5103); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator271_tree = (CommonTree)adaptor.Create(LineTerminator271);
            			    		adaptor.AddChild(root_0, LineTerminator271_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop142;
            	    }
            	} while (true);

            	loop142:
            		;	// Stops C# compiler whining that label 'loop142' has no statements

            	char_literal272=(IToken)Match(input,36,FOLLOW_36_in_ifStatement5106); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal272_tree = (CommonTree)adaptor.Create(char_literal272);
            		adaptor.AddChild(root_0, char_literal272_tree);
            	}
            	// AS3.g:982:29: ( LineTerminator )*
            	do 
            	{
            	    int alt143 = 2;
            	    alt143 = dfa143.Predict(input);
            	    switch (alt143) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator273=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_ifStatement5108); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator273_tree = (CommonTree)adaptor.Create(LineTerminator273);
            			    		adaptor.AddChild(root_0, LineTerminator273_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop143;
            	    }
            	} while (true);

            	loop143:
            		;	// Stops C# compiler whining that label 'loop143' has no statements

            	PushFollow(FOLLOW_expression_in_ifStatement5111);
            	expression274 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression274.Tree);
            	// AS3.g:982:56: ( LineTerminator )*
            	do 
            	{
            	    int alt144 = 2;
            	    int LA144_0 = input.LA(1);

            	    if ( (LA144_0 == LineTerminator) )
            	    {
            	        alt144 = 1;
            	    }


            	    switch (alt144) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator275=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_ifStatement5113); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator275_tree = (CommonTree)adaptor.Create(LineTerminator275);
            			    		adaptor.AddChild(root_0, LineTerminator275_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop144;
            	    }
            	} while (true);

            	loop144:
            		;	// Stops C# compiler whining that label 'loop144' has no statements

            	char_literal276=(IToken)Match(input,37,FOLLOW_37_in_ifStatement5116); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal276_tree = (CommonTree)adaptor.Create(char_literal276);
            		adaptor.AddChild(root_0, char_literal276_tree);
            	}
            	// AS3.g:982:76: ( LineTerminator )*
            	do 
            	{
            	    int alt145 = 2;
            	    alt145 = dfa145.Predict(input);
            	    switch (alt145) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator277=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_ifStatement5118); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator277_tree = (CommonTree)adaptor.Create(LineTerminator277);
            			    		adaptor.AddChild(root_0, LineTerminator277_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop145;
            	    }
            	} while (true);

            	loop145:
            		;	// Stops C# compiler whining that label 'loop145' has no statements

            	PushFollow(FOLLOW_statement_in_ifStatement5121);
            	statement278 = statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement278.Tree);
            	// AS3.g:982:102: ( ( LineTerminator )* 'else' ( LineTerminator )* statement )?
            	int alt148 = 2;
            	alt148 = dfa148.Predict(input);
            	switch (alt148) 
            	{
            	    case 1 :
            	        // AS3.g:982:103: ( LineTerminator )* 'else' ( LineTerminator )* statement
            	        {
            	        	// AS3.g:982:103: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt146 = 2;
            	        	    int LA146_0 = input.LA(1);

            	        	    if ( (LA146_0 == LineTerminator) )
            	        	    {
            	        	        alt146 = 1;
            	        	    }


            	        	    switch (alt146) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator279=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_ifStatement5124); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator279_tree = (CommonTree)adaptor.Create(LineTerminator279);
            	        			    		adaptor.AddChild(root_0, LineTerminator279_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop146;
            	        	    }
            	        	} while (true);

            	        	loop146:
            	        		;	// Stops C# compiler whining that label 'loop146' has no statements

            	        	string_literal280=(IToken)Match(input,92,FOLLOW_92_in_ifStatement5127); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal280_tree = (CommonTree)adaptor.Create(string_literal280);
            	        		adaptor.AddChild(root_0, string_literal280_tree);
            	        	}
            	        	// AS3.g:982:126: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt147 = 2;
            	        	    alt147 = dfa147.Predict(input);
            	        	    switch (alt147) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator281=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_ifStatement5129); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator281_tree = (CommonTree)adaptor.Create(LineTerminator281);
            	        			    		adaptor.AddChild(root_0, LineTerminator281_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop147;
            	        	    }
            	        	} while (true);

            	        	loop147:
            	        		;	// Stops C# compiler whining that label 'loop147' has no statements

            	        	PushFollow(FOLLOW_statement_in_ifStatement5132);
            	        	statement282 = statement();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement282.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 55, ifStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "ifStatement"

    public class iterationStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "iterationStatement"
    // AS3.g:985:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
    public AS3Parser.iterationStatement_return iterationStatement() // throws RecognitionException [1]
    {   
        AS3Parser.iterationStatement_return retval = new AS3Parser.iterationStatement_return();
        retval.Start = input.LT(1);
        int iterationStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        AS3Parser.doWhileStatement_return doWhileStatement283 = default(AS3Parser.doWhileStatement_return);

        AS3Parser.whileStatement_return whileStatement284 = default(AS3Parser.whileStatement_return);

        AS3Parser.forStatement_return forStatement285 = default(AS3Parser.forStatement_return);

        AS3Parser.forInStatement_return forInStatement286 = default(AS3Parser.forInStatement_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 56) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:986:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            int alt149 = 4;
            switch ( input.LA(1) ) 
            {
            case 93:
            	{
                alt149 = 1;
                }
                break;
            case 94:
            	{
                alt149 = 2;
                }
                break;
            case 95:
            	{
                int LA149_3 = input.LA(2);

                if ( (LA149_3 == LineTerminator) )
                {
                    int LA149_4 = input.LA(3);

                    if ( (synpred215_AS3()) )
                    {
                        alt149 = 3;
                    }
                    else if ( (true) )
                    {
                        alt149 = 4;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d149s4 =
                            new NoViableAltException("", 149, 4, input);

                        throw nvae_d149s4;
                    }
                }
                else if ( (LA149_3 == 36) )
                {
                    int LA149_5 = input.LA(3);

                    if ( (synpred215_AS3()) )
                    {
                        alt149 = 3;
                    }
                    else if ( (true) )
                    {
                        alt149 = 4;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d149s5 =
                            new NoViableAltException("", 149, 5, input);

                        throw nvae_d149s5;
                    }
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d149s3 =
                        new NoViableAltException("", 149, 3, input);

                    throw nvae_d149s3;
                }
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d149s0 =
            	        new NoViableAltException("", 149, 0, input);

            	    throw nvae_d149s0;
            }

            switch (alt149) 
            {
                case 1 :
                    // AS3.g:986:4: doWhileStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_doWhileStatement_in_iterationStatement5145);
                    	doWhileStatement283 = doWhileStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, doWhileStatement283.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:987:4: whileStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_whileStatement_in_iterationStatement5150);
                    	whileStatement284 = whileStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, whileStatement284.Tree);

                    }
                    break;
                case 3 :
                    // AS3.g:988:4: forStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_forStatement_in_iterationStatement5155);
                    	forStatement285 = forStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, forStatement285.Tree);

                    }
                    break;
                case 4 :
                    // AS3.g:989:4: forInStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_forInStatement_in_iterationStatement5160);
                    	forInStatement286 = forInStatement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, forInStatement286.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 56, iterationStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "iterationStatement"

    public class doWhileStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "doWhileStatement"
    // AS3.g:992:1: doWhileStatement : 'do' ( LineTerminator )* statement ( LineTerminator )* 'while' ( LineTerminator )* '(' expression ')' ( LineTerminator | ';' ) ;
    public AS3Parser.doWhileStatement_return doWhileStatement() // throws RecognitionException [1]
    {   
        AS3Parser.doWhileStatement_return retval = new AS3Parser.doWhileStatement_return();
        retval.Start = input.LT(1);
        int doWhileStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal287 = null;
        IToken LineTerminator288 = null;
        IToken LineTerminator290 = null;
        IToken string_literal291 = null;
        IToken LineTerminator292 = null;
        IToken char_literal293 = null;
        IToken char_literal295 = null;
        IToken set296 = null;
        AS3Parser.statement_return statement289 = default(AS3Parser.statement_return);

        AS3Parser.expression_return expression294 = default(AS3Parser.expression_return);


        CommonTree string_literal287_tree=null;
        CommonTree LineTerminator288_tree=null;
        CommonTree LineTerminator290_tree=null;
        CommonTree string_literal291_tree=null;
        CommonTree LineTerminator292_tree=null;
        CommonTree char_literal293_tree=null;
        CommonTree char_literal295_tree=null;
        CommonTree set296_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 57) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:993:2: ( 'do' ( LineTerminator )* statement ( LineTerminator )* 'while' ( LineTerminator )* '(' expression ')' ( LineTerminator | ';' ) )
            // AS3.g:993:4: 'do' ( LineTerminator )* statement ( LineTerminator )* 'while' ( LineTerminator )* '(' expression ')' ( LineTerminator | ';' )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal287=(IToken)Match(input,93,FOLLOW_93_in_doWhileStatement5172); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal287_tree = (CommonTree)adaptor.Create(string_literal287);
            		adaptor.AddChild(root_0, string_literal287_tree);
            	}
            	// AS3.g:993:9: ( LineTerminator )*
            	do 
            	{
            	    int alt150 = 2;
            	    alt150 = dfa150.Predict(input);
            	    switch (alt150) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator288=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_doWhileStatement5174); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator288_tree = (CommonTree)adaptor.Create(LineTerminator288);
            			    		adaptor.AddChild(root_0, LineTerminator288_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop150;
            	    }
            	} while (true);

            	loop150:
            		;	// Stops C# compiler whining that label 'loop150' has no statements

            	PushFollow(FOLLOW_statement_in_doWhileStatement5177);
            	statement289 = statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement289.Tree);
            	// AS3.g:993:35: ( LineTerminator )*
            	do 
            	{
            	    int alt151 = 2;
            	    int LA151_0 = input.LA(1);

            	    if ( (LA151_0 == LineTerminator) )
            	    {
            	        alt151 = 1;
            	    }


            	    switch (alt151) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator290=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_doWhileStatement5179); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator290_tree = (CommonTree)adaptor.Create(LineTerminator290);
            			    		adaptor.AddChild(root_0, LineTerminator290_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop151;
            	    }
            	} while (true);

            	loop151:
            		;	// Stops C# compiler whining that label 'loop151' has no statements

            	string_literal291=(IToken)Match(input,94,FOLLOW_94_in_doWhileStatement5182); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal291_tree = (CommonTree)adaptor.Create(string_literal291);
            		adaptor.AddChild(root_0, string_literal291_tree);
            	}
            	// AS3.g:993:59: ( LineTerminator )*
            	do 
            	{
            	    int alt152 = 2;
            	    int LA152_0 = input.LA(1);

            	    if ( (LA152_0 == LineTerminator) )
            	    {
            	        alt152 = 1;
            	    }


            	    switch (alt152) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator292=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_doWhileStatement5184); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator292_tree = (CommonTree)adaptor.Create(LineTerminator292);
            			    		adaptor.AddChild(root_0, LineTerminator292_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop152;
            	    }
            	} while (true);

            	loop152:
            		;	// Stops C# compiler whining that label 'loop152' has no statements

            	char_literal293=(IToken)Match(input,36,FOLLOW_36_in_doWhileStatement5187); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal293_tree = (CommonTree)adaptor.Create(char_literal293);
            		adaptor.AddChild(root_0, char_literal293_tree);
            	}
            	PushFollow(FOLLOW_expression_in_doWhileStatement5189);
            	expression294 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression294.Tree);
            	char_literal295=(IToken)Match(input,37,FOLLOW_37_in_doWhileStatement5191); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal295_tree = (CommonTree)adaptor.Create(char_literal295);
            		adaptor.AddChild(root_0, char_literal295_tree);
            	}
            	set296 = (IToken)input.LT(1);
            	if ( input.LA(1) == LineTerminator || input.LA(1) == 90 ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set296));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 57, doWhileStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "doWhileStatement"

    public class whileStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "whileStatement"
    // AS3.g:996:1: whileStatement : 'while' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ;
    public AS3Parser.whileStatement_return whileStatement() // throws RecognitionException [1]
    {   
        AS3Parser.whileStatement_return retval = new AS3Parser.whileStatement_return();
        retval.Start = input.LT(1);
        int whileStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal297 = null;
        IToken LineTerminator298 = null;
        IToken char_literal299 = null;
        IToken LineTerminator300 = null;
        IToken LineTerminator302 = null;
        IToken char_literal303 = null;
        IToken LineTerminator304 = null;
        AS3Parser.expression_return expression301 = default(AS3Parser.expression_return);

        AS3Parser.statement_return statement305 = default(AS3Parser.statement_return);


        CommonTree string_literal297_tree=null;
        CommonTree LineTerminator298_tree=null;
        CommonTree char_literal299_tree=null;
        CommonTree LineTerminator300_tree=null;
        CommonTree LineTerminator302_tree=null;
        CommonTree char_literal303_tree=null;
        CommonTree LineTerminator304_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 58) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:997:2: ( 'while' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement )
            // AS3.g:997:4: 'while' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal297=(IToken)Match(input,94,FOLLOW_94_in_whileStatement5211); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal297_tree = (CommonTree)adaptor.Create(string_literal297);
            		adaptor.AddChild(root_0, string_literal297_tree);
            	}
            	// AS3.g:997:12: ( LineTerminator )*
            	do 
            	{
            	    int alt153 = 2;
            	    int LA153_0 = input.LA(1);

            	    if ( (LA153_0 == LineTerminator) )
            	    {
            	        alt153 = 1;
            	    }


            	    switch (alt153) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator298=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_whileStatement5213); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator298_tree = (CommonTree)adaptor.Create(LineTerminator298);
            			    		adaptor.AddChild(root_0, LineTerminator298_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop153;
            	    }
            	} while (true);

            	loop153:
            		;	// Stops C# compiler whining that label 'loop153' has no statements

            	char_literal299=(IToken)Match(input,36,FOLLOW_36_in_whileStatement5216); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal299_tree = (CommonTree)adaptor.Create(char_literal299);
            		adaptor.AddChild(root_0, char_literal299_tree);
            	}
            	// AS3.g:997:32: ( LineTerminator )*
            	do 
            	{
            	    int alt154 = 2;
            	    alt154 = dfa154.Predict(input);
            	    switch (alt154) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator300=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_whileStatement5218); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator300_tree = (CommonTree)adaptor.Create(LineTerminator300);
            			    		adaptor.AddChild(root_0, LineTerminator300_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop154;
            	    }
            	} while (true);

            	loop154:
            		;	// Stops C# compiler whining that label 'loop154' has no statements

            	PushFollow(FOLLOW_expression_in_whileStatement5221);
            	expression301 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression301.Tree);
            	// AS3.g:997:59: ( LineTerminator )*
            	do 
            	{
            	    int alt155 = 2;
            	    int LA155_0 = input.LA(1);

            	    if ( (LA155_0 == LineTerminator) )
            	    {
            	        alt155 = 1;
            	    }


            	    switch (alt155) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator302=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_whileStatement5223); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator302_tree = (CommonTree)adaptor.Create(LineTerminator302);
            			    		adaptor.AddChild(root_0, LineTerminator302_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop155;
            	    }
            	} while (true);

            	loop155:
            		;	// Stops C# compiler whining that label 'loop155' has no statements

            	char_literal303=(IToken)Match(input,37,FOLLOW_37_in_whileStatement5226); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal303_tree = (CommonTree)adaptor.Create(char_literal303);
            		adaptor.AddChild(root_0, char_literal303_tree);
            	}
            	// AS3.g:997:79: ( LineTerminator )*
            	do 
            	{
            	    int alt156 = 2;
            	    alt156 = dfa156.Predict(input);
            	    switch (alt156) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator304=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_whileStatement5228); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator304_tree = (CommonTree)adaptor.Create(LineTerminator304);
            			    		adaptor.AddChild(root_0, LineTerminator304_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop156;
            	    }
            	} while (true);

            	loop156:
            		;	// Stops C# compiler whining that label 'loop156' has no statements

            	PushFollow(FOLLOW_statement_in_whileStatement5231);
            	statement305 = statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement305.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 58, whileStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "whileStatement"

    public class forStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "forStatement"
    // AS3.g:1000:1: forStatement : 'for' ( LineTerminator )* '(' ( ( LineTerminator )* forStatementInitialiserPart )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ')' ( LineTerminator )* statement ;
    public AS3Parser.forStatement_return forStatement() // throws RecognitionException [1]
    {   
        AS3Parser.forStatement_return retval = new AS3Parser.forStatement_return();
        retval.Start = input.LT(1);
        int forStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal306 = null;
        IToken LineTerminator307 = null;
        IToken char_literal308 = null;
        IToken LineTerminator309 = null;
        IToken LineTerminator311 = null;
        IToken char_literal312 = null;
        IToken LineTerminator313 = null;
        IToken LineTerminator315 = null;
        IToken char_literal316 = null;
        IToken LineTerminator317 = null;
        IToken LineTerminator319 = null;
        IToken char_literal320 = null;
        IToken LineTerminator321 = null;
        AS3Parser.forStatementInitialiserPart_return forStatementInitialiserPart310 = default(AS3Parser.forStatementInitialiserPart_return);

        AS3Parser.expression_return expression314 = default(AS3Parser.expression_return);

        AS3Parser.expression_return expression318 = default(AS3Parser.expression_return);

        AS3Parser.statement_return statement322 = default(AS3Parser.statement_return);


        CommonTree string_literal306_tree=null;
        CommonTree LineTerminator307_tree=null;
        CommonTree char_literal308_tree=null;
        CommonTree LineTerminator309_tree=null;
        CommonTree LineTerminator311_tree=null;
        CommonTree char_literal312_tree=null;
        CommonTree LineTerminator313_tree=null;
        CommonTree LineTerminator315_tree=null;
        CommonTree char_literal316_tree=null;
        CommonTree LineTerminator317_tree=null;
        CommonTree LineTerminator319_tree=null;
        CommonTree char_literal320_tree=null;
        CommonTree LineTerminator321_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 59) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1001:2: ( 'for' ( LineTerminator )* '(' ( ( LineTerminator )* forStatementInitialiserPart )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ')' ( LineTerminator )* statement )
            // AS3.g:1001:4: 'for' ( LineTerminator )* '(' ( ( LineTerminator )* forStatementInitialiserPart )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ')' ( LineTerminator )* statement
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal306=(IToken)Match(input,95,FOLLOW_95_in_forStatement5243); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal306_tree = (CommonTree)adaptor.Create(string_literal306);
            		adaptor.AddChild(root_0, string_literal306_tree);
            	}
            	// AS3.g:1001:10: ( LineTerminator )*
            	do 
            	{
            	    int alt157 = 2;
            	    int LA157_0 = input.LA(1);

            	    if ( (LA157_0 == LineTerminator) )
            	    {
            	        alt157 = 1;
            	    }


            	    switch (alt157) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator307=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forStatement5245); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator307_tree = (CommonTree)adaptor.Create(LineTerminator307);
            			    		adaptor.AddChild(root_0, LineTerminator307_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop157;
            	    }
            	} while (true);

            	loop157:
            		;	// Stops C# compiler whining that label 'loop157' has no statements

            	char_literal308=(IToken)Match(input,36,FOLLOW_36_in_forStatement5248); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal308_tree = (CommonTree)adaptor.Create(char_literal308);
            		adaptor.AddChild(root_0, char_literal308_tree);
            	}
            	// AS3.g:1001:30: ( ( LineTerminator )* forStatementInitialiserPart )?
            	int alt159 = 2;
            	alt159 = dfa159.Predict(input);
            	switch (alt159) 
            	{
            	    case 1 :
            	        // AS3.g:1001:31: ( LineTerminator )* forStatementInitialiserPart
            	        {
            	        	// AS3.g:1001:31: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt158 = 2;
            	        	    alt158 = dfa158.Predict(input);
            	        	    switch (alt158) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator309=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forStatement5251); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator309_tree = (CommonTree)adaptor.Create(LineTerminator309);
            	        			    		adaptor.AddChild(root_0, LineTerminator309_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop158;
            	        	    }
            	        	} while (true);

            	        	loop158:
            	        		;	// Stops C# compiler whining that label 'loop158' has no statements

            	        	PushFollow(FOLLOW_forStatementInitialiserPart_in_forStatement5254);
            	        	forStatementInitialiserPart310 = forStatementInitialiserPart();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, forStatementInitialiserPart310.Tree);

            	        }
            	        break;

            	}

            	// AS3.g:1001:77: ( LineTerminator )*
            	do 
            	{
            	    int alt160 = 2;
            	    int LA160_0 = input.LA(1);

            	    if ( (LA160_0 == LineTerminator) )
            	    {
            	        alt160 = 1;
            	    }


            	    switch (alt160) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator311=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forStatement5258); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator311_tree = (CommonTree)adaptor.Create(LineTerminator311);
            			    		adaptor.AddChild(root_0, LineTerminator311_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop160;
            	    }
            	} while (true);

            	loop160:
            		;	// Stops C# compiler whining that label 'loop160' has no statements

            	char_literal312=(IToken)Match(input,90,FOLLOW_90_in_forStatement5261); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal312_tree = (CommonTree)adaptor.Create(char_literal312);
            		adaptor.AddChild(root_0, char_literal312_tree);
            	}
            	// AS3.g:1001:97: ( ( LineTerminator )* expression )?
            	int alt162 = 2;
            	alt162 = dfa162.Predict(input);
            	switch (alt162) 
            	{
            	    case 1 :
            	        // AS3.g:1001:98: ( LineTerminator )* expression
            	        {
            	        	// AS3.g:1001:98: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt161 = 2;
            	        	    alt161 = dfa161.Predict(input);
            	        	    switch (alt161) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator313=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forStatement5264); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator313_tree = (CommonTree)adaptor.Create(LineTerminator313);
            	        			    		adaptor.AddChild(root_0, LineTerminator313_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop161;
            	        	    }
            	        	} while (true);

            	        	loop161:
            	        		;	// Stops C# compiler whining that label 'loop161' has no statements

            	        	PushFollow(FOLLOW_expression_in_forStatement5267);
            	        	expression314 = expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression314.Tree);

            	        }
            	        break;

            	}

            	// AS3.g:1001:127: ( LineTerminator )*
            	do 
            	{
            	    int alt163 = 2;
            	    int LA163_0 = input.LA(1);

            	    if ( (LA163_0 == LineTerminator) )
            	    {
            	        alt163 = 1;
            	    }


            	    switch (alt163) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator315=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forStatement5271); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator315_tree = (CommonTree)adaptor.Create(LineTerminator315);
            			    		adaptor.AddChild(root_0, LineTerminator315_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop163;
            	    }
            	} while (true);

            	loop163:
            		;	// Stops C# compiler whining that label 'loop163' has no statements

            	char_literal316=(IToken)Match(input,90,FOLLOW_90_in_forStatement5274); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal316_tree = (CommonTree)adaptor.Create(char_literal316);
            		adaptor.AddChild(root_0, char_literal316_tree);
            	}
            	// AS3.g:1001:147: ( ( LineTerminator )* expression )?
            	int alt165 = 2;
            	alt165 = dfa165.Predict(input);
            	switch (alt165) 
            	{
            	    case 1 :
            	        // AS3.g:1001:148: ( LineTerminator )* expression
            	        {
            	        	// AS3.g:1001:148: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt164 = 2;
            	        	    alt164 = dfa164.Predict(input);
            	        	    switch (alt164) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator317=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forStatement5277); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator317_tree = (CommonTree)adaptor.Create(LineTerminator317);
            	        			    		adaptor.AddChild(root_0, LineTerminator317_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop164;
            	        	    }
            	        	} while (true);

            	        	loop164:
            	        		;	// Stops C# compiler whining that label 'loop164' has no statements

            	        	PushFollow(FOLLOW_expression_in_forStatement5280);
            	        	expression318 = expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression318.Tree);

            	        }
            	        break;

            	}

            	// AS3.g:1001:177: ( LineTerminator )*
            	do 
            	{
            	    int alt166 = 2;
            	    int LA166_0 = input.LA(1);

            	    if ( (LA166_0 == LineTerminator) )
            	    {
            	        alt166 = 1;
            	    }


            	    switch (alt166) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator319=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forStatement5284); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator319_tree = (CommonTree)adaptor.Create(LineTerminator319);
            			    		adaptor.AddChild(root_0, LineTerminator319_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop166;
            	    }
            	} while (true);

            	loop166:
            		;	// Stops C# compiler whining that label 'loop166' has no statements

            	char_literal320=(IToken)Match(input,37,FOLLOW_37_in_forStatement5287); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal320_tree = (CommonTree)adaptor.Create(char_literal320);
            		adaptor.AddChild(root_0, char_literal320_tree);
            	}
            	// AS3.g:1001:197: ( LineTerminator )*
            	do 
            	{
            	    int alt167 = 2;
            	    alt167 = dfa167.Predict(input);
            	    switch (alt167) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator321=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forStatement5289); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator321_tree = (CommonTree)adaptor.Create(LineTerminator321);
            			    		adaptor.AddChild(root_0, LineTerminator321_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop167;
            	    }
            	} while (true);

            	loop167:
            		;	// Stops C# compiler whining that label 'loop167' has no statements

            	PushFollow(FOLLOW_statement_in_forStatement5292);
            	statement322 = statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement322.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 59, forStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "forStatement"

    public class forStatementInitialiserPart_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "forStatementInitialiserPart"
    // AS3.g:1004:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LineTerminator )* variableDeclarationListNoIn );
    public AS3Parser.forStatementInitialiserPart_return forStatementInitialiserPart() // throws RecognitionException [1]
    {   
        AS3Parser.forStatementInitialiserPart_return retval = new AS3Parser.forStatementInitialiserPart_return();
        retval.Start = input.LT(1);
        int forStatementInitialiserPart_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal324 = null;
        IToken LineTerminator325 = null;
        AS3Parser.expressionNoIn_return expressionNoIn323 = default(AS3Parser.expressionNoIn_return);

        AS3Parser.variableDeclarationListNoIn_return variableDeclarationListNoIn326 = default(AS3Parser.variableDeclarationListNoIn_return);


        CommonTree string_literal324_tree=null;
        CommonTree LineTerminator325_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 60) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1005:2: ( expressionNoIn | 'var' ( LineTerminator )* variableDeclarationListNoIn )
            int alt169 = 2;
            alt169 = dfa169.Predict(input);
            switch (alt169) 
            {
                case 1 :
                    // AS3.g:1005:4: expressionNoIn
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_expressionNoIn_in_forStatementInitialiserPart5304);
                    	expressionNoIn323 = expressionNoIn();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expressionNoIn323.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:1006:4: 'var' ( LineTerminator )* variableDeclarationListNoIn
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	string_literal324=(IToken)Match(input,89,FOLLOW_89_in_forStatementInitialiserPart5309); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal324_tree = (CommonTree)adaptor.Create(string_literal324);
                    		adaptor.AddChild(root_0, string_literal324_tree);
                    	}
                    	// AS3.g:1006:10: ( LineTerminator )*
                    	do 
                    	{
                    	    int alt168 = 2;
                    	    int LA168_0 = input.LA(1);

                    	    if ( (LA168_0 == LineTerminator) )
                    	    {
                    	        alt168 = 1;
                    	    }


                    	    switch (alt168) 
                    		{
                    			case 1 :
                    			    // AS3.g:0:0: LineTerminator
                    			    {
                    			    	LineTerminator325=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forStatementInitialiserPart5311); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{LineTerminator325_tree = (CommonTree)adaptor.Create(LineTerminator325);
                    			    		adaptor.AddChild(root_0, LineTerminator325_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop168;
                    	    }
                    	} while (true);

                    	loop168:
                    		;	// Stops C# compiler whining that label 'loop168' has no statements

                    	PushFollow(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart5314);
                    	variableDeclarationListNoIn326 = variableDeclarationListNoIn();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variableDeclarationListNoIn326.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 60, forStatementInitialiserPart_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "forStatementInitialiserPart"

    public class forInStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "forInStatement"
    // AS3.g:1009:1: forInStatement : 'for' ( LineTerminator )* '(' ( LineTerminator )* forInStatementInitialiserPart ( LineTerminator )* 'in' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ;
    public AS3Parser.forInStatement_return forInStatement() // throws RecognitionException [1]
    {   
        AS3Parser.forInStatement_return retval = new AS3Parser.forInStatement_return();
        retval.Start = input.LT(1);
        int forInStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal327 = null;
        IToken LineTerminator328 = null;
        IToken char_literal329 = null;
        IToken LineTerminator330 = null;
        IToken LineTerminator332 = null;
        IToken string_literal333 = null;
        IToken LineTerminator334 = null;
        IToken LineTerminator336 = null;
        IToken char_literal337 = null;
        IToken LineTerminator338 = null;
        AS3Parser.forInStatementInitialiserPart_return forInStatementInitialiserPart331 = default(AS3Parser.forInStatementInitialiserPart_return);

        AS3Parser.expression_return expression335 = default(AS3Parser.expression_return);

        AS3Parser.statement_return statement339 = default(AS3Parser.statement_return);


        CommonTree string_literal327_tree=null;
        CommonTree LineTerminator328_tree=null;
        CommonTree char_literal329_tree=null;
        CommonTree LineTerminator330_tree=null;
        CommonTree LineTerminator332_tree=null;
        CommonTree string_literal333_tree=null;
        CommonTree LineTerminator334_tree=null;
        CommonTree LineTerminator336_tree=null;
        CommonTree char_literal337_tree=null;
        CommonTree LineTerminator338_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 61) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1010:2: ( 'for' ( LineTerminator )* '(' ( LineTerminator )* forInStatementInitialiserPart ( LineTerminator )* 'in' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement )
            // AS3.g:1010:4: 'for' ( LineTerminator )* '(' ( LineTerminator )* forInStatementInitialiserPart ( LineTerminator )* 'in' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal327=(IToken)Match(input,95,FOLLOW_95_in_forInStatement5326); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal327_tree = (CommonTree)adaptor.Create(string_literal327);
            		adaptor.AddChild(root_0, string_literal327_tree);
            	}
            	// AS3.g:1010:10: ( LineTerminator )*
            	do 
            	{
            	    int alt170 = 2;
            	    int LA170_0 = input.LA(1);

            	    if ( (LA170_0 == LineTerminator) )
            	    {
            	        alt170 = 1;
            	    }


            	    switch (alt170) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator328=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forInStatement5328); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator328_tree = (CommonTree)adaptor.Create(LineTerminator328);
            			    		adaptor.AddChild(root_0, LineTerminator328_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop170;
            	    }
            	} while (true);

            	loop170:
            		;	// Stops C# compiler whining that label 'loop170' has no statements

            	char_literal329=(IToken)Match(input,36,FOLLOW_36_in_forInStatement5331); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal329_tree = (CommonTree)adaptor.Create(char_literal329);
            		adaptor.AddChild(root_0, char_literal329_tree);
            	}
            	// AS3.g:1010:30: ( LineTerminator )*
            	do 
            	{
            	    int alt171 = 2;
            	    alt171 = dfa171.Predict(input);
            	    switch (alt171) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator330=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forInStatement5333); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator330_tree = (CommonTree)adaptor.Create(LineTerminator330);
            			    		adaptor.AddChild(root_0, LineTerminator330_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop171;
            	    }
            	} while (true);

            	loop171:
            		;	// Stops C# compiler whining that label 'loop171' has no statements

            	PushFollow(FOLLOW_forInStatementInitialiserPart_in_forInStatement5336);
            	forInStatementInitialiserPart331 = forInStatementInitialiserPart();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, forInStatementInitialiserPart331.Tree);
            	// AS3.g:1010:76: ( LineTerminator )*
            	do 
            	{
            	    int alt172 = 2;
            	    int LA172_0 = input.LA(1);

            	    if ( (LA172_0 == LineTerminator) )
            	    {
            	        alt172 = 1;
            	    }


            	    switch (alt172) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator332=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forInStatement5338); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator332_tree = (CommonTree)adaptor.Create(LineTerminator332);
            			    		adaptor.AddChild(root_0, LineTerminator332_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop172;
            	    }
            	} while (true);

            	loop172:
            		;	// Stops C# compiler whining that label 'loop172' has no statements

            	string_literal333=(IToken)Match(input,66,FOLLOW_66_in_forInStatement5341); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal333_tree = (CommonTree)adaptor.Create(string_literal333);
            		adaptor.AddChild(root_0, string_literal333_tree);
            	}
            	// AS3.g:1010:97: ( LineTerminator )*
            	do 
            	{
            	    int alt173 = 2;
            	    alt173 = dfa173.Predict(input);
            	    switch (alt173) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator334=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forInStatement5343); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator334_tree = (CommonTree)adaptor.Create(LineTerminator334);
            			    		adaptor.AddChild(root_0, LineTerminator334_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop173;
            	    }
            	} while (true);

            	loop173:
            		;	// Stops C# compiler whining that label 'loop173' has no statements

            	PushFollow(FOLLOW_expression_in_forInStatement5346);
            	expression335 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression335.Tree);
            	// AS3.g:1010:124: ( LineTerminator )*
            	do 
            	{
            	    int alt174 = 2;
            	    int LA174_0 = input.LA(1);

            	    if ( (LA174_0 == LineTerminator) )
            	    {
            	        alt174 = 1;
            	    }


            	    switch (alt174) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator336=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forInStatement5348); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator336_tree = (CommonTree)adaptor.Create(LineTerminator336);
            			    		adaptor.AddChild(root_0, LineTerminator336_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop174;
            	    }
            	} while (true);

            	loop174:
            		;	// Stops C# compiler whining that label 'loop174' has no statements

            	char_literal337=(IToken)Match(input,37,FOLLOW_37_in_forInStatement5351); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal337_tree = (CommonTree)adaptor.Create(char_literal337);
            		adaptor.AddChild(root_0, char_literal337_tree);
            	}
            	// AS3.g:1010:144: ( LineTerminator )*
            	do 
            	{
            	    int alt175 = 2;
            	    alt175 = dfa175.Predict(input);
            	    switch (alt175) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator338=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forInStatement5353); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator338_tree = (CommonTree)adaptor.Create(LineTerminator338);
            			    		adaptor.AddChild(root_0, LineTerminator338_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop175;
            	    }
            	} while (true);

            	loop175:
            		;	// Stops C# compiler whining that label 'loop175' has no statements

            	PushFollow(FOLLOW_statement_in_forInStatement5356);
            	statement339 = statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement339.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 61, forInStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "forInStatement"

    public class forInStatementInitialiserPart_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "forInStatementInitialiserPart"
    // AS3.g:1013:1: forInStatementInitialiserPart : ( leftHandSideExpression | 'var' ( LineTerminator )* variableDeclarationNoIn );
    public AS3Parser.forInStatementInitialiserPart_return forInStatementInitialiserPart() // throws RecognitionException [1]
    {   
        AS3Parser.forInStatementInitialiserPart_return retval = new AS3Parser.forInStatementInitialiserPart_return();
        retval.Start = input.LT(1);
        int forInStatementInitialiserPart_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal341 = null;
        IToken LineTerminator342 = null;
        AS3Parser.leftHandSideExpression_return leftHandSideExpression340 = default(AS3Parser.leftHandSideExpression_return);

        AS3Parser.variableDeclarationNoIn_return variableDeclarationNoIn343 = default(AS3Parser.variableDeclarationNoIn_return);


        CommonTree string_literal341_tree=null;
        CommonTree LineTerminator342_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 62) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1014:2: ( leftHandSideExpression | 'var' ( LineTerminator )* variableDeclarationNoIn )
            int alt177 = 2;
            alt177 = dfa177.Predict(input);
            switch (alt177) 
            {
                case 1 :
                    // AS3.g:1014:4: leftHandSideExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart5368);
                    	leftHandSideExpression340 = leftHandSideExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, leftHandSideExpression340.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:1015:4: 'var' ( LineTerminator )* variableDeclarationNoIn
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	string_literal341=(IToken)Match(input,89,FOLLOW_89_in_forInStatementInitialiserPart5373); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal341_tree = (CommonTree)adaptor.Create(string_literal341);
                    		adaptor.AddChild(root_0, string_literal341_tree);
                    	}
                    	// AS3.g:1015:10: ( LineTerminator )*
                    	do 
                    	{
                    	    int alt176 = 2;
                    	    int LA176_0 = input.LA(1);

                    	    if ( (LA176_0 == LineTerminator) )
                    	    {
                    	        alt176 = 1;
                    	    }


                    	    switch (alt176) 
                    		{
                    			case 1 :
                    			    // AS3.g:0:0: LineTerminator
                    			    {
                    			    	LineTerminator342=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_forInStatementInitialiserPart5375); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{LineTerminator342_tree = (CommonTree)adaptor.Create(LineTerminator342);
                    			    		adaptor.AddChild(root_0, LineTerminator342_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop176;
                    	    }
                    	} while (true);

                    	loop176:
                    		;	// Stops C# compiler whining that label 'loop176' has no statements

                    	PushFollow(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart5378);
                    	variableDeclarationNoIn343 = variableDeclarationNoIn();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variableDeclarationNoIn343.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 62, forInStatementInitialiserPart_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "forInStatementInitialiserPart"

    public class continueStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "continueStatement"
    // AS3.g:1018:1: continueStatement : 'continue' ( Identifier )? ( LineTerminator | ';' ) ;
    public AS3Parser.continueStatement_return continueStatement() // throws RecognitionException [1]
    {   
        AS3Parser.continueStatement_return retval = new AS3Parser.continueStatement_return();
        retval.Start = input.LT(1);
        int continueStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal344 = null;
        IToken Identifier345 = null;
        IToken set346 = null;

        CommonTree string_literal344_tree=null;
        CommonTree Identifier345_tree=null;
        CommonTree set346_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 63) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1019:2: ( 'continue' ( Identifier )? ( LineTerminator | ';' ) )
            // AS3.g:1019:4: 'continue' ( Identifier )? ( LineTerminator | ';' )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal344=(IToken)Match(input,96,FOLLOW_96_in_continueStatement5389); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal344_tree = (CommonTree)adaptor.Create(string_literal344);
            		adaptor.AddChild(root_0, string_literal344_tree);
            	}
            	// AS3.g:1019:15: ( Identifier )?
            	int alt178 = 2;
            	int LA178_0 = input.LA(1);

            	if ( (LA178_0 == Identifier) )
            	{
            	    alt178 = 1;
            	}
            	switch (alt178) 
            	{
            	    case 1 :
            	        // AS3.g:0:0: Identifier
            	        {
            	        	Identifier345=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_continueStatement5391); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{Identifier345_tree = (CommonTree)adaptor.Create(Identifier345);
            	        		adaptor.AddChild(root_0, Identifier345_tree);
            	        	}

            	        }
            	        break;

            	}

            	set346 = (IToken)input.LT(1);
            	if ( input.LA(1) == LineTerminator || input.LA(1) == 90 ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set346));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 63, continueStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "continueStatement"

    public class breakStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "breakStatement"
    // AS3.g:1022:1: breakStatement : 'break' ( Identifier )? ( LineTerminator | ';' ) ;
    public AS3Parser.breakStatement_return breakStatement() // throws RecognitionException [1]
    {   
        AS3Parser.breakStatement_return retval = new AS3Parser.breakStatement_return();
        retval.Start = input.LT(1);
        int breakStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal347 = null;
        IToken Identifier348 = null;
        IToken set349 = null;

        CommonTree string_literal347_tree=null;
        CommonTree Identifier348_tree=null;
        CommonTree set349_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 64) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1023:2: ( 'break' ( Identifier )? ( LineTerminator | ';' ) )
            // AS3.g:1023:4: 'break' ( Identifier )? ( LineTerminator | ';' )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal347=(IToken)Match(input,97,FOLLOW_97_in_breakStatement5411); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal347_tree = (CommonTree)adaptor.Create(string_literal347);
            		adaptor.AddChild(root_0, string_literal347_tree);
            	}
            	// AS3.g:1023:12: ( Identifier )?
            	int alt179 = 2;
            	int LA179_0 = input.LA(1);

            	if ( (LA179_0 == Identifier) )
            	{
            	    alt179 = 1;
            	}
            	switch (alt179) 
            	{
            	    case 1 :
            	        // AS3.g:0:0: Identifier
            	        {
            	        	Identifier348=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_breakStatement5413); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{Identifier348_tree = (CommonTree)adaptor.Create(Identifier348);
            	        		adaptor.AddChild(root_0, Identifier348_tree);
            	        	}

            	        }
            	        break;

            	}

            	set349 = (IToken)input.LT(1);
            	if ( input.LA(1) == LineTerminator || input.LA(1) == 90 ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set349));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 64, breakStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "breakStatement"

    public class returnStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "returnStatement"
    // AS3.g:1026:1: returnStatement : 'return' ( expression )? ( LineTerminator | ';' ) ;
    public AS3Parser.returnStatement_return returnStatement() // throws RecognitionException [1]
    {   
        AS3Parser.returnStatement_return retval = new AS3Parser.returnStatement_return();
        retval.Start = input.LT(1);
        int returnStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal350 = null;
        IToken set352 = null;
        AS3Parser.expression_return expression351 = default(AS3Parser.expression_return);


        CommonTree string_literal350_tree=null;
        CommonTree set352_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 65) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1027:2: ( 'return' ( expression )? ( LineTerminator | ';' ) )
            // AS3.g:1027:4: 'return' ( expression )? ( LineTerminator | ';' )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal350=(IToken)Match(input,98,FOLLOW_98_in_returnStatement5433); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal350_tree = (CommonTree)adaptor.Create(string_literal350);
            		adaptor.AddChild(root_0, string_literal350_tree);
            	}
            	// AS3.g:1027:13: ( expression )?
            	int alt180 = 2;
            	alt180 = dfa180.Predict(input);
            	switch (alt180) 
            	{
            	    case 1 :
            	        // AS3.g:0:0: expression
            	        {
            	        	PushFollow(FOLLOW_expression_in_returnStatement5435);
            	        	expression351 = expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression351.Tree);

            	        }
            	        break;

            	}

            	set352 = (IToken)input.LT(1);
            	if ( input.LA(1) == LineTerminator || input.LA(1) == 90 ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set352));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 65, returnStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "returnStatement"

    public class withStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "withStatement"
    // AS3.g:1030:1: withStatement : 'with' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ;
    public AS3Parser.withStatement_return withStatement() // throws RecognitionException [1]
    {   
        AS3Parser.withStatement_return retval = new AS3Parser.withStatement_return();
        retval.Start = input.LT(1);
        int withStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal353 = null;
        IToken LineTerminator354 = null;
        IToken char_literal355 = null;
        IToken LineTerminator356 = null;
        IToken LineTerminator358 = null;
        IToken char_literal359 = null;
        IToken LineTerminator360 = null;
        AS3Parser.expression_return expression357 = default(AS3Parser.expression_return);

        AS3Parser.statement_return statement361 = default(AS3Parser.statement_return);


        CommonTree string_literal353_tree=null;
        CommonTree LineTerminator354_tree=null;
        CommonTree char_literal355_tree=null;
        CommonTree LineTerminator356_tree=null;
        CommonTree LineTerminator358_tree=null;
        CommonTree char_literal359_tree=null;
        CommonTree LineTerminator360_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 66) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1031:2: ( 'with' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement )
            // AS3.g:1031:4: 'with' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal353=(IToken)Match(input,99,FOLLOW_99_in_withStatement5456); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal353_tree = (CommonTree)adaptor.Create(string_literal353);
            		adaptor.AddChild(root_0, string_literal353_tree);
            	}
            	// AS3.g:1031:11: ( LineTerminator )*
            	do 
            	{
            	    int alt181 = 2;
            	    int LA181_0 = input.LA(1);

            	    if ( (LA181_0 == LineTerminator) )
            	    {
            	        alt181 = 1;
            	    }


            	    switch (alt181) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator354=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_withStatement5458); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator354_tree = (CommonTree)adaptor.Create(LineTerminator354);
            			    		adaptor.AddChild(root_0, LineTerminator354_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop181;
            	    }
            	} while (true);

            	loop181:
            		;	// Stops C# compiler whining that label 'loop181' has no statements

            	char_literal355=(IToken)Match(input,36,FOLLOW_36_in_withStatement5461); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal355_tree = (CommonTree)adaptor.Create(char_literal355);
            		adaptor.AddChild(root_0, char_literal355_tree);
            	}
            	// AS3.g:1031:31: ( LineTerminator )*
            	do 
            	{
            	    int alt182 = 2;
            	    alt182 = dfa182.Predict(input);
            	    switch (alt182) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator356=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_withStatement5463); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator356_tree = (CommonTree)adaptor.Create(LineTerminator356);
            			    		adaptor.AddChild(root_0, LineTerminator356_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop182;
            	    }
            	} while (true);

            	loop182:
            		;	// Stops C# compiler whining that label 'loop182' has no statements

            	PushFollow(FOLLOW_expression_in_withStatement5466);
            	expression357 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression357.Tree);
            	// AS3.g:1031:58: ( LineTerminator )*
            	do 
            	{
            	    int alt183 = 2;
            	    int LA183_0 = input.LA(1);

            	    if ( (LA183_0 == LineTerminator) )
            	    {
            	        alt183 = 1;
            	    }


            	    switch (alt183) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator358=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_withStatement5468); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator358_tree = (CommonTree)adaptor.Create(LineTerminator358);
            			    		adaptor.AddChild(root_0, LineTerminator358_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop183;
            	    }
            	} while (true);

            	loop183:
            		;	// Stops C# compiler whining that label 'loop183' has no statements

            	char_literal359=(IToken)Match(input,37,FOLLOW_37_in_withStatement5471); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal359_tree = (CommonTree)adaptor.Create(char_literal359);
            		adaptor.AddChild(root_0, char_literal359_tree);
            	}
            	// AS3.g:1031:78: ( LineTerminator )*
            	do 
            	{
            	    int alt184 = 2;
            	    alt184 = dfa184.Predict(input);
            	    switch (alt184) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator360=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_withStatement5473); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator360_tree = (CommonTree)adaptor.Create(LineTerminator360);
            			    		adaptor.AddChild(root_0, LineTerminator360_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop184;
            	    }
            	} while (true);

            	loop184:
            		;	// Stops C# compiler whining that label 'loop184' has no statements

            	PushFollow(FOLLOW_statement_in_withStatement5476);
            	statement361 = statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement361.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 66, withStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "withStatement"

    public class switchStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "switchStatement"
    // AS3.g:1034:1: switchStatement : 'switch' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* caseBlock ;
    public AS3Parser.switchStatement_return switchStatement() // throws RecognitionException [1]
    {   
        AS3Parser.switchStatement_return retval = new AS3Parser.switchStatement_return();
        retval.Start = input.LT(1);
        int switchStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal362 = null;
        IToken LineTerminator363 = null;
        IToken char_literal364 = null;
        IToken LineTerminator365 = null;
        IToken LineTerminator367 = null;
        IToken char_literal368 = null;
        IToken LineTerminator369 = null;
        AS3Parser.expression_return expression366 = default(AS3Parser.expression_return);

        AS3Parser.caseBlock_return caseBlock370 = default(AS3Parser.caseBlock_return);


        CommonTree string_literal362_tree=null;
        CommonTree LineTerminator363_tree=null;
        CommonTree char_literal364_tree=null;
        CommonTree LineTerminator365_tree=null;
        CommonTree LineTerminator367_tree=null;
        CommonTree char_literal368_tree=null;
        CommonTree LineTerminator369_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 67) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1035:2: ( 'switch' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* caseBlock )
            // AS3.g:1035:4: 'switch' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* caseBlock
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal362=(IToken)Match(input,100,FOLLOW_100_in_switchStatement5488); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal362_tree = (CommonTree)adaptor.Create(string_literal362);
            		adaptor.AddChild(root_0, string_literal362_tree);
            	}
            	// AS3.g:1035:13: ( LineTerminator )*
            	do 
            	{
            	    int alt185 = 2;
            	    int LA185_0 = input.LA(1);

            	    if ( (LA185_0 == LineTerminator) )
            	    {
            	        alt185 = 1;
            	    }


            	    switch (alt185) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator363=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_switchStatement5490); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator363_tree = (CommonTree)adaptor.Create(LineTerminator363);
            			    		adaptor.AddChild(root_0, LineTerminator363_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop185;
            	    }
            	} while (true);

            	loop185:
            		;	// Stops C# compiler whining that label 'loop185' has no statements

            	char_literal364=(IToken)Match(input,36,FOLLOW_36_in_switchStatement5493); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal364_tree = (CommonTree)adaptor.Create(char_literal364);
            		adaptor.AddChild(root_0, char_literal364_tree);
            	}
            	// AS3.g:1035:33: ( LineTerminator )*
            	do 
            	{
            	    int alt186 = 2;
            	    alt186 = dfa186.Predict(input);
            	    switch (alt186) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator365=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_switchStatement5495); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator365_tree = (CommonTree)adaptor.Create(LineTerminator365);
            			    		adaptor.AddChild(root_0, LineTerminator365_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop186;
            	    }
            	} while (true);

            	loop186:
            		;	// Stops C# compiler whining that label 'loop186' has no statements

            	PushFollow(FOLLOW_expression_in_switchStatement5498);
            	expression366 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression366.Tree);
            	// AS3.g:1035:60: ( LineTerminator )*
            	do 
            	{
            	    int alt187 = 2;
            	    int LA187_0 = input.LA(1);

            	    if ( (LA187_0 == LineTerminator) )
            	    {
            	        alt187 = 1;
            	    }


            	    switch (alt187) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator367=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_switchStatement5500); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator367_tree = (CommonTree)adaptor.Create(LineTerminator367);
            			    		adaptor.AddChild(root_0, LineTerminator367_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop187;
            	    }
            	} while (true);

            	loop187:
            		;	// Stops C# compiler whining that label 'loop187' has no statements

            	char_literal368=(IToken)Match(input,37,FOLLOW_37_in_switchStatement5503); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal368_tree = (CommonTree)adaptor.Create(char_literal368);
            		adaptor.AddChild(root_0, char_literal368_tree);
            	}
            	// AS3.g:1035:80: ( LineTerminator )*
            	do 
            	{
            	    int alt188 = 2;
            	    int LA188_0 = input.LA(1);

            	    if ( (LA188_0 == LineTerminator) )
            	    {
            	        alt188 = 1;
            	    }


            	    switch (alt188) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator369=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_switchStatement5505); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator369_tree = (CommonTree)adaptor.Create(LineTerminator369);
            			    		adaptor.AddChild(root_0, LineTerminator369_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop188;
            	    }
            	} while (true);

            	loop188:
            		;	// Stops C# compiler whining that label 'loop188' has no statements

            	PushFollow(FOLLOW_caseBlock_in_switchStatement5508);
            	caseBlock370 = caseBlock();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, caseBlock370.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 67, switchStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switchStatement"

    public class caseBlock_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "caseBlock"
    // AS3.g:1038:1: caseBlock : '{' ( ( LineTerminator )* caseClause )* ( ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )* )? ( LineTerminator )* '}' ;
    public AS3Parser.caseBlock_return caseBlock() // throws RecognitionException [1]
    {   
        AS3Parser.caseBlock_return retval = new AS3Parser.caseBlock_return();
        retval.Start = input.LT(1);
        int caseBlock_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal371 = null;
        IToken LineTerminator372 = null;
        IToken LineTerminator374 = null;
        IToken LineTerminator376 = null;
        IToken LineTerminator378 = null;
        IToken char_literal379 = null;
        AS3Parser.caseClause_return caseClause373 = default(AS3Parser.caseClause_return);

        AS3Parser.defaultClause_return defaultClause375 = default(AS3Parser.defaultClause_return);

        AS3Parser.caseClause_return caseClause377 = default(AS3Parser.caseClause_return);


        CommonTree char_literal371_tree=null;
        CommonTree LineTerminator372_tree=null;
        CommonTree LineTerminator374_tree=null;
        CommonTree LineTerminator376_tree=null;
        CommonTree LineTerminator378_tree=null;
        CommonTree char_literal379_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 68) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1039:2: ( '{' ( ( LineTerminator )* caseClause )* ( ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )* )? ( LineTerminator )* '}' )
            // AS3.g:1039:4: '{' ( ( LineTerminator )* caseClause )* ( ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )* )? ( LineTerminator )* '}'
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal371=(IToken)Match(input,41,FOLLOW_41_in_caseBlock5520); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal371_tree = (CommonTree)adaptor.Create(char_literal371);
            		adaptor.AddChild(root_0, char_literal371_tree);
            	}
            	// AS3.g:1039:8: ( ( LineTerminator )* caseClause )*
            	do 
            	{
            	    int alt190 = 2;
            	    int LA190_0 = input.LA(1);

            	    if ( (LA190_0 == LineTerminator) )
            	    {
            	        int LA190_1 = input.LA(2);

            	        if ( (LA190_1 == LineTerminator) )
            	        {
            	            int LA190_6 = input.LA(3);

            	            if ( (synpred260_AS3()) )
            	            {
            	                alt190 = 1;
            	            }


            	        }
            	        else if ( (LA190_1 == 101) )
            	        {
            	            alt190 = 1;
            	        }


            	    }
            	    else if ( (LA190_0 == 101) )
            	    {
            	        alt190 = 1;
            	    }


            	    switch (alt190) 
            		{
            			case 1 :
            			    // AS3.g:1039:9: ( LineTerminator )* caseClause
            			    {
            			    	// AS3.g:1039:9: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt189 = 2;
            			    	    int LA189_0 = input.LA(1);

            			    	    if ( (LA189_0 == LineTerminator) )
            			    	    {
            			    	        alt189 = 1;
            			    	    }


            			    	    switch (alt189) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator372=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_caseBlock5523); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator372_tree = (CommonTree)adaptor.Create(LineTerminator372);
            			    			    		adaptor.AddChild(root_0, LineTerminator372_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop189;
            			    	    }
            			    	} while (true);

            			    	loop189:
            			    		;	// Stops C# compiler whining that label 'loop189' has no statements

            			    	PushFollow(FOLLOW_caseClause_in_caseBlock5526);
            			    	caseClause373 = caseClause();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, caseClause373.Tree);

            			    }
            			    break;

            			default:
            			    goto loop190;
            	    }
            	} while (true);

            	loop190:
            		;	// Stops C# compiler whining that label 'loop190' has no statements

            	// AS3.g:1039:38: ( ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )* )?
            	int alt194 = 2;
            	int LA194_0 = input.LA(1);

            	if ( (LA194_0 == LineTerminator) )
            	{
            	    int LA194_1 = input.LA(2);

            	    if ( (LA194_1 == 102) )
            	    {
            	        alt194 = 1;
            	    }
            	    else if ( (LA194_1 == LineTerminator) )
            	    {
            	        int LA194_5 = input.LA(3);

            	        if ( (synpred264_AS3()) )
            	        {
            	            alt194 = 1;
            	        }
            	    }
            	}
            	else if ( (LA194_0 == 102) )
            	{
            	    alt194 = 1;
            	}
            	switch (alt194) 
            	{
            	    case 1 :
            	        // AS3.g:1039:39: ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )*
            	        {
            	        	// AS3.g:1039:39: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt191 = 2;
            	        	    int LA191_0 = input.LA(1);

            	        	    if ( (LA191_0 == LineTerminator) )
            	        	    {
            	        	        alt191 = 1;
            	        	    }


            	        	    switch (alt191) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator374=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_caseBlock5531); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator374_tree = (CommonTree)adaptor.Create(LineTerminator374);
            	        			    		adaptor.AddChild(root_0, LineTerminator374_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop191;
            	        	    }
            	        	} while (true);

            	        	loop191:
            	        		;	// Stops C# compiler whining that label 'loop191' has no statements

            	        	PushFollow(FOLLOW_defaultClause_in_caseBlock5534);
            	        	defaultClause375 = defaultClause();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, defaultClause375.Tree);
            	        	// AS3.g:1039:69: ( ( LineTerminator )* caseClause )*
            	        	do 
            	        	{
            	        	    int alt193 = 2;
            	        	    int LA193_0 = input.LA(1);

            	        	    if ( (LA193_0 == LineTerminator) )
            	        	    {
            	        	        int LA193_1 = input.LA(2);

            	        	        if ( (LA193_1 == LineTerminator) )
            	        	        {
            	        	            int LA193_5 = input.LA(3);

            	        	            if ( (synpred263_AS3()) )
            	        	            {
            	        	                alt193 = 1;
            	        	            }


            	        	        }
            	        	        else if ( (LA193_1 == 101) )
            	        	        {
            	        	            alt193 = 1;
            	        	        }


            	        	    }
            	        	    else if ( (LA193_0 == 101) )
            	        	    {
            	        	        alt193 = 1;
            	        	    }


            	        	    switch (alt193) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:1039:70: ( LineTerminator )* caseClause
            	        			    {
            	        			    	// AS3.g:1039:70: ( LineTerminator )*
            	        			    	do 
            	        			    	{
            	        			    	    int alt192 = 2;
            	        			    	    int LA192_0 = input.LA(1);

            	        			    	    if ( (LA192_0 == LineTerminator) )
            	        			    	    {
            	        			    	        alt192 = 1;
            	        			    	    }


            	        			    	    switch (alt192) 
            	        			    		{
            	        			    			case 1 :
            	        			    			    // AS3.g:0:0: LineTerminator
            	        			    			    {
            	        			    			    	LineTerminator376=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_caseBlock5537); if (state.failed) return retval;
            	        			    			    	if ( state.backtracking == 0 )
            	        			    			    	{LineTerminator376_tree = (CommonTree)adaptor.Create(LineTerminator376);
            	        			    			    		adaptor.AddChild(root_0, LineTerminator376_tree);
            	        			    			    	}

            	        			    			    }
            	        			    			    break;

            	        			    			default:
            	        			    			    goto loop192;
            	        			    	    }
            	        			    	} while (true);

            	        			    	loop192:
            	        			    		;	// Stops C# compiler whining that label 'loop192' has no statements

            	        			    	PushFollow(FOLLOW_caseClause_in_caseBlock5540);
            	        			    	caseClause377 = caseClause();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, caseClause377.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop193;
            	        	    }
            	        	} while (true);

            	        	loop193:
            	        		;	// Stops C# compiler whining that label 'loop193' has no statements


            	        }
            	        break;

            	}

            	// AS3.g:1039:101: ( LineTerminator )*
            	do 
            	{
            	    int alt195 = 2;
            	    int LA195_0 = input.LA(1);

            	    if ( (LA195_0 == LineTerminator) )
            	    {
            	        alt195 = 1;
            	    }


            	    switch (alt195) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator378=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_caseBlock5546); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator378_tree = (CommonTree)adaptor.Create(LineTerminator378);
            			    		adaptor.AddChild(root_0, LineTerminator378_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop195;
            	    }
            	} while (true);

            	loop195:
            		;	// Stops C# compiler whining that label 'loop195' has no statements

            	char_literal379=(IToken)Match(input,42,FOLLOW_42_in_caseBlock5549); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal379_tree = (CommonTree)adaptor.Create(char_literal379);
            		adaptor.AddChild(root_0, char_literal379_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 68, caseBlock_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "caseBlock"

    public class caseClause_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "caseClause"
    // AS3.g:1042:1: caseClause : 'case' ( LineTerminator )* expression ( LineTerminator )* ':' ( LineTerminator )* ( statementList )? ;
    public AS3Parser.caseClause_return caseClause() // throws RecognitionException [1]
    {   
        AS3Parser.caseClause_return retval = new AS3Parser.caseClause_return();
        retval.Start = input.LT(1);
        int caseClause_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal380 = null;
        IToken LineTerminator381 = null;
        IToken LineTerminator383 = null;
        IToken char_literal384 = null;
        IToken LineTerminator385 = null;
        AS3Parser.expression_return expression382 = default(AS3Parser.expression_return);

        AS3Parser.statementList_return statementList386 = default(AS3Parser.statementList_return);


        CommonTree string_literal380_tree=null;
        CommonTree LineTerminator381_tree=null;
        CommonTree LineTerminator383_tree=null;
        CommonTree char_literal384_tree=null;
        CommonTree LineTerminator385_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 69) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1043:2: ( 'case' ( LineTerminator )* expression ( LineTerminator )* ':' ( LineTerminator )* ( statementList )? )
            // AS3.g:1043:4: 'case' ( LineTerminator )* expression ( LineTerminator )* ':' ( LineTerminator )* ( statementList )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal380=(IToken)Match(input,101,FOLLOW_101_in_caseClause5560); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal380_tree = (CommonTree)adaptor.Create(string_literal380);
            		adaptor.AddChild(root_0, string_literal380_tree);
            	}
            	// AS3.g:1043:11: ( LineTerminator )*
            	do 
            	{
            	    int alt196 = 2;
            	    alt196 = dfa196.Predict(input);
            	    switch (alt196) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator381=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_caseClause5562); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator381_tree = (CommonTree)adaptor.Create(LineTerminator381);
            			    		adaptor.AddChild(root_0, LineTerminator381_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop196;
            	    }
            	} while (true);

            	loop196:
            		;	// Stops C# compiler whining that label 'loop196' has no statements

            	PushFollow(FOLLOW_expression_in_caseClause5565);
            	expression382 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression382.Tree);
            	// AS3.g:1043:38: ( LineTerminator )*
            	do 
            	{
            	    int alt197 = 2;
            	    int LA197_0 = input.LA(1);

            	    if ( (LA197_0 == LineTerminator) )
            	    {
            	        alt197 = 1;
            	    }


            	    switch (alt197) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator383=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_caseClause5567); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator383_tree = (CommonTree)adaptor.Create(LineTerminator383);
            			    		adaptor.AddChild(root_0, LineTerminator383_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop197;
            	    }
            	} while (true);

            	loop197:
            		;	// Stops C# compiler whining that label 'loop197' has no statements

            	char_literal384=(IToken)Match(input,43,FOLLOW_43_in_caseClause5570); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal384_tree = (CommonTree)adaptor.Create(char_literal384);
            		adaptor.AddChild(root_0, char_literal384_tree);
            	}
            	// AS3.g:1043:58: ( LineTerminator )*
            	do 
            	{
            	    int alt198 = 2;
            	    alt198 = dfa198.Predict(input);
            	    switch (alt198) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator385=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_caseClause5572); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator385_tree = (CommonTree)adaptor.Create(LineTerminator385);
            			    		adaptor.AddChild(root_0, LineTerminator385_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop198;
            	    }
            	} while (true);

            	loop198:
            		;	// Stops C# compiler whining that label 'loop198' has no statements

            	// AS3.g:1043:74: ( statementList )?
            	int alt199 = 2;
            	alt199 = dfa199.Predict(input);
            	switch (alt199) 
            	{
            	    case 1 :
            	        // AS3.g:0:0: statementList
            	        {
            	        	PushFollow(FOLLOW_statementList_in_caseClause5575);
            	        	statementList386 = statementList();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statementList386.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 69, caseClause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "caseClause"

    public class defaultClause_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "defaultClause"
    // AS3.g:1046:1: defaultClause : 'default' ( LineTerminator )* ':' ( LineTerminator )* ( statementList )? ;
    public AS3Parser.defaultClause_return defaultClause() // throws RecognitionException [1]
    {   
        AS3Parser.defaultClause_return retval = new AS3Parser.defaultClause_return();
        retval.Start = input.LT(1);
        int defaultClause_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal387 = null;
        IToken LineTerminator388 = null;
        IToken char_literal389 = null;
        IToken LineTerminator390 = null;
        AS3Parser.statementList_return statementList391 = default(AS3Parser.statementList_return);


        CommonTree string_literal387_tree=null;
        CommonTree LineTerminator388_tree=null;
        CommonTree char_literal389_tree=null;
        CommonTree LineTerminator390_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 70) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1047:2: ( 'default' ( LineTerminator )* ':' ( LineTerminator )* ( statementList )? )
            // AS3.g:1047:4: 'default' ( LineTerminator )* ':' ( LineTerminator )* ( statementList )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal387=(IToken)Match(input,102,FOLLOW_102_in_defaultClause5588); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal387_tree = (CommonTree)adaptor.Create(string_literal387);
            		adaptor.AddChild(root_0, string_literal387_tree);
            	}
            	// AS3.g:1047:14: ( LineTerminator )*
            	do 
            	{
            	    int alt200 = 2;
            	    int LA200_0 = input.LA(1);

            	    if ( (LA200_0 == LineTerminator) )
            	    {
            	        alt200 = 1;
            	    }


            	    switch (alt200) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator388=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_defaultClause5590); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator388_tree = (CommonTree)adaptor.Create(LineTerminator388);
            			    		adaptor.AddChild(root_0, LineTerminator388_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop200;
            	    }
            	} while (true);

            	loop200:
            		;	// Stops C# compiler whining that label 'loop200' has no statements

            	char_literal389=(IToken)Match(input,43,FOLLOW_43_in_defaultClause5593); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal389_tree = (CommonTree)adaptor.Create(char_literal389);
            		adaptor.AddChild(root_0, char_literal389_tree);
            	}
            	// AS3.g:1047:34: ( LineTerminator )*
            	do 
            	{
            	    int alt201 = 2;
            	    alt201 = dfa201.Predict(input);
            	    switch (alt201) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator390=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_defaultClause5595); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator390_tree = (CommonTree)adaptor.Create(LineTerminator390);
            			    		adaptor.AddChild(root_0, LineTerminator390_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop201;
            	    }
            	} while (true);

            	loop201:
            		;	// Stops C# compiler whining that label 'loop201' has no statements

            	// AS3.g:1047:50: ( statementList )?
            	int alt202 = 2;
            	alt202 = dfa202.Predict(input);
            	switch (alt202) 
            	{
            	    case 1 :
            	        // AS3.g:0:0: statementList
            	        {
            	        	PushFollow(FOLLOW_statementList_in_defaultClause5598);
            	        	statementList391 = statementList();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statementList391.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 70, defaultClause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "defaultClause"

    public class labelledStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "labelledStatement"
    // AS3.g:1050:1: labelledStatement : Identifier ( LineTerminator )* ':' ( LineTerminator )* statement ;
    public AS3Parser.labelledStatement_return labelledStatement() // throws RecognitionException [1]
    {   
        AS3Parser.labelledStatement_return retval = new AS3Parser.labelledStatement_return();
        retval.Start = input.LT(1);
        int labelledStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken Identifier392 = null;
        IToken LineTerminator393 = null;
        IToken char_literal394 = null;
        IToken LineTerminator395 = null;
        AS3Parser.statement_return statement396 = default(AS3Parser.statement_return);


        CommonTree Identifier392_tree=null;
        CommonTree LineTerminator393_tree=null;
        CommonTree char_literal394_tree=null;
        CommonTree LineTerminator395_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 71) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1051:2: ( Identifier ( LineTerminator )* ':' ( LineTerminator )* statement )
            // AS3.g:1051:4: Identifier ( LineTerminator )* ':' ( LineTerminator )* statement
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	Identifier392=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_labelledStatement5611); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{Identifier392_tree = (CommonTree)adaptor.Create(Identifier392);
            		adaptor.AddChild(root_0, Identifier392_tree);
            	}
            	// AS3.g:1051:15: ( LineTerminator )*
            	do 
            	{
            	    int alt203 = 2;
            	    int LA203_0 = input.LA(1);

            	    if ( (LA203_0 == LineTerminator) )
            	    {
            	        alt203 = 1;
            	    }


            	    switch (alt203) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator393=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_labelledStatement5613); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator393_tree = (CommonTree)adaptor.Create(LineTerminator393);
            			    		adaptor.AddChild(root_0, LineTerminator393_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop203;
            	    }
            	} while (true);

            	loop203:
            		;	// Stops C# compiler whining that label 'loop203' has no statements

            	char_literal394=(IToken)Match(input,43,FOLLOW_43_in_labelledStatement5616); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal394_tree = (CommonTree)adaptor.Create(char_literal394);
            		adaptor.AddChild(root_0, char_literal394_tree);
            	}
            	// AS3.g:1051:35: ( LineTerminator )*
            	do 
            	{
            	    int alt204 = 2;
            	    alt204 = dfa204.Predict(input);
            	    switch (alt204) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator395=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_labelledStatement5618); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator395_tree = (CommonTree)adaptor.Create(LineTerminator395);
            			    		adaptor.AddChild(root_0, LineTerminator395_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop204;
            	    }
            	} while (true);

            	loop204:
            		;	// Stops C# compiler whining that label 'loop204' has no statements

            	PushFollow(FOLLOW_statement_in_labelledStatement5621);
            	statement396 = statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement396.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 71, labelledStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "labelledStatement"

    public class throwStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "throwStatement"
    // AS3.g:1054:1: throwStatement : 'throw' expression ( ( LineTerminator )* | ';' ) ;
    public AS3Parser.throwStatement_return throwStatement() // throws RecognitionException [1]
    {   
        AS3Parser.throwStatement_return retval = new AS3Parser.throwStatement_return();
        retval.Start = input.LT(1);
        int throwStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal397 = null;
        IToken LineTerminator399 = null;
        IToken char_literal400 = null;
        AS3Parser.expression_return expression398 = default(AS3Parser.expression_return);


        CommonTree string_literal397_tree=null;
        CommonTree LineTerminator399_tree=null;
        CommonTree char_literal400_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 72) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1055:2: ( 'throw' expression ( ( LineTerminator )* | ';' ) )
            // AS3.g:1055:4: 'throw' expression ( ( LineTerminator )* | ';' )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal397=(IToken)Match(input,103,FOLLOW_103_in_throwStatement5633); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal397_tree = (CommonTree)adaptor.Create(string_literal397);
            		adaptor.AddChild(root_0, string_literal397_tree);
            	}
            	PushFollow(FOLLOW_expression_in_throwStatement5635);
            	expression398 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression398.Tree);
            	// AS3.g:1055:23: ( ( LineTerminator )* | ';' )
            	int alt206 = 2;
            	alt206 = dfa206.Predict(input);
            	switch (alt206) 
            	{
            	    case 1 :
            	        // AS3.g:1055:24: ( LineTerminator )*
            	        {
            	        	// AS3.g:1055:24: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt205 = 2;
            	        	    alt205 = dfa205.Predict(input);
            	        	    switch (alt205) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator399=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_throwStatement5638); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator399_tree = (CommonTree)adaptor.Create(LineTerminator399);
            	        			    		adaptor.AddChild(root_0, LineTerminator399_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop205;
            	        	    }
            	        	} while (true);

            	        	loop205:
            	        		;	// Stops C# compiler whining that label 'loop205' has no statements


            	        }
            	        break;
            	    case 2 :
            	        // AS3.g:1055:42: ';'
            	        {
            	        	char_literal400=(IToken)Match(input,90,FOLLOW_90_in_throwStatement5643); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal400_tree = (CommonTree)adaptor.Create(char_literal400);
            	        		adaptor.AddChild(root_0, char_literal400_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 72, throwStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "throwStatement"

    public class tryStatement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "tryStatement"
    // AS3.g:1058:1: tryStatement : 'try' ( LineTerminator )* blockStatement ( LineTerminator )* ( finallyClause | catchClause ( ( LineTerminator )* finallyClause )? ) ;
    public AS3Parser.tryStatement_return tryStatement() // throws RecognitionException [1]
    {   
        AS3Parser.tryStatement_return retval = new AS3Parser.tryStatement_return();
        retval.Start = input.LT(1);
        int tryStatement_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal401 = null;
        IToken LineTerminator402 = null;
        IToken LineTerminator404 = null;
        IToken LineTerminator407 = null;
        AS3Parser.blockStatement_return blockStatement403 = default(AS3Parser.blockStatement_return);

        AS3Parser.finallyClause_return finallyClause405 = default(AS3Parser.finallyClause_return);

        AS3Parser.catchClause_return catchClause406 = default(AS3Parser.catchClause_return);

        AS3Parser.finallyClause_return finallyClause408 = default(AS3Parser.finallyClause_return);


        CommonTree string_literal401_tree=null;
        CommonTree LineTerminator402_tree=null;
        CommonTree LineTerminator404_tree=null;
        CommonTree LineTerminator407_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 73) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1059:2: ( 'try' ( LineTerminator )* blockStatement ( LineTerminator )* ( finallyClause | catchClause ( ( LineTerminator )* finallyClause )? ) )
            // AS3.g:1059:4: 'try' ( LineTerminator )* blockStatement ( LineTerminator )* ( finallyClause | catchClause ( ( LineTerminator )* finallyClause )? )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal401=(IToken)Match(input,104,FOLLOW_104_in_tryStatement5655); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal401_tree = (CommonTree)adaptor.Create(string_literal401);
            		adaptor.AddChild(root_0, string_literal401_tree);
            	}
            	// AS3.g:1059:10: ( LineTerminator )*
            	do 
            	{
            	    int alt207 = 2;
            	    int LA207_0 = input.LA(1);

            	    if ( (LA207_0 == LineTerminator) )
            	    {
            	        alt207 = 1;
            	    }


            	    switch (alt207) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator402=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_tryStatement5657); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator402_tree = (CommonTree)adaptor.Create(LineTerminator402);
            			    		adaptor.AddChild(root_0, LineTerminator402_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop207;
            	    }
            	} while (true);

            	loop207:
            		;	// Stops C# compiler whining that label 'loop207' has no statements

            	PushFollow(FOLLOW_blockStatement_in_tryStatement5660);
            	blockStatement403 = blockStatement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, blockStatement403.Tree);
            	// AS3.g:1059:41: ( LineTerminator )*
            	do 
            	{
            	    int alt208 = 2;
            	    int LA208_0 = input.LA(1);

            	    if ( (LA208_0 == LineTerminator) )
            	    {
            	        alt208 = 1;
            	    }


            	    switch (alt208) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator404=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_tryStatement5662); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator404_tree = (CommonTree)adaptor.Create(LineTerminator404);
            			    		adaptor.AddChild(root_0, LineTerminator404_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop208;
            	    }
            	} while (true);

            	loop208:
            		;	// Stops C# compiler whining that label 'loop208' has no statements

            	// AS3.g:1059:57: ( finallyClause | catchClause ( ( LineTerminator )* finallyClause )? )
            	int alt211 = 2;
            	int LA211_0 = input.LA(1);

            	if ( (LA211_0 == 106) )
            	{
            	    alt211 = 1;
            	}
            	else if ( (LA211_0 == 105) )
            	{
            	    alt211 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d211s0 =
            	        new NoViableAltException("", 211, 0, input);

            	    throw nvae_d211s0;
            	}
            	switch (alt211) 
            	{
            	    case 1 :
            	        // AS3.g:1059:58: finallyClause
            	        {
            	        	PushFollow(FOLLOW_finallyClause_in_tryStatement5666);
            	        	finallyClause405 = finallyClause();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, finallyClause405.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // AS3.g:1059:74: catchClause ( ( LineTerminator )* finallyClause )?
            	        {
            	        	PushFollow(FOLLOW_catchClause_in_tryStatement5670);
            	        	catchClause406 = catchClause();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, catchClause406.Tree);
            	        	// AS3.g:1059:86: ( ( LineTerminator )* finallyClause )?
            	        	int alt210 = 2;
            	        	alt210 = dfa210.Predict(input);
            	        	switch (alt210) 
            	        	{
            	        	    case 1 :
            	        	        // AS3.g:1059:87: ( LineTerminator )* finallyClause
            	        	        {
            	        	        	// AS3.g:1059:87: ( LineTerminator )*
            	        	        	do 
            	        	        	{
            	        	        	    int alt209 = 2;
            	        	        	    int LA209_0 = input.LA(1);

            	        	        	    if ( (LA209_0 == LineTerminator) )
            	        	        	    {
            	        	        	        alt209 = 1;
            	        	        	    }


            	        	        	    switch (alt209) 
            	        	        		{
            	        	        			case 1 :
            	        	        			    // AS3.g:0:0: LineTerminator
            	        	        			    {
            	        	        			    	LineTerminator407=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_tryStatement5673); if (state.failed) return retval;
            	        	        			    	if ( state.backtracking == 0 )
            	        	        			    	{LineTerminator407_tree = (CommonTree)adaptor.Create(LineTerminator407);
            	        	        			    		adaptor.AddChild(root_0, LineTerminator407_tree);
            	        	        			    	}

            	        	        			    }
            	        	        			    break;

            	        	        			default:
            	        	        			    goto loop209;
            	        	        	    }
            	        	        	} while (true);

            	        	        	loop209:
            	        	        		;	// Stops C# compiler whining that label 'loop209' has no statements

            	        	        	PushFollow(FOLLOW_finallyClause_in_tryStatement5676);
            	        	        	finallyClause408 = finallyClause();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, finallyClause408.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 73, tryStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "tryStatement"

    public class catchClause_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "catchClause"
    // AS3.g:1062:1: catchClause : 'catch' ( LineTerminator )* '(' ( LineTerminator )* Identifier ( LineTerminator )* ')' ( LineTerminator )* blockStatement ;
    public AS3Parser.catchClause_return catchClause() // throws RecognitionException [1]
    {   
        AS3Parser.catchClause_return retval = new AS3Parser.catchClause_return();
        retval.Start = input.LT(1);
        int catchClause_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal409 = null;
        IToken LineTerminator410 = null;
        IToken char_literal411 = null;
        IToken LineTerminator412 = null;
        IToken Identifier413 = null;
        IToken LineTerminator414 = null;
        IToken char_literal415 = null;
        IToken LineTerminator416 = null;
        AS3Parser.blockStatement_return blockStatement417 = default(AS3Parser.blockStatement_return);


        CommonTree string_literal409_tree=null;
        CommonTree LineTerminator410_tree=null;
        CommonTree char_literal411_tree=null;
        CommonTree LineTerminator412_tree=null;
        CommonTree Identifier413_tree=null;
        CommonTree LineTerminator414_tree=null;
        CommonTree char_literal415_tree=null;
        CommonTree LineTerminator416_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 74) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1063:2: ( 'catch' ( LineTerminator )* '(' ( LineTerminator )* Identifier ( LineTerminator )* ')' ( LineTerminator )* blockStatement )
            // AS3.g:1063:4: 'catch' ( LineTerminator )* '(' ( LineTerminator )* Identifier ( LineTerminator )* ')' ( LineTerminator )* blockStatement
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal409=(IToken)Match(input,105,FOLLOW_105_in_catchClause5697); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal409_tree = (CommonTree)adaptor.Create(string_literal409);
            		adaptor.AddChild(root_0, string_literal409_tree);
            	}
            	// AS3.g:1063:12: ( LineTerminator )*
            	do 
            	{
            	    int alt212 = 2;
            	    int LA212_0 = input.LA(1);

            	    if ( (LA212_0 == LineTerminator) )
            	    {
            	        alt212 = 1;
            	    }


            	    switch (alt212) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator410=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_catchClause5699); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator410_tree = (CommonTree)adaptor.Create(LineTerminator410);
            			    		adaptor.AddChild(root_0, LineTerminator410_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop212;
            	    }
            	} while (true);

            	loop212:
            		;	// Stops C# compiler whining that label 'loop212' has no statements

            	char_literal411=(IToken)Match(input,36,FOLLOW_36_in_catchClause5702); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal411_tree = (CommonTree)adaptor.Create(char_literal411);
            		adaptor.AddChild(root_0, char_literal411_tree);
            	}
            	// AS3.g:1063:32: ( LineTerminator )*
            	do 
            	{
            	    int alt213 = 2;
            	    int LA213_0 = input.LA(1);

            	    if ( (LA213_0 == LineTerminator) )
            	    {
            	        alt213 = 1;
            	    }


            	    switch (alt213) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator412=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_catchClause5704); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator412_tree = (CommonTree)adaptor.Create(LineTerminator412);
            			    		adaptor.AddChild(root_0, LineTerminator412_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop213;
            	    }
            	} while (true);

            	loop213:
            		;	// Stops C# compiler whining that label 'loop213' has no statements

            	Identifier413=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_catchClause5707); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{Identifier413_tree = (CommonTree)adaptor.Create(Identifier413);
            		adaptor.AddChild(root_0, Identifier413_tree);
            	}
            	// AS3.g:1063:59: ( LineTerminator )*
            	do 
            	{
            	    int alt214 = 2;
            	    int LA214_0 = input.LA(1);

            	    if ( (LA214_0 == LineTerminator) )
            	    {
            	        alt214 = 1;
            	    }


            	    switch (alt214) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator414=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_catchClause5709); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator414_tree = (CommonTree)adaptor.Create(LineTerminator414);
            			    		adaptor.AddChild(root_0, LineTerminator414_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop214;
            	    }
            	} while (true);

            	loop214:
            		;	// Stops C# compiler whining that label 'loop214' has no statements

            	char_literal415=(IToken)Match(input,37,FOLLOW_37_in_catchClause5712); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal415_tree = (CommonTree)adaptor.Create(char_literal415);
            		adaptor.AddChild(root_0, char_literal415_tree);
            	}
            	// AS3.g:1063:79: ( LineTerminator )*
            	do 
            	{
            	    int alt215 = 2;
            	    int LA215_0 = input.LA(1);

            	    if ( (LA215_0 == LineTerminator) )
            	    {
            	        alt215 = 1;
            	    }


            	    switch (alt215) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator416=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_catchClause5714); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator416_tree = (CommonTree)adaptor.Create(LineTerminator416);
            			    		adaptor.AddChild(root_0, LineTerminator416_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop215;
            	    }
            	} while (true);

            	loop215:
            		;	// Stops C# compiler whining that label 'loop215' has no statements

            	PushFollow(FOLLOW_blockStatement_in_catchClause5717);
            	blockStatement417 = blockStatement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, blockStatement417.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 74, catchClause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public class finallyClause_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "finallyClause"
    // AS3.g:1066:1: finallyClause : 'finally' ( LineTerminator )* blockStatement ;
    public AS3Parser.finallyClause_return finallyClause() // throws RecognitionException [1]
    {   
        AS3Parser.finallyClause_return retval = new AS3Parser.finallyClause_return();
        retval.Start = input.LT(1);
        int finallyClause_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal418 = null;
        IToken LineTerminator419 = null;
        AS3Parser.blockStatement_return blockStatement420 = default(AS3Parser.blockStatement_return);


        CommonTree string_literal418_tree=null;
        CommonTree LineTerminator419_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 75) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1067:2: ( 'finally' ( LineTerminator )* blockStatement )
            // AS3.g:1067:4: 'finally' ( LineTerminator )* blockStatement
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal418=(IToken)Match(input,106,FOLLOW_106_in_finallyClause5729); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal418_tree = (CommonTree)adaptor.Create(string_literal418);
            		adaptor.AddChild(root_0, string_literal418_tree);
            	}
            	// AS3.g:1067:14: ( LineTerminator )*
            	do 
            	{
            	    int alt216 = 2;
            	    int LA216_0 = input.LA(1);

            	    if ( (LA216_0 == LineTerminator) )
            	    {
            	        alt216 = 1;
            	    }


            	    switch (alt216) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator419=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_finallyClause5731); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator419_tree = (CommonTree)adaptor.Create(LineTerminator419);
            			    		adaptor.AddChild(root_0, LineTerminator419_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop216;
            	    }
            	} while (true);

            	loop216:
            		;	// Stops C# compiler whining that label 'loop216' has no statements

            	PushFollow(FOLLOW_blockStatement_in_finallyClause5734);
            	blockStatement420 = blockStatement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, blockStatement420.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 75, finallyClause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "finallyClause"

    public class functionDeclaration_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "functionDeclaration"
    // AS3.g:1074:1: functionDeclaration : 'function' ( LineTerminator )* Identifier ( LineTerminator )* formalParameterList ( LineTerminator )* functionBody ;
    public AS3Parser.functionDeclaration_return functionDeclaration() // throws RecognitionException [1]
    {   
        AS3Parser.functionDeclaration_return retval = new AS3Parser.functionDeclaration_return();
        retval.Start = input.LT(1);
        int functionDeclaration_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal421 = null;
        IToken LineTerminator422 = null;
        IToken Identifier423 = null;
        IToken LineTerminator424 = null;
        IToken LineTerminator426 = null;
        AS3Parser.formalParameterList_return formalParameterList425 = default(AS3Parser.formalParameterList_return);

        AS3Parser.functionBody_return functionBody427 = default(AS3Parser.functionBody_return);


        CommonTree string_literal421_tree=null;
        CommonTree LineTerminator422_tree=null;
        CommonTree Identifier423_tree=null;
        CommonTree LineTerminator424_tree=null;
        CommonTree LineTerminator426_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 76) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1075:2: ( 'function' ( LineTerminator )* Identifier ( LineTerminator )* formalParameterList ( LineTerminator )* functionBody )
            // AS3.g:1075:4: 'function' ( LineTerminator )* Identifier ( LineTerminator )* formalParameterList ( LineTerminator )* functionBody
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal421=(IToken)Match(input,107,FOLLOW_107_in_functionDeclaration5749); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal421_tree = (CommonTree)adaptor.Create(string_literal421);
            		adaptor.AddChild(root_0, string_literal421_tree);
            	}
            	// AS3.g:1075:15: ( LineTerminator )*
            	do 
            	{
            	    int alt217 = 2;
            	    int LA217_0 = input.LA(1);

            	    if ( (LA217_0 == LineTerminator) )
            	    {
            	        alt217 = 1;
            	    }


            	    switch (alt217) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator422=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_functionDeclaration5751); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator422_tree = (CommonTree)adaptor.Create(LineTerminator422);
            			    		adaptor.AddChild(root_0, LineTerminator422_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop217;
            	    }
            	} while (true);

            	loop217:
            		;	// Stops C# compiler whining that label 'loop217' has no statements

            	Identifier423=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_functionDeclaration5754); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{Identifier423_tree = (CommonTree)adaptor.Create(Identifier423);
            		adaptor.AddChild(root_0, Identifier423_tree);
            	}
            	// AS3.g:1075:42: ( LineTerminator )*
            	do 
            	{
            	    int alt218 = 2;
            	    int LA218_0 = input.LA(1);

            	    if ( (LA218_0 == LineTerminator) )
            	    {
            	        alt218 = 1;
            	    }


            	    switch (alt218) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator424=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_functionDeclaration5756); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator424_tree = (CommonTree)adaptor.Create(LineTerminator424);
            			    		adaptor.AddChild(root_0, LineTerminator424_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop218;
            	    }
            	} while (true);

            	loop218:
            		;	// Stops C# compiler whining that label 'loop218' has no statements

            	PushFollow(FOLLOW_formalParameterList_in_functionDeclaration5759);
            	formalParameterList425 = formalParameterList();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formalParameterList425.Tree);
            	// AS3.g:1075:78: ( LineTerminator )*
            	do 
            	{
            	    int alt219 = 2;
            	    int LA219_0 = input.LA(1);

            	    if ( (LA219_0 == LineTerminator) )
            	    {
            	        alt219 = 1;
            	    }


            	    switch (alt219) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator426=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_functionDeclaration5761); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator426_tree = (CommonTree)adaptor.Create(LineTerminator426);
            			    		adaptor.AddChild(root_0, LineTerminator426_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop219;
            	    }
            	} while (true);

            	loop219:
            		;	// Stops C# compiler whining that label 'loop219' has no statements

            	PushFollow(FOLLOW_functionBody_in_functionDeclaration5764);
            	functionBody427 = functionBody();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, functionBody427.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 76, functionDeclaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "functionDeclaration"

    public class functionExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "functionExpression"
    // AS3.g:1078:1: functionExpression : 'function' ( LineTerminator )* ( Identifier )? ( LineTerminator )* formalParameterList ( LineTerminator )* functionBody ;
    public AS3Parser.functionExpression_return functionExpression() // throws RecognitionException [1]
    {   
        AS3Parser.functionExpression_return retval = new AS3Parser.functionExpression_return();
        retval.Start = input.LT(1);
        int functionExpression_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken string_literal428 = null;
        IToken LineTerminator429 = null;
        IToken Identifier430 = null;
        IToken LineTerminator431 = null;
        IToken LineTerminator433 = null;
        AS3Parser.formalParameterList_return formalParameterList432 = default(AS3Parser.formalParameterList_return);

        AS3Parser.functionBody_return functionBody434 = default(AS3Parser.functionBody_return);


        CommonTree string_literal428_tree=null;
        CommonTree LineTerminator429_tree=null;
        CommonTree Identifier430_tree=null;
        CommonTree LineTerminator431_tree=null;
        CommonTree LineTerminator433_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 77) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1079:2: ( 'function' ( LineTerminator )* ( Identifier )? ( LineTerminator )* formalParameterList ( LineTerminator )* functionBody )
            // AS3.g:1079:4: 'function' ( LineTerminator )* ( Identifier )? ( LineTerminator )* formalParameterList ( LineTerminator )* functionBody
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	string_literal428=(IToken)Match(input,107,FOLLOW_107_in_functionExpression5776); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal428_tree = (CommonTree)adaptor.Create(string_literal428);
            		adaptor.AddChild(root_0, string_literal428_tree);
            	}
            	// AS3.g:1079:15: ( LineTerminator )*
            	do 
            	{
            	    int alt220 = 2;
            	    int LA220_0 = input.LA(1);

            	    if ( (LA220_0 == LineTerminator) )
            	    {
            	        int LA220_2 = input.LA(2);

            	        if ( (synpred290_AS3()) )
            	        {
            	            alt220 = 1;
            	        }


            	    }


            	    switch (alt220) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator429=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_functionExpression5778); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator429_tree = (CommonTree)adaptor.Create(LineTerminator429);
            			    		adaptor.AddChild(root_0, LineTerminator429_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop220;
            	    }
            	} while (true);

            	loop220:
            		;	// Stops C# compiler whining that label 'loop220' has no statements

            	// AS3.g:1079:31: ( Identifier )?
            	int alt221 = 2;
            	int LA221_0 = input.LA(1);

            	if ( (LA221_0 == Identifier) )
            	{
            	    alt221 = 1;
            	}
            	switch (alt221) 
            	{
            	    case 1 :
            	        // AS3.g:0:0: Identifier
            	        {
            	        	Identifier430=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_functionExpression5781); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{Identifier430_tree = (CommonTree)adaptor.Create(Identifier430);
            	        		adaptor.AddChild(root_0, Identifier430_tree);
            	        	}

            	        }
            	        break;

            	}

            	// AS3.g:1079:43: ( LineTerminator )*
            	do 
            	{
            	    int alt222 = 2;
            	    int LA222_0 = input.LA(1);

            	    if ( (LA222_0 == LineTerminator) )
            	    {
            	        alt222 = 1;
            	    }


            	    switch (alt222) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator431=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_functionExpression5784); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator431_tree = (CommonTree)adaptor.Create(LineTerminator431);
            			    		adaptor.AddChild(root_0, LineTerminator431_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop222;
            	    }
            	} while (true);

            	loop222:
            		;	// Stops C# compiler whining that label 'loop222' has no statements

            	PushFollow(FOLLOW_formalParameterList_in_functionExpression5787);
            	formalParameterList432 = formalParameterList();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formalParameterList432.Tree);
            	// AS3.g:1079:79: ( LineTerminator )*
            	do 
            	{
            	    int alt223 = 2;
            	    int LA223_0 = input.LA(1);

            	    if ( (LA223_0 == LineTerminator) )
            	    {
            	        alt223 = 1;
            	    }


            	    switch (alt223) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator433=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_functionExpression5789); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator433_tree = (CommonTree)adaptor.Create(LineTerminator433);
            			    		adaptor.AddChild(root_0, LineTerminator433_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop223;
            	    }
            	} while (true);

            	loop223:
            		;	// Stops C# compiler whining that label 'loop223' has no statements

            	PushFollow(FOLLOW_functionBody_in_functionExpression5792);
            	functionBody434 = functionBody();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, functionBody434.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 77, functionExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "functionExpression"

    public class formalParameterList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "formalParameterList"
    // AS3.g:1082:1: formalParameterList : '(' ( ( LineTerminator )* Identifier ( ( LineTerminator )* ',' ( LineTerminator )* Identifier )* )? ( LineTerminator )* ')' ;
    public AS3Parser.formalParameterList_return formalParameterList() // throws RecognitionException [1]
    {   
        AS3Parser.formalParameterList_return retval = new AS3Parser.formalParameterList_return();
        retval.Start = input.LT(1);
        int formalParameterList_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal435 = null;
        IToken LineTerminator436 = null;
        IToken Identifier437 = null;
        IToken LineTerminator438 = null;
        IToken char_literal439 = null;
        IToken LineTerminator440 = null;
        IToken Identifier441 = null;
        IToken LineTerminator442 = null;
        IToken char_literal443 = null;

        CommonTree char_literal435_tree=null;
        CommonTree LineTerminator436_tree=null;
        CommonTree Identifier437_tree=null;
        CommonTree LineTerminator438_tree=null;
        CommonTree char_literal439_tree=null;
        CommonTree LineTerminator440_tree=null;
        CommonTree Identifier441_tree=null;
        CommonTree LineTerminator442_tree=null;
        CommonTree char_literal443_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 78) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1083:2: ( '(' ( ( LineTerminator )* Identifier ( ( LineTerminator )* ',' ( LineTerminator )* Identifier )* )? ( LineTerminator )* ')' )
            // AS3.g:1083:4: '(' ( ( LineTerminator )* Identifier ( ( LineTerminator )* ',' ( LineTerminator )* Identifier )* )? ( LineTerminator )* ')'
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal435=(IToken)Match(input,36,FOLLOW_36_in_formalParameterList5803); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal435_tree = (CommonTree)adaptor.Create(char_literal435);
            		adaptor.AddChild(root_0, char_literal435_tree);
            	}
            	// AS3.g:1083:8: ( ( LineTerminator )* Identifier ( ( LineTerminator )* ',' ( LineTerminator )* Identifier )* )?
            	int alt228 = 2;
            	int LA228_0 = input.LA(1);

            	if ( (LA228_0 == LineTerminator) )
            	{
            	    int LA228_1 = input.LA(2);

            	    if ( (LA228_1 == LineTerminator) )
            	    {
            	        int LA228_5 = input.LA(3);

            	        if ( (synpred298_AS3()) )
            	        {
            	            alt228 = 1;
            	        }
            	    }
            	    else if ( (LA228_1 == Identifier) )
            	    {
            	        alt228 = 1;
            	    }
            	}
            	else if ( (LA228_0 == Identifier) )
            	{
            	    alt228 = 1;
            	}
            	switch (alt228) 
            	{
            	    case 1 :
            	        // AS3.g:1083:9: ( LineTerminator )* Identifier ( ( LineTerminator )* ',' ( LineTerminator )* Identifier )*
            	        {
            	        	// AS3.g:1083:9: ( LineTerminator )*
            	        	do 
            	        	{
            	        	    int alt224 = 2;
            	        	    int LA224_0 = input.LA(1);

            	        	    if ( (LA224_0 == LineTerminator) )
            	        	    {
            	        	        alt224 = 1;
            	        	    }


            	        	    switch (alt224) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:0:0: LineTerminator
            	        			    {
            	        			    	LineTerminator436=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_formalParameterList5806); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{LineTerminator436_tree = (CommonTree)adaptor.Create(LineTerminator436);
            	        			    		adaptor.AddChild(root_0, LineTerminator436_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop224;
            	        	    }
            	        	} while (true);

            	        	loop224:
            	        		;	// Stops C# compiler whining that label 'loop224' has no statements

            	        	Identifier437=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_formalParameterList5809); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{Identifier437_tree = (CommonTree)adaptor.Create(Identifier437);
            	        		adaptor.AddChild(root_0, Identifier437_tree);
            	        	}
            	        	// AS3.g:1083:36: ( ( LineTerminator )* ',' ( LineTerminator )* Identifier )*
            	        	do 
            	        	{
            	        	    int alt227 = 2;
            	        	    int LA227_0 = input.LA(1);

            	        	    if ( (LA227_0 == LineTerminator) )
            	        	    {
            	        	        int LA227_1 = input.LA(2);

            	        	        if ( (LA227_1 == 39) )
            	        	        {
            	        	            alt227 = 1;
            	        	        }
            	        	        else if ( (LA227_1 == LineTerminator) )
            	        	        {
            	        	            int LA227_5 = input.LA(3);

            	        	            if ( (synpred297_AS3()) )
            	        	            {
            	        	                alt227 = 1;
            	        	            }


            	        	        }


            	        	    }
            	        	    else if ( (LA227_0 == 39) )
            	        	    {
            	        	        alt227 = 1;
            	        	    }


            	        	    switch (alt227) 
            	        		{
            	        			case 1 :
            	        			    // AS3.g:1083:37: ( LineTerminator )* ',' ( LineTerminator )* Identifier
            	        			    {
            	        			    	// AS3.g:1083:37: ( LineTerminator )*
            	        			    	do 
            	        			    	{
            	        			    	    int alt225 = 2;
            	        			    	    int LA225_0 = input.LA(1);

            	        			    	    if ( (LA225_0 == LineTerminator) )
            	        			    	    {
            	        			    	        alt225 = 1;
            	        			    	    }


            	        			    	    switch (alt225) 
            	        			    		{
            	        			    			case 1 :
            	        			    			    // AS3.g:0:0: LineTerminator
            	        			    			    {
            	        			    			    	LineTerminator438=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_formalParameterList5812); if (state.failed) return retval;
            	        			    			    	if ( state.backtracking == 0 )
            	        			    			    	{LineTerminator438_tree = (CommonTree)adaptor.Create(LineTerminator438);
            	        			    			    		adaptor.AddChild(root_0, LineTerminator438_tree);
            	        			    			    	}

            	        			    			    }
            	        			    			    break;

            	        			    			default:
            	        			    			    goto loop225;
            	        			    	    }
            	        			    	} while (true);

            	        			    	loop225:
            	        			    		;	// Stops C# compiler whining that label 'loop225' has no statements

            	        			    	char_literal439=(IToken)Match(input,39,FOLLOW_39_in_formalParameterList5815); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{char_literal439_tree = (CommonTree)adaptor.Create(char_literal439);
            	        			    		adaptor.AddChild(root_0, char_literal439_tree);
            	        			    	}
            	        			    	// AS3.g:1083:57: ( LineTerminator )*
            	        			    	do 
            	        			    	{
            	        			    	    int alt226 = 2;
            	        			    	    int LA226_0 = input.LA(1);

            	        			    	    if ( (LA226_0 == LineTerminator) )
            	        			    	    {
            	        			    	        alt226 = 1;
            	        			    	    }


            	        			    	    switch (alt226) 
            	        			    		{
            	        			    			case 1 :
            	        			    			    // AS3.g:0:0: LineTerminator
            	        			    			    {
            	        			    			    	LineTerminator440=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_formalParameterList5817); if (state.failed) return retval;
            	        			    			    	if ( state.backtracking == 0 )
            	        			    			    	{LineTerminator440_tree = (CommonTree)adaptor.Create(LineTerminator440);
            	        			    			    		adaptor.AddChild(root_0, LineTerminator440_tree);
            	        			    			    	}

            	        			    			    }
            	        			    			    break;

            	        			    			default:
            	        			    			    goto loop226;
            	        			    	    }
            	        			    	} while (true);

            	        			    	loop226:
            	        			    		;	// Stops C# compiler whining that label 'loop226' has no statements

            	        			    	Identifier441=(IToken)Match(input,Identifier,FOLLOW_Identifier_in_formalParameterList5820); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{Identifier441_tree = (CommonTree)adaptor.Create(Identifier441);
            	        			    		adaptor.AddChild(root_0, Identifier441_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop227;
            	        	    }
            	        	} while (true);

            	        	loop227:
            	        		;	// Stops C# compiler whining that label 'loop227' has no statements


            	        }
            	        break;

            	}

            	// AS3.g:1083:88: ( LineTerminator )*
            	do 
            	{
            	    int alt229 = 2;
            	    int LA229_0 = input.LA(1);

            	    if ( (LA229_0 == LineTerminator) )
            	    {
            	        alt229 = 1;
            	    }


            	    switch (alt229) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator442=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_formalParameterList5826); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator442_tree = (CommonTree)adaptor.Create(LineTerminator442);
            			    		adaptor.AddChild(root_0, LineTerminator442_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop229;
            	    }
            	} while (true);

            	loop229:
            		;	// Stops C# compiler whining that label 'loop229' has no statements

            	char_literal443=(IToken)Match(input,37,FOLLOW_37_in_formalParameterList5829); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal443_tree = (CommonTree)adaptor.Create(char_literal443);
            		adaptor.AddChild(root_0, char_literal443_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 78, formalParameterList_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "formalParameterList"

    public class functionBody_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "functionBody"
    // AS3.g:1086:1: functionBody : '{' ( LineTerminator )* sourceElements ( LineTerminator )* '}' ;
    public AS3Parser.functionBody_return functionBody() // throws RecognitionException [1]
    {   
        AS3Parser.functionBody_return retval = new AS3Parser.functionBody_return();
        retval.Start = input.LT(1);
        int functionBody_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken char_literal444 = null;
        IToken LineTerminator445 = null;
        IToken LineTerminator447 = null;
        IToken char_literal448 = null;
        AS3Parser.sourceElements_return sourceElements446 = default(AS3Parser.sourceElements_return);


        CommonTree char_literal444_tree=null;
        CommonTree LineTerminator445_tree=null;
        CommonTree LineTerminator447_tree=null;
        CommonTree char_literal448_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 79) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1087:2: ( '{' ( LineTerminator )* sourceElements ( LineTerminator )* '}' )
            // AS3.g:1087:4: '{' ( LineTerminator )* sourceElements ( LineTerminator )* '}'
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	char_literal444=(IToken)Match(input,41,FOLLOW_41_in_functionBody5841); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal444_tree = (CommonTree)adaptor.Create(char_literal444);
            		adaptor.AddChild(root_0, char_literal444_tree);
            	}
            	// AS3.g:1087:8: ( LineTerminator )*
            	do 
            	{
            	    int alt230 = 2;
            	    alt230 = dfa230.Predict(input);
            	    switch (alt230) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator445=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_functionBody5843); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator445_tree = (CommonTree)adaptor.Create(LineTerminator445);
            			    		adaptor.AddChild(root_0, LineTerminator445_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop230;
            	    }
            	} while (true);

            	loop230:
            		;	// Stops C# compiler whining that label 'loop230' has no statements

            	PushFollow(FOLLOW_sourceElements_in_functionBody5846);
            	sourceElements446 = sourceElements();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, sourceElements446.Tree);
            	// AS3.g:1087:39: ( LineTerminator )*
            	do 
            	{
            	    int alt231 = 2;
            	    int LA231_0 = input.LA(1);

            	    if ( (LA231_0 == LineTerminator) )
            	    {
            	        alt231 = 1;
            	    }


            	    switch (alt231) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator447=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_functionBody5848); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator447_tree = (CommonTree)adaptor.Create(LineTerminator447);
            			    		adaptor.AddChild(root_0, LineTerminator447_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop231;
            	    }
            	} while (true);

            	loop231:
            		;	// Stops C# compiler whining that label 'loop231' has no statements

            	char_literal448=(IToken)Match(input,42,FOLLOW_42_in_functionBody5851); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal448_tree = (CommonTree)adaptor.Create(char_literal448);
            		adaptor.AddChild(root_0, char_literal448_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 79, functionBody_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "functionBody"

    public class program_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "program"
    // AS3.g:1090:1: program : ( LineTerminator )* sourceElements ( LineTerminator )* EOF ;
    public AS3Parser.program_return program() // throws RecognitionException [1]
    {   
        AS3Parser.program_return retval = new AS3Parser.program_return();
        retval.Start = input.LT(1);
        int program_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator449 = null;
        IToken LineTerminator451 = null;
        IToken EOF452 = null;
        AS3Parser.sourceElements_return sourceElements450 = default(AS3Parser.sourceElements_return);


        CommonTree LineTerminator449_tree=null;
        CommonTree LineTerminator451_tree=null;
        CommonTree EOF452_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 80) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1091:2: ( ( LineTerminator )* sourceElements ( LineTerminator )* EOF )
            // AS3.g:1091:4: ( LineTerminator )* sourceElements ( LineTerminator )* EOF
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	// AS3.g:1091:4: ( LineTerminator )*
            	do 
            	{
            	    int alt232 = 2;
            	    alt232 = dfa232.Predict(input);
            	    switch (alt232) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator449=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_program5863); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator449_tree = (CommonTree)adaptor.Create(LineTerminator449);
            			    		adaptor.AddChild(root_0, LineTerminator449_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop232;
            	    }
            	} while (true);

            	loop232:
            		;	// Stops C# compiler whining that label 'loop232' has no statements

            	PushFollow(FOLLOW_sourceElements_in_program5866);
            	sourceElements450 = sourceElements();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, sourceElements450.Tree);
            	// AS3.g:1091:35: ( LineTerminator )*
            	do 
            	{
            	    int alt233 = 2;
            	    int LA233_0 = input.LA(1);

            	    if ( (LA233_0 == LineTerminator) )
            	    {
            	        alt233 = 1;
            	    }


            	    switch (alt233) 
            		{
            			case 1 :
            			    // AS3.g:0:0: LineTerminator
            			    {
            			    	LineTerminator451=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_program5868); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{LineTerminator451_tree = (CommonTree)adaptor.Create(LineTerminator451);
            			    		adaptor.AddChild(root_0, LineTerminator451_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop233;
            	    }
            	} while (true);

            	loop233:
            		;	// Stops C# compiler whining that label 'loop233' has no statements

            	EOF452=(IToken)Match(input,EOF,FOLLOW_EOF_in_program5871); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{EOF452_tree = (CommonTree)adaptor.Create(EOF452);
            		adaptor.AddChild(root_0, EOF452_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 80, program_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "program"

    public class sourceElements_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "sourceElements"
    // AS3.g:1094:1: sourceElements : sourceElement ( ( LineTerminator )* sourceElement )* ;
    public AS3Parser.sourceElements_return sourceElements() // throws RecognitionException [1]
    {   
        AS3Parser.sourceElements_return retval = new AS3Parser.sourceElements_return();
        retval.Start = input.LT(1);
        int sourceElements_StartIndex = input.Index();
        CommonTree root_0 = null;

        IToken LineTerminator454 = null;
        AS3Parser.sourceElement_return sourceElement453 = default(AS3Parser.sourceElement_return);

        AS3Parser.sourceElement_return sourceElement455 = default(AS3Parser.sourceElement_return);


        CommonTree LineTerminator454_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 81) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1095:2: ( sourceElement ( ( LineTerminator )* sourceElement )* )
            // AS3.g:1095:4: sourceElement ( ( LineTerminator )* sourceElement )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_sourceElement_in_sourceElements5882);
            	sourceElement453 = sourceElement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, sourceElement453.Tree);
            	// AS3.g:1095:18: ( ( LineTerminator )* sourceElement )*
            	do 
            	{
            	    int alt235 = 2;
            	    alt235 = dfa235.Predict(input);
            	    switch (alt235) 
            		{
            			case 1 :
            			    // AS3.g:1095:19: ( LineTerminator )* sourceElement
            			    {
            			    	// AS3.g:1095:19: ( LineTerminator )*
            			    	do 
            			    	{
            			    	    int alt234 = 2;
            			    	    alt234 = dfa234.Predict(input);
            			    	    switch (alt234) 
            			    		{
            			    			case 1 :
            			    			    // AS3.g:0:0: LineTerminator
            			    			    {
            			    			    	LineTerminator454=(IToken)Match(input,LineTerminator,FOLLOW_LineTerminator_in_sourceElements5885); if (state.failed) return retval;
            			    			    	if ( state.backtracking == 0 )
            			    			    	{LineTerminator454_tree = (CommonTree)adaptor.Create(LineTerminator454);
            			    			    		adaptor.AddChild(root_0, LineTerminator454_tree);
            			    			    	}

            			    			    }
            			    			    break;

            			    			default:
            			    			    goto loop234;
            			    	    }
            			    	} while (true);

            			    	loop234:
            			    		;	// Stops C# compiler whining that label 'loop234' has no statements

            			    	PushFollow(FOLLOW_sourceElement_in_sourceElements5888);
            			    	sourceElement455 = sourceElement();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, sourceElement455.Tree);

            			    }
            			    break;

            			default:
            			    goto loop235;
            	    }
            	} while (true);

            	loop235:
            		;	// Stops C# compiler whining that label 'loop235' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 81, sourceElements_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "sourceElements"

    public class sourceElement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "sourceElement"
    // AS3.g:1098:1: sourceElement : ( statement | functionDeclaration );
    public AS3Parser.sourceElement_return sourceElement() // throws RecognitionException [1]
    {   
        AS3Parser.sourceElement_return retval = new AS3Parser.sourceElement_return();
        retval.Start = input.LT(1);
        int sourceElement_StartIndex = input.Index();
        CommonTree root_0 = null;

        AS3Parser.statement_return statement456 = default(AS3Parser.statement_return);

        AS3Parser.functionDeclaration_return functionDeclaration457 = default(AS3Parser.functionDeclaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 82) ) 
    	    {
    	    	return retval; 
    	    }
            // AS3.g:1099:2: ( statement | functionDeclaration )
            int alt236 = 2;
            alt236 = dfa236.Predict(input);
            switch (alt236) 
            {
                case 1 :
                    // AS3.g:1099:4: statement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_statement_in_sourceElement5901);
                    	statement456 = statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement456.Tree);

                    }
                    break;
                case 2 :
                    // AS3.g:1100:4: functionDeclaration
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_functionDeclaration_in_sourceElement5906);
                    	functionDeclaration457 = functionDeclaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, functionDeclaration457.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (CommonTree)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 82, sourceElement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "sourceElement"

    // $ANTLR start "synpred11_AS3"
    public void synpred11_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:751:8: ( LineTerminator )
        // AS3.g:751:8: LineTerminator
        {
        	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred11_AS33631); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred11_AS3"

    // $ANTLR start "synpred15_AS3"
    public void synpred15_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:751:68: ( ( LineTerminator )* assignmentExpression )
        // AS3.g:751:68: ( LineTerminator )* assignmentExpression
        {
        	// AS3.g:751:68: ( LineTerminator )*
        	do 
        	{
        	    int alt237 = 2;
        	    alt237 = dfa237.Predict(input);
        	    switch (alt237) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred15_AS33644); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop237;
        	    }
        	} while (true);

        	loop237:
        		;	// Stops C# compiler whining that label 'loop237' has no statements

        	PushFollow(FOLLOW_assignmentExpression_in_synpred15_AS33647);
        	assignmentExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred15_AS3"

    // $ANTLR start "synpred16_AS3"
    public void synpred16_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:751:47: ( ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )? )
        // AS3.g:751:47: ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )?
        {
        	// AS3.g:751:47: ( LineTerminator )*
        	do 
        	{
        	    int alt238 = 2;
        	    int LA238_0 = input.LA(1);

        	    if ( (LA238_0 == LineTerminator) )
        	    {
        	        alt238 = 1;
        	    }


        	    switch (alt238) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred16_AS33638); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop238;
        	    }
        	} while (true);

        	loop238:
        		;	// Stops C# compiler whining that label 'loop238' has no statements

        	Match(input,39,FOLLOW_39_in_synpred16_AS33641); if (state.failed) return ;
        	// AS3.g:751:67: ( ( LineTerminator )* assignmentExpression )?
        	int alt240 = 2;
        	alt240 = dfa240.Predict(input);
        	switch (alt240) 
        	{
        	    case 1 :
        	        // AS3.g:751:68: ( LineTerminator )* assignmentExpression
        	        {
        	        	// AS3.g:751:68: ( LineTerminator )*
        	        	do 
        	        	{
        	        	    int alt239 = 2;
        	        	    alt239 = dfa239.Predict(input);
        	        	    switch (alt239) 
        	        		{
        	        			case 1 :
        	        			    // AS3.g:0:0: LineTerminator
        	        			    {
        	        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred16_AS33644); if (state.failed) return ;

        	        			    }
        	        			    break;

        	        			default:
        	        			    goto loop239;
        	        	    }
        	        	} while (true);

        	        	loop239:
        	        		;	// Stops C# compiler whining that label 'loop239' has no statements

        	        	PushFollow(FOLLOW_assignmentExpression_in_synpred16_AS33647);
        	        	assignmentExpression();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}


        }
    }
    // $ANTLR end "synpred16_AS3"

    // $ANTLR start "synpred21_AS3"
    public void synpred21_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:755:46: ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )
        // AS3.g:755:46: ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue
        {
        	// AS3.g:755:46: ( LineTerminator )*
        	do 
        	{
        	    int alt241 = 2;
        	    int LA241_0 = input.LA(1);

        	    if ( (LA241_0 == LineTerminator) )
        	    {
        	        alt241 = 1;
        	    }


        	    switch (alt241) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred21_AS33676); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop241;
        	    }
        	} while (true);

        	loop241:
        		;	// Stops C# compiler whining that label 'loop241' has no statements

        	Match(input,39,FOLLOW_39_in_synpred21_AS33679); if (state.failed) return ;
        	// AS3.g:755:66: ( LineTerminator )*
        	do 
        	{
        	    int alt242 = 2;
        	    int LA242_0 = input.LA(1);

        	    if ( (LA242_0 == LineTerminator) )
        	    {
        	        alt242 = 1;
        	    }


        	    switch (alt242) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred21_AS33681); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop242;
        	    }
        	} while (true);

        	loop242:
        		;	// Stops C# compiler whining that label 'loop242' has no statements

        	PushFollow(FOLLOW_propertyNameAndValue_in_synpred21_AS33684);
        	propertyNameAndValue();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred21_AS3"

    // $ANTLR start "synpred32_AS3"
    public void synpred32_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:769:116: ( ( LineTerminator )* memberExpressionSuffix )
        // AS3.g:769:116: ( LineTerminator )* memberExpressionSuffix
        {
        	// AS3.g:769:116: ( LineTerminator )*
        	do 
        	{
        	    int alt243 = 2;
        	    int LA243_0 = input.LA(1);

        	    if ( (LA243_0 == LineTerminator) )
        	    {
        	        alt243 = 1;
        	    }


        	    switch (alt243) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred32_AS33768); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop243;
        	    }
        	} while (true);

        	loop243:
        		;	// Stops C# compiler whining that label 'loop243' has no statements

        	PushFollow(FOLLOW_memberExpressionSuffix_in_synpred32_AS33771);
        	memberExpressionSuffix();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred32_AS3"

    // $ANTLR start "synpred34_AS3"
    public void synpred34_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:778:4: ( memberExpression )
        // AS3.g:778:4: memberExpression
        {
        	PushFollow(FOLLOW_memberExpression_in_synpred34_AS33802);
        	memberExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred34_AS3"

    // $ANTLR start "synpred38_AS3"
    public void synpred38_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:783:51: ( ( LineTerminator )* callExpressionSuffix )
        // AS3.g:783:51: ( LineTerminator )* callExpressionSuffix
        {
        	// AS3.g:783:51: ( LineTerminator )*
        	do 
        	{
        	    int alt244 = 2;
        	    int LA244_0 = input.LA(1);

        	    if ( (LA244_0 == LineTerminator) )
        	    {
        	        alt244 = 1;
        	    }


        	    switch (alt244) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred38_AS33832); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop244;
        	    }
        	} while (true);

        	loop244:
        		;	// Stops C# compiler whining that label 'loop244' has no statements

        	PushFollow(FOLLOW_callExpressionSuffix_in_synpred38_AS33835);
        	callExpressionSuffix();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred38_AS3"

    // $ANTLR start "synpred47_AS3"
    public void synpred47_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:801:47: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )
        // AS3.g:801:47: ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression
        {
        	// AS3.g:801:47: ( LineTerminator )*
        	do 
        	{
        	    int alt245 = 2;
        	    int LA245_0 = input.LA(1);

        	    if ( (LA245_0 == LineTerminator) )
        	    {
        	        alt245 = 1;
        	    }


        	    switch (alt245) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred47_AS33919); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop245;
        	    }
        	} while (true);

        	loop245:
        		;	// Stops C# compiler whining that label 'loop245' has no statements

        	Match(input,39,FOLLOW_39_in_synpred47_AS33922); if (state.failed) return ;
        	// AS3.g:801:67: ( LineTerminator )*
        	do 
        	{
        	    int alt246 = 2;
        	    alt246 = dfa246.Predict(input);
        	    switch (alt246) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred47_AS33924); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop246;
        	    }
        	} while (true);

        	loop246:
        		;	// Stops C# compiler whining that label 'loop246' has no statements

        	PushFollow(FOLLOW_assignmentExpression_in_synpred47_AS33927);
        	assignmentExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred47_AS3"

    // $ANTLR start "synpred48_AS3"
    public void synpred48_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:801:9: ( ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )
        // AS3.g:801:9: ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*
        {
        	// AS3.g:801:9: ( LineTerminator )*
        	do 
        	{
        	    int alt247 = 2;
        	    alt247 = dfa247.Predict(input);
        	    switch (alt247) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred48_AS33913); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop247;
        	    }
        	} while (true);

        	loop247:
        		;	// Stops C# compiler whining that label 'loop247' has no statements

        	PushFollow(FOLLOW_assignmentExpression_in_synpred48_AS33916);
        	assignmentExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// AS3.g:801:46: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*
        	do 
        	{
        	    int alt250 = 2;
        	    int LA250_0 = input.LA(1);

        	    if ( (LA250_0 == LineTerminator || LA250_0 == 39) )
        	    {
        	        alt250 = 1;
        	    }


        	    switch (alt250) 
        		{
        			case 1 :
        			    // AS3.g:801:47: ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression
        			    {
        			    	// AS3.g:801:47: ( LineTerminator )*
        			    	do 
        			    	{
        			    	    int alt248 = 2;
        			    	    int LA248_0 = input.LA(1);

        			    	    if ( (LA248_0 == LineTerminator) )
        			    	    {
        			    	        alt248 = 1;
        			    	    }


        			    	    switch (alt248) 
        			    		{
        			    			case 1 :
        			    			    // AS3.g:0:0: LineTerminator
        			    			    {
        			    			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred48_AS33919); if (state.failed) return ;

        			    			    }
        			    			    break;

        			    			default:
        			    			    goto loop248;
        			    	    }
        			    	} while (true);

        			    	loop248:
        			    		;	// Stops C# compiler whining that label 'loop248' has no statements

        			    	Match(input,39,FOLLOW_39_in_synpred48_AS33922); if (state.failed) return ;
        			    	// AS3.g:801:67: ( LineTerminator )*
        			    	do 
        			    	{
        			    	    int alt249 = 2;
        			    	    alt249 = dfa249.Predict(input);
        			    	    switch (alt249) 
        			    		{
        			    			case 1 :
        			    			    // AS3.g:0:0: LineTerminator
        			    			    {
        			    			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred48_AS33924); if (state.failed) return ;

        			    			    }
        			    			    break;

        			    			default:
        			    			    goto loop249;
        			    	    }
        			    	} while (true);

        			    	loop249:
        			    		;	// Stops C# compiler whining that label 'loop249' has no statements

        			    	PushFollow(FOLLOW_assignmentExpression_in_synpred48_AS33927);
        			    	assignmentExpression();
        			    	state.followingStackPointer--;
        			    	if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop250;
        	    }
        	} while (true);

        	loop250:
        		;	// Stops C# compiler whining that label 'loop250' has no statements


        }
    }
    // $ANTLR end "synpred48_AS3"

    // $ANTLR start "synpred50_AS3"
    public void synpred50_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:805:4: ( callExpression )
        // AS3.g:805:4: callExpression
        {
        	PushFollow(FOLLOW_callExpression_in_synpred50_AS33948);
        	callExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred50_AS3"

    // $ANTLR start "synpred66_AS3"
    public void synpred66_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:819:21: ( ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression )
        // AS3.g:819:21: ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression
        {
        	// AS3.g:819:21: ( LineTerminator )*
        	do 
        	{
        	    int alt251 = 2;
        	    int LA251_0 = input.LA(1);

        	    if ( (LA251_0 == LineTerminator) )
        	    {
        	        alt251 = 1;
        	    }


        	    switch (alt251) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred66_AS34039); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop251;
        	    }
        	} while (true);

        	loop251:
        		;	// Stops C# compiler whining that label 'loop251' has no statements

        	if ( (input.LA(1) >= 55 && input.LA(1) <= 57) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}

        	// AS3.g:819:55: ( LineTerminator )*
        	do 
        	{
        	    int alt252 = 2;
        	    alt252 = dfa252.Predict(input);
        	    switch (alt252) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred66_AS34054); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop252;
        	    }
        	} while (true);

        	loop252:
        		;	// Stops C# compiler whining that label 'loop252' has no statements

        	PushFollow(FOLLOW_unaryExpression_in_synpred66_AS34057);
        	unaryExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred66_AS3"

    // $ANTLR start "synpred70_AS3"
    public void synpred70_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:823:30: ( ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression )
        // AS3.g:823:30: ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression
        {
        	// AS3.g:823:30: ( LineTerminator )*
        	do 
        	{
        	    int alt253 = 2;
        	    int LA253_0 = input.LA(1);

        	    if ( (LA253_0 == LineTerminator) )
        	    {
        	        alt253 = 1;
        	    }


        	    switch (alt253) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred70_AS34073); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop253;
        	    }
        	} while (true);

        	loop253:
        		;	// Stops C# compiler whining that label 'loop253' has no statements

        	if ( (input.LA(1) >= 51 && input.LA(1) <= 52) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}

        	// AS3.g:823:58: ( LineTerminator )*
        	do 
        	{
        	    int alt254 = 2;
        	    alt254 = dfa254.Predict(input);
        	    switch (alt254) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred70_AS34084); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop254;
        	    }
        	} while (true);

        	loop254:
        		;	// Stops C# compiler whining that label 'loop254' has no statements

        	PushFollow(FOLLOW_multiplicativeExpression_in_synpred70_AS34087);
        	multiplicativeExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred70_AS3"

    // $ANTLR start "synpred75_AS3"
    public void synpred75_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:827:24: ( ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression )
        // AS3.g:827:24: ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression
        {
        	// AS3.g:827:24: ( LineTerminator )*
        	do 
        	{
        	    int alt255 = 2;
        	    int LA255_0 = input.LA(1);

        	    if ( (LA255_0 == LineTerminator) )
        	    {
        	        alt255 = 1;
        	    }


        	    switch (alt255) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred75_AS34103); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop255;
        	    }
        	} while (true);

        	loop255:
        		;	// Stops C# compiler whining that label 'loop255' has no statements

        	if ( (input.LA(1) >= 58 && input.LA(1) <= 60) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}

        	// AS3.g:827:62: ( LineTerminator )*
        	do 
        	{
        	    int alt256 = 2;
        	    alt256 = dfa256.Predict(input);
        	    switch (alt256) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred75_AS34118); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop256;
        	    }
        	} while (true);

        	loop256:
        		;	// Stops C# compiler whining that label 'loop256' has no statements

        	PushFollow(FOLLOW_additiveExpression_in_synpred75_AS34121);
        	additiveExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred75_AS3"

    // $ANTLR start "synpred83_AS3"
    public void synpred83_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:831:21: ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LineTerminator )* shiftExpression )
        // AS3.g:831:21: ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LineTerminator )* shiftExpression
        {
        	// AS3.g:831:21: ( LineTerminator )*
        	do 
        	{
        	    int alt257 = 2;
        	    int LA257_0 = input.LA(1);

        	    if ( (LA257_0 == LineTerminator) )
        	    {
        	        alt257 = 1;
        	    }


        	    switch (alt257) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred83_AS34137); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop257;
        	    }
        	} while (true);

        	loop257:
        		;	// Stops C# compiler whining that label 'loop257' has no statements

        	if ( (input.LA(1) >= 61 && input.LA(1) <= 66) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}

        	// AS3.g:831:85: ( LineTerminator )*
        	do 
        	{
        	    int alt258 = 2;
        	    alt258 = dfa258.Predict(input);
        	    switch (alt258) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred83_AS34164); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop258;
        	    }
        	} while (true);

        	loop258:
        		;	// Stops C# compiler whining that label 'loop258' has no statements

        	PushFollow(FOLLOW_shiftExpression_in_synpred83_AS34167);
        	shiftExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred83_AS3"

    // $ANTLR start "synpred90_AS3"
    public void synpred90_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:835:21: ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LineTerminator )* shiftExpression )
        // AS3.g:835:21: ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LineTerminator )* shiftExpression
        {
        	// AS3.g:835:21: ( LineTerminator )*
        	do 
        	{
        	    int alt259 = 2;
        	    int LA259_0 = input.LA(1);

        	    if ( (LA259_0 == LineTerminator) )
        	    {
        	        alt259 = 1;
        	    }


        	    switch (alt259) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred90_AS34184); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop259;
        	    }
        	} while (true);

        	loop259:
        		;	// Stops C# compiler whining that label 'loop259' has no statements

        	if ( (input.LA(1) >= 61 && input.LA(1) <= 65) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}

        	// AS3.g:835:79: ( LineTerminator )*
        	do 
        	{
        	    int alt260 = 2;
        	    alt260 = dfa260.Predict(input);
        	    switch (alt260) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred90_AS34208); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop260;
        	    }
        	} while (true);

        	loop260:
        		;	// Stops C# compiler whining that label 'loop260' has no statements

        	PushFollow(FOLLOW_shiftExpression_in_synpred90_AS34211);
        	shiftExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred90_AS3"

    // $ANTLR start "synpred96_AS3"
    public void synpred96_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:839:26: ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression )
        // AS3.g:839:26: ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression
        {
        	// AS3.g:839:26: ( LineTerminator )*
        	do 
        	{
        	    int alt261 = 2;
        	    int LA261_0 = input.LA(1);

        	    if ( (LA261_0 == LineTerminator) )
        	    {
        	        alt261 = 1;
        	    }


        	    switch (alt261) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred96_AS34228); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop261;
        	    }
        	} while (true);

        	loop261:
        		;	// Stops C# compiler whining that label 'loop261' has no statements

        	if ( (input.LA(1) >= 67 && input.LA(1) <= 70) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}

        	// AS3.g:839:72: ( LineTerminator )*
        	do 
        	{
        	    int alt262 = 2;
        	    alt262 = dfa262.Predict(input);
        	    switch (alt262) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred96_AS34247); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop262;
        	    }
        	} while (true);

        	loop262:
        		;	// Stops C# compiler whining that label 'loop262' has no statements

        	PushFollow(FOLLOW_relationalExpression_in_synpred96_AS34250);
        	relationalExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred96_AS3"

    // $ANTLR start "synpred102_AS3"
    public void synpred102_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:843:30: ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn )
        // AS3.g:843:30: ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn
        {
        	// AS3.g:843:30: ( LineTerminator )*
        	do 
        	{
        	    int alt263 = 2;
        	    int LA263_0 = input.LA(1);

        	    if ( (LA263_0 == LineTerminator) )
        	    {
        	        alt263 = 1;
        	    }


        	    switch (alt263) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred102_AS34266); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop263;
        	    }
        	} while (true);

        	loop263:
        		;	// Stops C# compiler whining that label 'loop263' has no statements

        	if ( (input.LA(1) >= 67 && input.LA(1) <= 70) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}

        	// AS3.g:843:76: ( LineTerminator )*
        	do 
        	{
        	    int alt264 = 2;
        	    alt264 = dfa264.Predict(input);
        	    switch (alt264) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred102_AS34285); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop264;
        	    }
        	} while (true);

        	loop264:
        		;	// Stops C# compiler whining that label 'loop264' has no statements

        	PushFollow(FOLLOW_relationalExpressionNoIn_in_synpred102_AS34288);
        	relationalExpressionNoIn();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred102_AS3"

    // $ANTLR start "synpred105_AS3"
    public void synpred105_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:847:24: ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpression )
        // AS3.g:847:24: ( LineTerminator )* '&' ( LineTerminator )* equalityExpression
        {
        	// AS3.g:847:24: ( LineTerminator )*
        	do 
        	{
        	    int alt265 = 2;
        	    int LA265_0 = input.LA(1);

        	    if ( (LA265_0 == LineTerminator) )
        	    {
        	        alt265 = 1;
        	    }


        	    switch (alt265) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred105_AS34304); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop265;
        	    }
        	} while (true);

        	loop265:
        		;	// Stops C# compiler whining that label 'loop265' has no statements

        	Match(input,71,FOLLOW_71_in_synpred105_AS34307); if (state.failed) return ;
        	// AS3.g:847:44: ( LineTerminator )*
        	do 
        	{
        	    int alt266 = 2;
        	    alt266 = dfa266.Predict(input);
        	    switch (alt266) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred105_AS34309); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop266;
        	    }
        	} while (true);

        	loop266:
        		;	// Stops C# compiler whining that label 'loop266' has no statements

        	PushFollow(FOLLOW_equalityExpression_in_synpred105_AS34312);
        	equalityExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred105_AS3"

    // $ANTLR start "synpred108_AS3"
    public void synpred108_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:851:28: ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn )
        // AS3.g:851:28: ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn
        {
        	// AS3.g:851:28: ( LineTerminator )*
        	do 
        	{
        	    int alt267 = 2;
        	    int LA267_0 = input.LA(1);

        	    if ( (LA267_0 == LineTerminator) )
        	    {
        	        alt267 = 1;
        	    }


        	    switch (alt267) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred108_AS34329); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop267;
        	    }
        	} while (true);

        	loop267:
        		;	// Stops C# compiler whining that label 'loop267' has no statements

        	Match(input,71,FOLLOW_71_in_synpred108_AS34332); if (state.failed) return ;
        	// AS3.g:851:48: ( LineTerminator )*
        	do 
        	{
        	    int alt268 = 2;
        	    alt268 = dfa268.Predict(input);
        	    switch (alt268) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred108_AS34334); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop268;
        	    }
        	} while (true);

        	loop268:
        		;	// Stops C# compiler whining that label 'loop268' has no statements

        	PushFollow(FOLLOW_equalityExpressionNoIn_in_synpred108_AS34337);
        	equalityExpressionNoIn();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred108_AS3"

    // $ANTLR start "synpred111_AS3"
    public void synpred111_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:855:26: ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression )
        // AS3.g:855:26: ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression
        {
        	// AS3.g:855:26: ( LineTerminator )*
        	do 
        	{
        	    int alt269 = 2;
        	    int LA269_0 = input.LA(1);

        	    if ( (LA269_0 == LineTerminator) )
        	    {
        	        alt269 = 1;
        	    }


        	    switch (alt269) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred111_AS34353); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop269;
        	    }
        	} while (true);

        	loop269:
        		;	// Stops C# compiler whining that label 'loop269' has no statements

        	Match(input,72,FOLLOW_72_in_synpred111_AS34356); if (state.failed) return ;
        	// AS3.g:855:46: ( LineTerminator )*
        	do 
        	{
        	    int alt270 = 2;
        	    alt270 = dfa270.Predict(input);
        	    switch (alt270) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred111_AS34358); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop270;
        	    }
        	} while (true);

        	loop270:
        		;	// Stops C# compiler whining that label 'loop270' has no statements

        	PushFollow(FOLLOW_bitwiseANDExpression_in_synpred111_AS34361);
        	bitwiseANDExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred111_AS3"

    // $ANTLR start "synpred114_AS3"
    public void synpred114_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:859:30: ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn )
        // AS3.g:859:30: ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn
        {
        	// AS3.g:859:30: ( LineTerminator )*
        	do 
        	{
        	    int alt271 = 2;
        	    int LA271_0 = input.LA(1);

        	    if ( (LA271_0 == LineTerminator) )
        	    {
        	        alt271 = 1;
        	    }


        	    switch (alt271) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred114_AS34378); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop271;
        	    }
        	} while (true);

        	loop271:
        		;	// Stops C# compiler whining that label 'loop271' has no statements

        	Match(input,72,FOLLOW_72_in_synpred114_AS34381); if (state.failed) return ;
        	// AS3.g:859:50: ( LineTerminator )*
        	do 
        	{
        	    int alt272 = 2;
        	    alt272 = dfa272.Predict(input);
        	    switch (alt272) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred114_AS34383); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop272;
        	    }
        	} while (true);

        	loop272:
        		;	// Stops C# compiler whining that label 'loop272' has no statements

        	PushFollow(FOLLOW_bitwiseANDExpressionNoIn_in_synpred114_AS34386);
        	bitwiseANDExpressionNoIn();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred114_AS3"

    // $ANTLR start "synpred117_AS3"
    public void synpred117_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:863:26: ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression )
        // AS3.g:863:26: ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression
        {
        	// AS3.g:863:26: ( LineTerminator )*
        	do 
        	{
        	    int alt273 = 2;
        	    int LA273_0 = input.LA(1);

        	    if ( (LA273_0 == LineTerminator) )
        	    {
        	        alt273 = 1;
        	    }


        	    switch (alt273) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred117_AS34403); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop273;
        	    }
        	} while (true);

        	loop273:
        		;	// Stops C# compiler whining that label 'loop273' has no statements

        	Match(input,73,FOLLOW_73_in_synpred117_AS34406); if (state.failed) return ;
        	// AS3.g:863:46: ( LineTerminator )*
        	do 
        	{
        	    int alt274 = 2;
        	    alt274 = dfa274.Predict(input);
        	    switch (alt274) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred117_AS34408); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop274;
        	    }
        	} while (true);

        	loop274:
        		;	// Stops C# compiler whining that label 'loop274' has no statements

        	PushFollow(FOLLOW_bitwiseXORExpression_in_synpred117_AS34411);
        	bitwiseXORExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred117_AS3"

    // $ANTLR start "synpred120_AS3"
    public void synpred120_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:867:30: ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn )
        // AS3.g:867:30: ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn
        {
        	// AS3.g:867:30: ( LineTerminator )*
        	do 
        	{
        	    int alt275 = 2;
        	    int LA275_0 = input.LA(1);

        	    if ( (LA275_0 == LineTerminator) )
        	    {
        	        alt275 = 1;
        	    }


        	    switch (alt275) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred120_AS34428); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop275;
        	    }
        	} while (true);

        	loop275:
        		;	// Stops C# compiler whining that label 'loop275' has no statements

        	Match(input,73,FOLLOW_73_in_synpred120_AS34431); if (state.failed) return ;
        	// AS3.g:867:50: ( LineTerminator )*
        	do 
        	{
        	    int alt276 = 2;
        	    alt276 = dfa276.Predict(input);
        	    switch (alt276) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred120_AS34433); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop276;
        	    }
        	} while (true);

        	loop276:
        		;	// Stops C# compiler whining that label 'loop276' has no statements

        	PushFollow(FOLLOW_bitwiseXORExpressionNoIn_in_synpred120_AS34436);
        	bitwiseXORExpressionNoIn();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred120_AS3"

    // $ANTLR start "synpred123_AS3"
    public void synpred123_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:871:25: ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression )
        // AS3.g:871:25: ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression
        {
        	// AS3.g:871:25: ( LineTerminator )*
        	do 
        	{
        	    int alt277 = 2;
        	    int LA277_0 = input.LA(1);

        	    if ( (LA277_0 == LineTerminator) )
        	    {
        	        alt277 = 1;
        	    }


        	    switch (alt277) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred123_AS34453); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop277;
        	    }
        	} while (true);

        	loop277:
        		;	// Stops C# compiler whining that label 'loop277' has no statements

        	Match(input,74,FOLLOW_74_in_synpred123_AS34456); if (state.failed) return ;
        	// AS3.g:871:46: ( LineTerminator )*
        	do 
        	{
        	    int alt278 = 2;
        	    alt278 = dfa278.Predict(input);
        	    switch (alt278) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred123_AS34458); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop278;
        	    }
        	} while (true);

        	loop278:
        		;	// Stops C# compiler whining that label 'loop278' has no statements

        	PushFollow(FOLLOW_bitwiseORExpression_in_synpred123_AS34461);
        	bitwiseORExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred123_AS3"

    // $ANTLR start "synpred126_AS3"
    public void synpred126_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:875:29: ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn )
        // AS3.g:875:29: ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn
        {
        	// AS3.g:875:29: ( LineTerminator )*
        	do 
        	{
        	    int alt279 = 2;
        	    int LA279_0 = input.LA(1);

        	    if ( (LA279_0 == LineTerminator) )
        	    {
        	        alt279 = 1;
        	    }


        	    switch (alt279) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred126_AS34478); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop279;
        	    }
        	} while (true);

        	loop279:
        		;	// Stops C# compiler whining that label 'loop279' has no statements

        	Match(input,74,FOLLOW_74_in_synpred126_AS34481); if (state.failed) return ;
        	// AS3.g:875:50: ( LineTerminator )*
        	do 
        	{
        	    int alt280 = 2;
        	    alt280 = dfa280.Predict(input);
        	    switch (alt280) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred126_AS34483); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop280;
        	    }
        	} while (true);

        	loop280:
        		;	// Stops C# compiler whining that label 'loop280' has no statements

        	PushFollow(FOLLOW_bitwiseORExpressionNoIn_in_synpred126_AS34486);
        	bitwiseORExpressionNoIn();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred126_AS3"

    // $ANTLR start "synpred129_AS3"
    public void synpred129_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:879:26: ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression )
        // AS3.g:879:26: ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression
        {
        	// AS3.g:879:26: ( LineTerminator )*
        	do 
        	{
        	    int alt281 = 2;
        	    int LA281_0 = input.LA(1);

        	    if ( (LA281_0 == LineTerminator) )
        	    {
        	        alt281 = 1;
        	    }


        	    switch (alt281) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred129_AS34503); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop281;
        	    }
        	} while (true);

        	loop281:
        		;	// Stops C# compiler whining that label 'loop281' has no statements

        	Match(input,75,FOLLOW_75_in_synpred129_AS34506); if (state.failed) return ;
        	// AS3.g:879:47: ( LineTerminator )*
        	do 
        	{
        	    int alt282 = 2;
        	    alt282 = dfa282.Predict(input);
        	    switch (alt282) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred129_AS34508); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop282;
        	    }
        	} while (true);

        	loop282:
        		;	// Stops C# compiler whining that label 'loop282' has no statements

        	PushFollow(FOLLOW_logicalANDExpression_in_synpred129_AS34511);
        	logicalANDExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred129_AS3"

    // $ANTLR start "synpred132_AS3"
    public void synpred132_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:883:30: ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn )
        // AS3.g:883:30: ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn
        {
        	// AS3.g:883:30: ( LineTerminator )*
        	do 
        	{
        	    int alt283 = 2;
        	    int LA283_0 = input.LA(1);

        	    if ( (LA283_0 == LineTerminator) )
        	    {
        	        alt283 = 1;
        	    }


        	    switch (alt283) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred132_AS34527); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop283;
        	    }
        	} while (true);

        	loop283:
        		;	// Stops C# compiler whining that label 'loop283' has no statements

        	Match(input,75,FOLLOW_75_in_synpred132_AS34530); if (state.failed) return ;
        	// AS3.g:883:51: ( LineTerminator )*
        	do 
        	{
        	    int alt284 = 2;
        	    alt284 = dfa284.Predict(input);
        	    switch (alt284) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred132_AS34532); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop284;
        	    }
        	} while (true);

        	loop284:
        		;	// Stops C# compiler whining that label 'loop284' has no statements

        	PushFollow(FOLLOW_logicalANDExpressionNoIn_in_synpred132_AS34535);
        	logicalANDExpressionNoIn();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred132_AS3"

    // $ANTLR start "synpred137_AS3"
    public void synpred137_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:887:25: ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )
        // AS3.g:887:25: ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression
        {
        	// AS3.g:887:25: ( LineTerminator )*
        	do 
        	{
        	    int alt285 = 2;
        	    int LA285_0 = input.LA(1);

        	    if ( (LA285_0 == LineTerminator) )
        	    {
        	        alt285 = 1;
        	    }


        	    switch (alt285) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred137_AS34552); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop285;
        	    }
        	} while (true);

        	loop285:
        		;	// Stops C# compiler whining that label 'loop285' has no statements

        	Match(input,76,FOLLOW_76_in_synpred137_AS34555); if (state.failed) return ;
        	// AS3.g:887:45: ( LineTerminator )*
        	do 
        	{
        	    int alt286 = 2;
        	    alt286 = dfa286.Predict(input);
        	    switch (alt286) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred137_AS34557); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop286;
        	    }
        	} while (true);

        	loop286:
        		;	// Stops C# compiler whining that label 'loop286' has no statements

        	PushFollow(FOLLOW_assignmentExpression_in_synpred137_AS34560);
        	assignmentExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// AS3.g:887:82: ( LineTerminator )*
        	do 
        	{
        	    int alt287 = 2;
        	    int LA287_0 = input.LA(1);

        	    if ( (LA287_0 == LineTerminator) )
        	    {
        	        alt287 = 1;
        	    }


        	    switch (alt287) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred137_AS34562); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop287;
        	    }
        	} while (true);

        	loop287:
        		;	// Stops C# compiler whining that label 'loop287' has no statements

        	Match(input,43,FOLLOW_43_in_synpred137_AS34565); if (state.failed) return ;
        	// AS3.g:887:102: ( LineTerminator )*
        	do 
        	{
        	    int alt288 = 2;
        	    alt288 = dfa288.Predict(input);
        	    switch (alt288) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred137_AS34567); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop288;
        	    }
        	} while (true);

        	loop288:
        		;	// Stops C# compiler whining that label 'loop288' has no statements

        	PushFollow(FOLLOW_assignmentExpression_in_synpred137_AS34570);
        	assignmentExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred137_AS3"

    // $ANTLR start "synpred142_AS3"
    public void synpred142_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:891:29: ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )
        // AS3.g:891:29: ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression
        {
        	// AS3.g:891:29: ( LineTerminator )*
        	do 
        	{
        	    int alt289 = 2;
        	    int LA289_0 = input.LA(1);

        	    if ( (LA289_0 == LineTerminator) )
        	    {
        	        alt289 = 1;
        	    }


        	    switch (alt289) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred142_AS34587); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop289;
        	    }
        	} while (true);

        	loop289:
        		;	// Stops C# compiler whining that label 'loop289' has no statements

        	Match(input,76,FOLLOW_76_in_synpred142_AS34590); if (state.failed) return ;
        	// AS3.g:891:49: ( LineTerminator )*
        	do 
        	{
        	    int alt290 = 2;
        	    alt290 = dfa290.Predict(input);
        	    switch (alt290) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred142_AS34592); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop290;
        	    }
        	} while (true);

        	loop290:
        		;	// Stops C# compiler whining that label 'loop290' has no statements

        	PushFollow(FOLLOW_assignmentExpression_in_synpred142_AS34595);
        	assignmentExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// AS3.g:891:86: ( LineTerminator )*
        	do 
        	{
        	    int alt291 = 2;
        	    int LA291_0 = input.LA(1);

        	    if ( (LA291_0 == LineTerminator) )
        	    {
        	        alt291 = 1;
        	    }


        	    switch (alt291) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred142_AS34597); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop291;
        	    }
        	} while (true);

        	loop291:
        		;	// Stops C# compiler whining that label 'loop291' has no statements

        	Match(input,43,FOLLOW_43_in_synpred142_AS34600); if (state.failed) return ;
        	// AS3.g:891:106: ( LineTerminator )*
        	do 
        	{
        	    int alt292 = 2;
        	    alt292 = dfa292.Predict(input);
        	    switch (alt292) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred142_AS34602); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop292;
        	    }
        	} while (true);

        	loop292:
        		;	// Stops C# compiler whining that label 'loop292' has no statements

        	PushFollow(FOLLOW_assignmentExpression_in_synpred142_AS34605);
        	assignmentExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred142_AS3"

    // $ANTLR start "synpred143_AS3"
    public void synpred143_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:895:4: ( conditionalExpression )
        // AS3.g:895:4: conditionalExpression
        {
        	PushFollow(FOLLOW_conditionalExpression_in_synpred143_AS34618);
        	conditionalExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred143_AS3"

    // $ANTLR start "synpred146_AS3"
    public void synpred146_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:900:4: ( conditionalExpressionNoIn )
        // AS3.g:900:4: conditionalExpressionNoIn
        {
        	PushFollow(FOLLOW_conditionalExpressionNoIn_in_synpred146_AS34645);
        	conditionalExpressionNoIn();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred146_AS3"

    // $ANTLR start "synpred162_AS3"
    public void synpred162_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:909:26: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )
        // AS3.g:909:26: ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression
        {
        	// AS3.g:909:26: ( LineTerminator )*
        	do 
        	{
        	    int alt293 = 2;
        	    int LA293_0 = input.LA(1);

        	    if ( (LA293_0 == LineTerminator) )
        	    {
        	        alt293 = 1;
        	    }


        	    switch (alt293) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred162_AS34731); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop293;
        	    }
        	} while (true);

        	loop293:
        		;	// Stops C# compiler whining that label 'loop293' has no statements

        	Match(input,39,FOLLOW_39_in_synpred162_AS34734); if (state.failed) return ;
        	// AS3.g:909:46: ( LineTerminator )*
        	do 
        	{
        	    int alt294 = 2;
        	    alt294 = dfa294.Predict(input);
        	    switch (alt294) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred162_AS34736); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop294;
        	    }
        	} while (true);

        	loop294:
        		;	// Stops C# compiler whining that label 'loop294' has no statements

        	PushFollow(FOLLOW_assignmentExpression_in_synpred162_AS34739);
        	assignmentExpression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred162_AS3"

    // $ANTLR start "synpred165_AS3"
    public void synpred165_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:913:30: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn )
        // AS3.g:913:30: ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn
        {
        	// AS3.g:913:30: ( LineTerminator )*
        	do 
        	{
        	    int alt295 = 2;
        	    int LA295_0 = input.LA(1);

        	    if ( (LA295_0 == LineTerminator) )
        	    {
        	        alt295 = 1;
        	    }


        	    switch (alt295) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred165_AS34756); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop295;
        	    }
        	} while (true);

        	loop295:
        		;	// Stops C# compiler whining that label 'loop295' has no statements

        	Match(input,39,FOLLOW_39_in_synpred165_AS34759); if (state.failed) return ;
        	// AS3.g:913:50: ( LineTerminator )*
        	do 
        	{
        	    int alt296 = 2;
        	    alt296 = dfa296.Predict(input);
        	    switch (alt296) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred165_AS34761); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop296;
        	    }
        	} while (true);

        	loop296:
        		;	// Stops C# compiler whining that label 'loop296' has no statements

        	PushFollow(FOLLOW_assignmentExpressionNoIn_in_synpred165_AS34764);
        	assignmentExpressionNoIn();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred165_AS3"

    // $ANTLR start "synpred166_AS3"
    public void synpred166_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:921:4: ( blockStatement )
        // AS3.g:921:4: blockStatement
        {
        	PushFollow(FOLLOW_blockStatement_in_synpred166_AS34782);
        	blockStatement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred166_AS3"

    // $ANTLR start "synpred169_AS3"
    public void synpred169_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:924:4: ( expressionStatement )
        // AS3.g:924:4: expressionStatement
        {
        	PushFollow(FOLLOW_expressionStatement_in_synpred169_AS34797);
        	expressionStatement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred169_AS3"

    // $ANTLR start "synpred176_AS3"
    public void synpred176_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:931:4: ( labelledStatement )
        // AS3.g:931:4: labelledStatement
        {
        	PushFollow(FOLLOW_labelledStatement_in_synpred176_AS34832);
        	labelledStatement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred176_AS3"

    // $ANTLR start "synpred179_AS3"
    public void synpred179_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:938:8: ( LineTerminator )
        // AS3.g:938:8: LineTerminator
        {
        	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred179_AS34860); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred179_AS3"

    // $ANTLR start "synpred183_AS3"
    public void synpred183_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:942:15: ( ( LineTerminator )* statement )
        // AS3.g:942:15: ( LineTerminator )* statement
        {
        	// AS3.g:942:15: ( LineTerminator )*
        	do 
        	{
        	    int alt297 = 2;
        	    alt297 = dfa297.Predict(input);
        	    switch (alt297) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred183_AS34884); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop297;
        	    }
        	} while (true);

        	loop297:
        		;	// Stops C# compiler whining that label 'loop297' has no statements

        	PushFollow(FOLLOW_statement_in_synpred183_AS34887);
        	statement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred183_AS3"

    // $ANTLR start "synpred188_AS3"
    public void synpred188_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:950:25: ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration )
        // AS3.g:950:25: ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration
        {
        	// AS3.g:950:25: ( LineTerminator )*
        	do 
        	{
        	    int alt298 = 2;
        	    int LA298_0 = input.LA(1);

        	    if ( (LA298_0 == LineTerminator) )
        	    {
        	        alt298 = 1;
        	    }


        	    switch (alt298) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred188_AS34929); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop298;
        	    }
        	} while (true);

        	loop298:
        		;	// Stops C# compiler whining that label 'loop298' has no statements

        	Match(input,39,FOLLOW_39_in_synpred188_AS34932); if (state.failed) return ;
        	// AS3.g:950:45: ( LineTerminator )*
        	do 
        	{
        	    int alt299 = 2;
        	    int LA299_0 = input.LA(1);

        	    if ( (LA299_0 == LineTerminator) )
        	    {
        	        alt299 = 1;
        	    }


        	    switch (alt299) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred188_AS34934); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop299;
        	    }
        	} while (true);

        	loop299:
        		;	// Stops C# compiler whining that label 'loop299' has no statements

        	PushFollow(FOLLOW_variableDeclaration_in_synpred188_AS34937);
        	variableDeclaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred188_AS3"

    // $ANTLR start "synpred191_AS3"
    public void synpred191_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:954:29: ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn )
        // AS3.g:954:29: ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn
        {
        	// AS3.g:954:29: ( LineTerminator )*
        	do 
        	{
        	    int alt300 = 2;
        	    int LA300_0 = input.LA(1);

        	    if ( (LA300_0 == LineTerminator) )
        	    {
        	        alt300 = 1;
        	    }


        	    switch (alt300) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred191_AS34954); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop300;
        	    }
        	} while (true);

        	loop300:
        		;	// Stops C# compiler whining that label 'loop300' has no statements

        	Match(input,39,FOLLOW_39_in_synpred191_AS34957); if (state.failed) return ;
        	// AS3.g:954:49: ( LineTerminator )*
        	do 
        	{
        	    int alt301 = 2;
        	    int LA301_0 = input.LA(1);

        	    if ( (LA301_0 == LineTerminator) )
        	    {
        	        alt301 = 1;
        	    }


        	    switch (alt301) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred191_AS34959); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop301;
        	    }
        	} while (true);

        	loop301:
        		;	// Stops C# compiler whining that label 'loop301' has no statements

        	PushFollow(FOLLOW_variableDeclarationNoIn_in_synpred191_AS34962);
        	variableDeclarationNoIn();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred191_AS3"

    // $ANTLR start "synpred194_AS3"
    public void synpred194_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:958:16: ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )
        // AS3.g:958:16: ( LineTerminator )* ':' ( LineTerminator )* Identifier
        {
        	// AS3.g:958:16: ( LineTerminator )*
        	do 
        	{
        	    int alt302 = 2;
        	    int LA302_0 = input.LA(1);

        	    if ( (LA302_0 == LineTerminator) )
        	    {
        	        alt302 = 1;
        	    }


        	    switch (alt302) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred194_AS34978); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop302;
        	    }
        	} while (true);

        	loop302:
        		;	// Stops C# compiler whining that label 'loop302' has no statements

        	Match(input,43,FOLLOW_43_in_synpred194_AS34981); if (state.failed) return ;
        	// AS3.g:958:36: ( LineTerminator )*
        	do 
        	{
        	    int alt303 = 2;
        	    int LA303_0 = input.LA(1);

        	    if ( (LA303_0 == LineTerminator) )
        	    {
        	        alt303 = 1;
        	    }


        	    switch (alt303) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred194_AS34983); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop303;
        	    }
        	} while (true);

        	loop303:
        		;	// Stops C# compiler whining that label 'loop303' has no statements

        	Match(input,Identifier,FOLLOW_Identifier_in_synpred194_AS34986); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred194_AS3"

    // $ANTLR start "synpred195_AS3"
    public void synpred195_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:958:65: ( LineTerminator )
        // AS3.g:958:65: LineTerminator
        {
        	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred195_AS34990); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred195_AS3"

    // $ANTLR start "synpred199_AS3"
    public void synpred199_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:962:16: ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )
        // AS3.g:962:16: ( LineTerminator )* ':' ( LineTerminator )* Identifier
        {
        	// AS3.g:962:16: ( LineTerminator )*
        	do 
        	{
        	    int alt304 = 2;
        	    int LA304_0 = input.LA(1);

        	    if ( (LA304_0 == LineTerminator) )
        	    {
        	        alt304 = 1;
        	    }


        	    switch (alt304) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred199_AS35008); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop304;
        	    }
        	} while (true);

        	loop304:
        		;	// Stops C# compiler whining that label 'loop304' has no statements

        	Match(input,43,FOLLOW_43_in_synpred199_AS35011); if (state.failed) return ;
        	// AS3.g:962:36: ( LineTerminator )*
        	do 
        	{
        	    int alt305 = 2;
        	    int LA305_0 = input.LA(1);

        	    if ( (LA305_0 == LineTerminator) )
        	    {
        	        alt305 = 1;
        	    }


        	    switch (alt305) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred199_AS35013); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop305;
        	    }
        	} while (true);

        	loop305:
        		;	// Stops C# compiler whining that label 'loop305' has no statements

        	Match(input,Identifier,FOLLOW_Identifier_in_synpred199_AS35016); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred199_AS3"

    // $ANTLR start "synpred200_AS3"
    public void synpred200_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:962:65: ( LineTerminator )
        // AS3.g:962:65: LineTerminator
        {
        	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred200_AS35020); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred200_AS3"

    // $ANTLR start "synpred204_AS3"
    public void synpred204_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:978:16: ( LineTerminator )
        // AS3.g:978:16: LineTerminator
        {
        	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred204_AS35084); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred204_AS3"

    // $ANTLR start "synpred205_AS3"
    public void synpred205_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:978:16: ( ( LineTerminator )* )
        // AS3.g:978:16: ( LineTerminator )*
        {
        	// AS3.g:978:16: ( LineTerminator )*
        	do 
        	{
        	    int alt306 = 2;
        	    int LA306_0 = input.LA(1);

        	    if ( (LA306_0 == LineTerminator) )
        	    {
        	        alt306 = 1;
        	    }


        	    switch (alt306) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred205_AS35084); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop306;
        	    }
        	} while (true);

        	loop306:
        		;	// Stops C# compiler whining that label 'loop306' has no statements


        }
    }
    // $ANTLR end "synpred205_AS3"

    // $ANTLR start "synpred212_AS3"
    public void synpred212_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:982:103: ( ( LineTerminator )* 'else' ( LineTerminator )* statement )
        // AS3.g:982:103: ( LineTerminator )* 'else' ( LineTerminator )* statement
        {
        	// AS3.g:982:103: ( LineTerminator )*
        	do 
        	{
        	    int alt307 = 2;
        	    int LA307_0 = input.LA(1);

        	    if ( (LA307_0 == LineTerminator) )
        	    {
        	        alt307 = 1;
        	    }


        	    switch (alt307) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred212_AS35124); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop307;
        	    }
        	} while (true);

        	loop307:
        		;	// Stops C# compiler whining that label 'loop307' has no statements

        	Match(input,92,FOLLOW_92_in_synpred212_AS35127); if (state.failed) return ;
        	// AS3.g:982:126: ( LineTerminator )*
        	do 
        	{
        	    int alt308 = 2;
        	    alt308 = dfa308.Predict(input);
        	    switch (alt308) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred212_AS35129); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop308;
        	    }
        	} while (true);

        	loop308:
        		;	// Stops C# compiler whining that label 'loop308' has no statements

        	PushFollow(FOLLOW_statement_in_synpred212_AS35132);
        	statement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred212_AS3"

    // $ANTLR start "synpred215_AS3"
    public void synpred215_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:988:4: ( forStatement )
        // AS3.g:988:4: forStatement
        {
        	PushFollow(FOLLOW_forStatement_in_synpred215_AS35155);
        	forStatement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred215_AS3"

    // $ANTLR start "synpred226_AS3"
    public void synpred226_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1001:31: ( ( LineTerminator )* forStatementInitialiserPart )
        // AS3.g:1001:31: ( LineTerminator )* forStatementInitialiserPart
        {
        	// AS3.g:1001:31: ( LineTerminator )*
        	do 
        	{
        	    int alt309 = 2;
        	    alt309 = dfa309.Predict(input);
        	    switch (alt309) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred226_AS35251); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop309;
        	    }
        	} while (true);

        	loop309:
        		;	// Stops C# compiler whining that label 'loop309' has no statements

        	PushFollow(FOLLOW_forStatementInitialiserPart_in_synpred226_AS35254);
        	forStatementInitialiserPart();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred226_AS3"

    // $ANTLR start "synpred229_AS3"
    public void synpred229_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1001:98: ( ( LineTerminator )* expression )
        // AS3.g:1001:98: ( LineTerminator )* expression
        {
        	// AS3.g:1001:98: ( LineTerminator )*
        	do 
        	{
        	    int alt310 = 2;
        	    alt310 = dfa310.Predict(input);
        	    switch (alt310) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred229_AS35264); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop310;
        	    }
        	} while (true);

        	loop310:
        		;	// Stops C# compiler whining that label 'loop310' has no statements

        	PushFollow(FOLLOW_expression_in_synpred229_AS35267);
        	expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred229_AS3"

    // $ANTLR start "synpred232_AS3"
    public void synpred232_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1001:148: ( ( LineTerminator )* expression )
        // AS3.g:1001:148: ( LineTerminator )* expression
        {
        	// AS3.g:1001:148: ( LineTerminator )*
        	do 
        	{
        	    int alt311 = 2;
        	    alt311 = dfa311.Predict(input);
        	    switch (alt311) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred232_AS35277); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop311;
        	    }
        	} while (true);

        	loop311:
        		;	// Stops C# compiler whining that label 'loop311' has no statements

        	PushFollow(FOLLOW_expression_in_synpred232_AS35280);
        	expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred232_AS3"

    // $ANTLR start "synpred260_AS3"
    public void synpred260_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1039:9: ( ( LineTerminator )* caseClause )
        // AS3.g:1039:9: ( LineTerminator )* caseClause
        {
        	// AS3.g:1039:9: ( LineTerminator )*
        	do 
        	{
        	    int alt312 = 2;
        	    int LA312_0 = input.LA(1);

        	    if ( (LA312_0 == LineTerminator) )
        	    {
        	        alt312 = 1;
        	    }


        	    switch (alt312) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred260_AS35523); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop312;
        	    }
        	} while (true);

        	loop312:
        		;	// Stops C# compiler whining that label 'loop312' has no statements

        	PushFollow(FOLLOW_caseClause_in_synpred260_AS35526);
        	caseClause();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred260_AS3"

    // $ANTLR start "synpred263_AS3"
    public void synpred263_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1039:70: ( ( LineTerminator )* caseClause )
        // AS3.g:1039:70: ( LineTerminator )* caseClause
        {
        	// AS3.g:1039:70: ( LineTerminator )*
        	do 
        	{
        	    int alt313 = 2;
        	    int LA313_0 = input.LA(1);

        	    if ( (LA313_0 == LineTerminator) )
        	    {
        	        alt313 = 1;
        	    }


        	    switch (alt313) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred263_AS35537); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop313;
        	    }
        	} while (true);

        	loop313:
        		;	// Stops C# compiler whining that label 'loop313' has no statements

        	PushFollow(FOLLOW_caseClause_in_synpred263_AS35540);
        	caseClause();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred263_AS3"

    // $ANTLR start "synpred264_AS3"
    public void synpred264_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1039:39: ( ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )* )
        // AS3.g:1039:39: ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )*
        {
        	// AS3.g:1039:39: ( LineTerminator )*
        	do 
        	{
        	    int alt314 = 2;
        	    int LA314_0 = input.LA(1);

        	    if ( (LA314_0 == LineTerminator) )
        	    {
        	        alt314 = 1;
        	    }


        	    switch (alt314) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred264_AS35531); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop314;
        	    }
        	} while (true);

        	loop314:
        		;	// Stops C# compiler whining that label 'loop314' has no statements

        	PushFollow(FOLLOW_defaultClause_in_synpred264_AS35534);
        	defaultClause();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// AS3.g:1039:69: ( ( LineTerminator )* caseClause )*
        	do 
        	{
        	    int alt316 = 2;
        	    int LA316_0 = input.LA(1);

        	    if ( (LA316_0 == LineTerminator || LA316_0 == 101) )
        	    {
        	        alt316 = 1;
        	    }


        	    switch (alt316) 
        		{
        			case 1 :
        			    // AS3.g:1039:70: ( LineTerminator )* caseClause
        			    {
        			    	// AS3.g:1039:70: ( LineTerminator )*
        			    	do 
        			    	{
        			    	    int alt315 = 2;
        			    	    int LA315_0 = input.LA(1);

        			    	    if ( (LA315_0 == LineTerminator) )
        			    	    {
        			    	        alt315 = 1;
        			    	    }


        			    	    switch (alt315) 
        			    		{
        			    			case 1 :
        			    			    // AS3.g:0:0: LineTerminator
        			    			    {
        			    			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred264_AS35537); if (state.failed) return ;

        			    			    }
        			    			    break;

        			    			default:
        			    			    goto loop315;
        			    	    }
        			    	} while (true);

        			    	loop315:
        			    		;	// Stops C# compiler whining that label 'loop315' has no statements

        			    	PushFollow(FOLLOW_caseClause_in_synpred264_AS35540);
        			    	caseClause();
        			    	state.followingStackPointer--;
        			    	if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop316;
        	    }
        	} while (true);

        	loop316:
        		;	// Stops C# compiler whining that label 'loop316' has no statements


        }
    }
    // $ANTLR end "synpred264_AS3"

    // $ANTLR start "synpred268_AS3"
    public void synpred268_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1043:58: ( LineTerminator )
        // AS3.g:1043:58: LineTerminator
        {
        	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred268_AS35572); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred268_AS3"

    // $ANTLR start "synpred271_AS3"
    public void synpred271_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1047:34: ( LineTerminator )
        // AS3.g:1047:34: LineTerminator
        {
        	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred271_AS35595); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred271_AS3"

    // $ANTLR start "synpred275_AS3"
    public void synpred275_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1055:24: ( LineTerminator )
        // AS3.g:1055:24: LineTerminator
        {
        	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred275_AS35638); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred275_AS3"

    // $ANTLR start "synpred276_AS3"
    public void synpred276_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1055:24: ( ( LineTerminator )* )
        // AS3.g:1055:24: ( LineTerminator )*
        {
        	// AS3.g:1055:24: ( LineTerminator )*
        	do 
        	{
        	    int alt317 = 2;
        	    int LA317_0 = input.LA(1);

        	    if ( (LA317_0 == LineTerminator) )
        	    {
        	        alt317 = 1;
        	    }


        	    switch (alt317) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred276_AS35638); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop317;
        	    }
        	} while (true);

        	loop317:
        		;	// Stops C# compiler whining that label 'loop317' has no statements


        }
    }
    // $ANTLR end "synpred276_AS3"

    // $ANTLR start "synpred281_AS3"
    public void synpred281_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1059:87: ( ( LineTerminator )* finallyClause )
        // AS3.g:1059:87: ( LineTerminator )* finallyClause
        {
        	// AS3.g:1059:87: ( LineTerminator )*
        	do 
        	{
        	    int alt318 = 2;
        	    int LA318_0 = input.LA(1);

        	    if ( (LA318_0 == LineTerminator) )
        	    {
        	        alt318 = 1;
        	    }


        	    switch (alt318) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred281_AS35673); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop318;
        	    }
        	} while (true);

        	loop318:
        		;	// Stops C# compiler whining that label 'loop318' has no statements

        	PushFollow(FOLLOW_finallyClause_in_synpred281_AS35676);
        	finallyClause();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred281_AS3"

    // $ANTLR start "synpred290_AS3"
    public void synpred290_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1079:15: ( LineTerminator )
        // AS3.g:1079:15: LineTerminator
        {
        	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred290_AS35778); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred290_AS3"

    // $ANTLR start "synpred297_AS3"
    public void synpred297_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1083:37: ( ( LineTerminator )* ',' ( LineTerminator )* Identifier )
        // AS3.g:1083:37: ( LineTerminator )* ',' ( LineTerminator )* Identifier
        {
        	// AS3.g:1083:37: ( LineTerminator )*
        	do 
        	{
        	    int alt319 = 2;
        	    int LA319_0 = input.LA(1);

        	    if ( (LA319_0 == LineTerminator) )
        	    {
        	        alt319 = 1;
        	    }


        	    switch (alt319) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred297_AS35812); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop319;
        	    }
        	} while (true);

        	loop319:
        		;	// Stops C# compiler whining that label 'loop319' has no statements

        	Match(input,39,FOLLOW_39_in_synpred297_AS35815); if (state.failed) return ;
        	// AS3.g:1083:57: ( LineTerminator )*
        	do 
        	{
        	    int alt320 = 2;
        	    int LA320_0 = input.LA(1);

        	    if ( (LA320_0 == LineTerminator) )
        	    {
        	        alt320 = 1;
        	    }


        	    switch (alt320) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred297_AS35817); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop320;
        	    }
        	} while (true);

        	loop320:
        		;	// Stops C# compiler whining that label 'loop320' has no statements

        	Match(input,Identifier,FOLLOW_Identifier_in_synpred297_AS35820); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred297_AS3"

    // $ANTLR start "synpred298_AS3"
    public void synpred298_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1083:9: ( ( LineTerminator )* Identifier ( ( LineTerminator )* ',' ( LineTerminator )* Identifier )* )
        // AS3.g:1083:9: ( LineTerminator )* Identifier ( ( LineTerminator )* ',' ( LineTerminator )* Identifier )*
        {
        	// AS3.g:1083:9: ( LineTerminator )*
        	do 
        	{
        	    int alt321 = 2;
        	    int LA321_0 = input.LA(1);

        	    if ( (LA321_0 == LineTerminator) )
        	    {
        	        alt321 = 1;
        	    }


        	    switch (alt321) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred298_AS35806); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop321;
        	    }
        	} while (true);

        	loop321:
        		;	// Stops C# compiler whining that label 'loop321' has no statements

        	Match(input,Identifier,FOLLOW_Identifier_in_synpred298_AS35809); if (state.failed) return ;
        	// AS3.g:1083:36: ( ( LineTerminator )* ',' ( LineTerminator )* Identifier )*
        	do 
        	{
        	    int alt324 = 2;
        	    int LA324_0 = input.LA(1);

        	    if ( (LA324_0 == LineTerminator || LA324_0 == 39) )
        	    {
        	        alt324 = 1;
        	    }


        	    switch (alt324) 
        		{
        			case 1 :
        			    // AS3.g:1083:37: ( LineTerminator )* ',' ( LineTerminator )* Identifier
        			    {
        			    	// AS3.g:1083:37: ( LineTerminator )*
        			    	do 
        			    	{
        			    	    int alt322 = 2;
        			    	    int LA322_0 = input.LA(1);

        			    	    if ( (LA322_0 == LineTerminator) )
        			    	    {
        			    	        alt322 = 1;
        			    	    }


        			    	    switch (alt322) 
        			    		{
        			    			case 1 :
        			    			    // AS3.g:0:0: LineTerminator
        			    			    {
        			    			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred298_AS35812); if (state.failed) return ;

        			    			    }
        			    			    break;

        			    			default:
        			    			    goto loop322;
        			    	    }
        			    	} while (true);

        			    	loop322:
        			    		;	// Stops C# compiler whining that label 'loop322' has no statements

        			    	Match(input,39,FOLLOW_39_in_synpred298_AS35815); if (state.failed) return ;
        			    	// AS3.g:1083:57: ( LineTerminator )*
        			    	do 
        			    	{
        			    	    int alt323 = 2;
        			    	    int LA323_0 = input.LA(1);

        			    	    if ( (LA323_0 == LineTerminator) )
        			    	    {
        			    	        alt323 = 1;
        			    	    }


        			    	    switch (alt323) 
        			    		{
        			    			case 1 :
        			    			    // AS3.g:0:0: LineTerminator
        			    			    {
        			    			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred298_AS35817); if (state.failed) return ;

        			    			    }
        			    			    break;

        			    			default:
        			    			    goto loop323;
        			    	    }
        			    	} while (true);

        			    	loop323:
        			    		;	// Stops C# compiler whining that label 'loop323' has no statements

        			    	Match(input,Identifier,FOLLOW_Identifier_in_synpred298_AS35820); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop324;
        	    }
        	} while (true);

        	loop324:
        		;	// Stops C# compiler whining that label 'loop324' has no statements


        }
    }
    // $ANTLR end "synpred298_AS3"

    // $ANTLR start "synpred305_AS3"
    public void synpred305_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1095:19: ( ( LineTerminator )* sourceElement )
        // AS3.g:1095:19: ( LineTerminator )* sourceElement
        {
        	// AS3.g:1095:19: ( LineTerminator )*
        	do 
        	{
        	    int alt325 = 2;
        	    alt325 = dfa325.Predict(input);
        	    switch (alt325) 
        		{
        			case 1 :
        			    // AS3.g:0:0: LineTerminator
        			    {
        			    	Match(input,LineTerminator,FOLLOW_LineTerminator_in_synpred305_AS35885); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop325;
        	    }
        	} while (true);

        	loop325:
        		;	// Stops C# compiler whining that label 'loop325' has no statements

        	PushFollow(FOLLOW_sourceElement_in_synpred305_AS35888);
        	sourceElement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred305_AS3"

    // $ANTLR start "synpred306_AS3"
    public void synpred306_AS3_fragment() //throws RecognitionException
    {   
        // AS3.g:1099:4: ( statement )
        // AS3.g:1099:4: statement
        {
        	PushFollow(FOLLOW_statement_in_synpred306_AS35901);
        	statement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred306_AS3"

    // Delegated rules

   	public bool synpred117_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred117_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred212_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred212_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred229_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred229_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred70_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred70_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred260_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred260_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred188_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred188_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred126_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred126_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred90_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred90_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred191_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred191_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred195_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred195_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred108_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred108_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred205_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred205_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred50_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred50_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred38_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred38_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred271_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred271_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred281_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred281_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred114_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred114_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred143_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred143_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred15_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred15_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred105_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred105_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred226_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred226_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred129_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred129_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred200_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred200_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred165_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred165_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred268_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred268_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred16_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred16_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred204_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred204_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred276_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred276_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred111_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred111_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred232_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred232_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred263_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred263_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred102_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred102_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred132_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred132_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred194_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred194_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred215_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred215_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred96_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred96_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred298_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred298_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred146_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred146_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred179_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred179_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred11_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred11_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred297_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred297_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred120_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred120_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred66_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred66_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred137_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred137_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred166_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred166_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred176_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred176_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred305_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred305_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred32_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred32_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred83_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred83_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred162_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred162_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred306_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred306_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred47_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred47_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred142_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred142_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred290_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred290_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred75_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred75_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred48_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred48_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred264_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred264_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred275_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred275_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred169_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred169_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred199_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred199_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred123_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred123_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred183_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred183_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred21_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred21_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred34_AS3() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred34_AS3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}


   	protected DFA1 dfa1;
   	protected DFA4 dfa4;
   	protected DFA5 dfa5;
   	protected DFA8 dfa8;
   	protected DFA7 dfa7;
   	protected DFA17 dfa17;
   	protected DFA18 dfa18;
   	protected DFA22 dfa22;
   	protected DFA25 dfa25;
   	protected DFA24 dfa24;
   	protected DFA28 dfa28;
   	protected DFA30 dfa30;
   	protected DFA37 dfa37;
   	protected DFA33 dfa33;
   	protected DFA35 dfa35;
   	protected DFA39 dfa39;
   	protected DFA40 dfa40;
   	protected DFA41 dfa41;
   	protected DFA44 dfa44;
   	protected DFA43 dfa43;
   	protected DFA47 dfa47;
   	protected DFA46 dfa46;
   	protected DFA50 dfa50;
   	protected DFA49 dfa49;
   	protected DFA53 dfa53;
   	protected DFA52 dfa52;
   	protected DFA56 dfa56;
   	protected DFA55 dfa55;
   	protected DFA59 dfa59;
   	protected DFA58 dfa58;
   	protected DFA62 dfa62;
   	protected DFA61 dfa61;
   	protected DFA65 dfa65;
   	protected DFA64 dfa64;
   	protected DFA68 dfa68;
   	protected DFA67 dfa67;
   	protected DFA71 dfa71;
   	protected DFA70 dfa70;
   	protected DFA74 dfa74;
   	protected DFA73 dfa73;
   	protected DFA77 dfa77;
   	protected DFA76 dfa76;
   	protected DFA80 dfa80;
   	protected DFA79 dfa79;
   	protected DFA83 dfa83;
   	protected DFA82 dfa82;
   	protected DFA86 dfa86;
   	protected DFA85 dfa85;
   	protected DFA89 dfa89;
   	protected DFA88 dfa88;
   	protected DFA92 dfa92;
   	protected DFA91 dfa91;
   	protected DFA97 dfa97;
   	protected DFA94 dfa94;
   	protected DFA96 dfa96;
   	protected DFA102 dfa102;
   	protected DFA99 dfa99;
   	protected DFA101 dfa101;
   	protected DFA105 dfa105;
   	protected DFA104 dfa104;
   	protected DFA108 dfa108;
   	protected DFA107 dfa107;
   	protected DFA111 dfa111;
   	protected DFA110 dfa110;
   	protected DFA113 dfa113;
   	protected DFA115 dfa115;
   	protected DFA116 dfa116;
   	protected DFA117 dfa117;
   	protected DFA120 dfa120;
   	protected DFA119 dfa119;
   	protected DFA124 dfa124;
   	protected DFA130 dfa130;
   	protected DFA131 dfa131;
   	protected DFA135 dfa135;
   	protected DFA136 dfa136;
   	protected DFA138 dfa138;
   	protected DFA139 dfa139;
   	protected DFA141 dfa141;
   	protected DFA140 dfa140;
   	protected DFA143 dfa143;
   	protected DFA145 dfa145;
   	protected DFA148 dfa148;
   	protected DFA147 dfa147;
   	protected DFA150 dfa150;
   	protected DFA154 dfa154;
   	protected DFA156 dfa156;
   	protected DFA159 dfa159;
   	protected DFA158 dfa158;
   	protected DFA162 dfa162;
   	protected DFA161 dfa161;
   	protected DFA165 dfa165;
   	protected DFA164 dfa164;
   	protected DFA167 dfa167;
   	protected DFA169 dfa169;
   	protected DFA171 dfa171;
   	protected DFA173 dfa173;
   	protected DFA175 dfa175;
   	protected DFA177 dfa177;
   	protected DFA180 dfa180;
   	protected DFA182 dfa182;
   	protected DFA184 dfa184;
   	protected DFA186 dfa186;
   	protected DFA196 dfa196;
   	protected DFA198 dfa198;
   	protected DFA199 dfa199;
   	protected DFA201 dfa201;
   	protected DFA202 dfa202;
   	protected DFA204 dfa204;
   	protected DFA206 dfa206;
   	protected DFA205 dfa205;
   	protected DFA210 dfa210;
   	protected DFA230 dfa230;
   	protected DFA232 dfa232;
   	protected DFA235 dfa235;
   	protected DFA234 dfa234;
   	protected DFA236 dfa236;
   	protected DFA237 dfa237;
   	protected DFA240 dfa240;
   	protected DFA239 dfa239;
   	protected DFA246 dfa246;
   	protected DFA247 dfa247;
   	protected DFA249 dfa249;
   	protected DFA252 dfa252;
   	protected DFA254 dfa254;
   	protected DFA256 dfa256;
   	protected DFA258 dfa258;
   	protected DFA260 dfa260;
   	protected DFA262 dfa262;
   	protected DFA264 dfa264;
   	protected DFA266 dfa266;
   	protected DFA268 dfa268;
   	protected DFA270 dfa270;
   	protected DFA272 dfa272;
   	protected DFA274 dfa274;
   	protected DFA276 dfa276;
   	protected DFA278 dfa278;
   	protected DFA280 dfa280;
   	protected DFA282 dfa282;
   	protected DFA284 dfa284;
   	protected DFA286 dfa286;
   	protected DFA288 dfa288;
   	protected DFA290 dfa290;
   	protected DFA292 dfa292;
   	protected DFA294 dfa294;
   	protected DFA296 dfa296;
   	protected DFA297 dfa297;
   	protected DFA308 dfa308;
   	protected DFA309 dfa309;
   	protected DFA310 dfa310;
   	protected DFA311 dfa311;
   	protected DFA325 dfa325;
	private void InitializeCyclicDFAs()
	{
    	this.dfa1 = new DFA1(this);
    	this.dfa4 = new DFA4(this);
    	this.dfa5 = new DFA5(this);
    	this.dfa8 = new DFA8(this);
    	this.dfa7 = new DFA7(this);
    	this.dfa17 = new DFA17(this);
    	this.dfa18 = new DFA18(this);
    	this.dfa22 = new DFA22(this);
    	this.dfa25 = new DFA25(this);
    	this.dfa24 = new DFA24(this);
    	this.dfa28 = new DFA28(this);
    	this.dfa30 = new DFA30(this);
    	this.dfa37 = new DFA37(this);
    	this.dfa33 = new DFA33(this);
    	this.dfa35 = new DFA35(this);
    	this.dfa39 = new DFA39(this);
    	this.dfa40 = new DFA40(this);
    	this.dfa41 = new DFA41(this);
    	this.dfa44 = new DFA44(this);
    	this.dfa43 = new DFA43(this);
    	this.dfa47 = new DFA47(this);
    	this.dfa46 = new DFA46(this);
    	this.dfa50 = new DFA50(this);
    	this.dfa49 = new DFA49(this);
    	this.dfa53 = new DFA53(this);
    	this.dfa52 = new DFA52(this);
    	this.dfa56 = new DFA56(this);
    	this.dfa55 = new DFA55(this);
    	this.dfa59 = new DFA59(this);
    	this.dfa58 = new DFA58(this);
    	this.dfa62 = new DFA62(this);
    	this.dfa61 = new DFA61(this);
    	this.dfa65 = new DFA65(this);
    	this.dfa64 = new DFA64(this);
    	this.dfa68 = new DFA68(this);
    	this.dfa67 = new DFA67(this);
    	this.dfa71 = new DFA71(this);
    	this.dfa70 = new DFA70(this);
    	this.dfa74 = new DFA74(this);
    	this.dfa73 = new DFA73(this);
    	this.dfa77 = new DFA77(this);
    	this.dfa76 = new DFA76(this);
    	this.dfa80 = new DFA80(this);
    	this.dfa79 = new DFA79(this);
    	this.dfa83 = new DFA83(this);
    	this.dfa82 = new DFA82(this);
    	this.dfa86 = new DFA86(this);
    	this.dfa85 = new DFA85(this);
    	this.dfa89 = new DFA89(this);
    	this.dfa88 = new DFA88(this);
    	this.dfa92 = new DFA92(this);
    	this.dfa91 = new DFA91(this);
    	this.dfa97 = new DFA97(this);
    	this.dfa94 = new DFA94(this);
    	this.dfa96 = new DFA96(this);
    	this.dfa102 = new DFA102(this);
    	this.dfa99 = new DFA99(this);
    	this.dfa101 = new DFA101(this);
    	this.dfa105 = new DFA105(this);
    	this.dfa104 = new DFA104(this);
    	this.dfa108 = new DFA108(this);
    	this.dfa107 = new DFA107(this);
    	this.dfa111 = new DFA111(this);
    	this.dfa110 = new DFA110(this);
    	this.dfa113 = new DFA113(this);
    	this.dfa115 = new DFA115(this);
    	this.dfa116 = new DFA116(this);
    	this.dfa117 = new DFA117(this);
    	this.dfa120 = new DFA120(this);
    	this.dfa119 = new DFA119(this);
    	this.dfa124 = new DFA124(this);
    	this.dfa130 = new DFA130(this);
    	this.dfa131 = new DFA131(this);
    	this.dfa135 = new DFA135(this);
    	this.dfa136 = new DFA136(this);
    	this.dfa138 = new DFA138(this);
    	this.dfa139 = new DFA139(this);
    	this.dfa141 = new DFA141(this);
    	this.dfa140 = new DFA140(this);
    	this.dfa143 = new DFA143(this);
    	this.dfa145 = new DFA145(this);
    	this.dfa148 = new DFA148(this);
    	this.dfa147 = new DFA147(this);
    	this.dfa150 = new DFA150(this);
    	this.dfa154 = new DFA154(this);
    	this.dfa156 = new DFA156(this);
    	this.dfa159 = new DFA159(this);
    	this.dfa158 = new DFA158(this);
    	this.dfa162 = new DFA162(this);
    	this.dfa161 = new DFA161(this);
    	this.dfa165 = new DFA165(this);
    	this.dfa164 = new DFA164(this);
    	this.dfa167 = new DFA167(this);
    	this.dfa169 = new DFA169(this);
    	this.dfa171 = new DFA171(this);
    	this.dfa173 = new DFA173(this);
    	this.dfa175 = new DFA175(this);
    	this.dfa177 = new DFA177(this);
    	this.dfa180 = new DFA180(this);
    	this.dfa182 = new DFA182(this);
    	this.dfa184 = new DFA184(this);
    	this.dfa186 = new DFA186(this);
    	this.dfa196 = new DFA196(this);
    	this.dfa198 = new DFA198(this);
    	this.dfa199 = new DFA199(this);
    	this.dfa201 = new DFA201(this);
    	this.dfa202 = new DFA202(this);
    	this.dfa204 = new DFA204(this);
    	this.dfa206 = new DFA206(this);
    	this.dfa205 = new DFA205(this);
    	this.dfa210 = new DFA210(this);
    	this.dfa230 = new DFA230(this);
    	this.dfa232 = new DFA232(this);
    	this.dfa235 = new DFA235(this);
    	this.dfa234 = new DFA234(this);
    	this.dfa236 = new DFA236(this);
    	this.dfa237 = new DFA237(this);
    	this.dfa240 = new DFA240(this);
    	this.dfa239 = new DFA239(this);
    	this.dfa246 = new DFA246(this);
    	this.dfa247 = new DFA247(this);
    	this.dfa249 = new DFA249(this);
    	this.dfa252 = new DFA252(this);
    	this.dfa254 = new DFA254(this);
    	this.dfa256 = new DFA256(this);
    	this.dfa258 = new DFA258(this);
    	this.dfa260 = new DFA260(this);
    	this.dfa262 = new DFA262(this);
    	this.dfa264 = new DFA264(this);
    	this.dfa266 = new DFA266(this);
    	this.dfa268 = new DFA268(this);
    	this.dfa270 = new DFA270(this);
    	this.dfa272 = new DFA272(this);
    	this.dfa274 = new DFA274(this);
    	this.dfa276 = new DFA276(this);
    	this.dfa278 = new DFA278(this);
    	this.dfa280 = new DFA280(this);
    	this.dfa282 = new DFA282(this);
    	this.dfa284 = new DFA284(this);
    	this.dfa286 = new DFA286(this);
    	this.dfa288 = new DFA288(this);
    	this.dfa290 = new DFA290(this);
    	this.dfa292 = new DFA292(this);
    	this.dfa294 = new DFA294(this);
    	this.dfa296 = new DFA296(this);
    	this.dfa297 = new DFA297(this);
    	this.dfa308 = new DFA308(this);
    	this.dfa309 = new DFA309(this);
    	this.dfa310 = new DFA310(this);
    	this.dfa311 = new DFA311(this);
    	this.dfa325 = new DFA325(this);

	    this.dfa4.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA4_SpecialStateTransition);

	    this.dfa8.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA8_SpecialStateTransition);



	    this.dfa22.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA22_SpecialStateTransition);
	    this.dfa25.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA25_SpecialStateTransition);

	    this.dfa28.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA28_SpecialStateTransition);

	    this.dfa37.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA37_SpecialStateTransition);


	    this.dfa39.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA39_SpecialStateTransition);


	    this.dfa44.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA44_SpecialStateTransition);

	    this.dfa47.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA47_SpecialStateTransition);

	    this.dfa50.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA50_SpecialStateTransition);

	    this.dfa53.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA53_SpecialStateTransition);

	    this.dfa56.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA56_SpecialStateTransition);

	    this.dfa59.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA59_SpecialStateTransition);

	    this.dfa62.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA62_SpecialStateTransition);

	    this.dfa65.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA65_SpecialStateTransition);

	    this.dfa68.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA68_SpecialStateTransition);

	    this.dfa71.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA71_SpecialStateTransition);

	    this.dfa74.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA74_SpecialStateTransition);

	    this.dfa77.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA77_SpecialStateTransition);

	    this.dfa80.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA80_SpecialStateTransition);

	    this.dfa83.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA83_SpecialStateTransition);

	    this.dfa86.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA86_SpecialStateTransition);

	    this.dfa89.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA89_SpecialStateTransition);

	    this.dfa92.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA92_SpecialStateTransition);

	    this.dfa97.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA97_SpecialStateTransition);


	    this.dfa102.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA102_SpecialStateTransition);


	    this.dfa105.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA105_SpecialStateTransition);

	    this.dfa108.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA108_SpecialStateTransition);

	    this.dfa111.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA111_SpecialStateTransition);


	    this.dfa115.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA115_SpecialStateTransition);
	    this.dfa116.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA116_SpecialStateTransition);

	    this.dfa120.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA120_SpecialStateTransition);

	    this.dfa124.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA124_SpecialStateTransition);
	    this.dfa130.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA130_SpecialStateTransition);
	    this.dfa131.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA131_SpecialStateTransition);
	    this.dfa135.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA135_SpecialStateTransition);
	    this.dfa136.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA136_SpecialStateTransition);


	    this.dfa141.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA141_SpecialStateTransition);
	    this.dfa140.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA140_SpecialStateTransition);


	    this.dfa148.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA148_SpecialStateTransition);




	    this.dfa159.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA159_SpecialStateTransition);

	    this.dfa162.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA162_SpecialStateTransition);

	    this.dfa165.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA165_SpecialStateTransition);












	    this.dfa198.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA198_SpecialStateTransition);

	    this.dfa201.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA201_SpecialStateTransition);


	    this.dfa206.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA206_SpecialStateTransition);
	    this.dfa205.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA205_SpecialStateTransition);
	    this.dfa210.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA210_SpecialStateTransition);


	    this.dfa235.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA235_SpecialStateTransition);

	    this.dfa236.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA236_SpecialStateTransition);



































	}

    const string DFA1_eotS =
        "\x0b\uffff";
    const string DFA1_eofS =
        "\x0b\uffff";
    const string DFA1_minS =
        "\x01\x05\x0a\uffff";
    const string DFA1_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA1_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA1_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA1_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA1_eot = DFA.UnpackEncodedString(DFA1_eotS);
    static readonly short[] DFA1_eof = DFA.UnpackEncodedString(DFA1_eofS);
    static readonly char[] DFA1_min = DFA.UnpackEncodedStringToUnsignedChars(DFA1_minS);
    static readonly char[] DFA1_max = DFA.UnpackEncodedStringToUnsignedChars(DFA1_maxS);
    static readonly short[] DFA1_accept = DFA.UnpackEncodedString(DFA1_acceptS);
    static readonly short[] DFA1_special = DFA.UnpackEncodedString(DFA1_specialS);
    static readonly short[][] DFA1_transition = DFA.UnpackEncodedStringArray(DFA1_transitionS);

    protected class DFA1 : DFA
    {
        public DFA1(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 747:9: ( LineTerminator )*"; }
        }

    }

    const string DFA4_eotS =
        "\x1a\uffff";
    const string DFA4_eofS =
        "\x1a\uffff";
    const string DFA4_minS =
        "\x01\x05\x09\uffff\x01\x00\x0f\uffff";
    const string DFA4_maxS =
        "\x01\x6b\x09\uffff\x01\x00\x0f\uffff";
    const string DFA4_acceptS =
        "\x01\uffff\x01\x02\x17\uffff\x01\x01";
    const string DFA4_specialS =
        "\x0a\uffff\x01\x00\x0f\uffff}>";
    static readonly string[] DFA4_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x04\x01\x02\uffff\x01\x01\x01\uffff\x09\x01\x34"+
            "\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
    static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
    static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
    static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
    static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
    static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
    static readonly short[][] DFA4_transition = DFA.UnpackEncodedStringArray(DFA4_transitionS);

    protected class DFA4 : DFA
    {
        public DFA4(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 751:8: ( LineTerminator )*"; }
        }

    }


    protected internal int DFA4_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA4_10 = input.LA(1);

                   	 
                   	int index4_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred11_AS3()) ) { s = 25; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index4_10);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 4, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA5_eotS =
        "\x0d\uffff";
    const string DFA5_eofS =
        "\x0d\uffff";
    const string DFA5_minS =
        "\x01\x05\x0c\uffff";
    const string DFA5_maxS =
        "\x01\x6b\x0c\uffff";
    const string DFA5_acceptS =
        "\x01\uffff\x01\x01\x08\uffff\x01\x02\x02\uffff";
    const string DFA5_specialS =
        "\x0d\uffff}>";
    static readonly string[] DFA5_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\x0a\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
    static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
    static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
    static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
    static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
    static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
    static readonly short[][] DFA5_transition = DFA.UnpackEncodedStringArray(DFA5_transitionS);

    protected class DFA5 : DFA
    {
        public DFA5(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;

        }

        override public string Description
        {
            get { return "751:24: ( assignmentExpression )?"; }
        }

    }

    const string DFA8_eotS =
        "\x19\uffff";
    const string DFA8_eofS =
        "\x19\uffff";
    const string DFA8_minS =
        "\x02\x05\x14\uffff\x01\x00\x02\uffff";
    const string DFA8_maxS =
        "\x02\x6b\x14\uffff\x01\x00\x02\uffff";
    const string DFA8_acceptS =
        "\x02\uffff\x01\x01\x08\uffff\x01\x02\x0d\uffff";
    const string DFA8_specialS =
        "\x16\uffff\x01\x00\x02\uffff}>";
    static readonly string[] DFA8_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x02"+
            "\x02\x01\uffff\x01\x02\x02\x0b\x01\x02\x02\uffff\x01\x02\x01"+
            "\uffff\x09\x02\x34\uffff\x01\x02",
            "\x01\x16\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x02"+
            "\x02\x01\uffff\x01\x02\x02\x0b\x01\x02\x02\uffff\x01\x02\x01"+
            "\uffff\x09\x02\x34\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            ""
    };

    static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
    static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
    static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
    static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
    static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
    static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
    static readonly short[][] DFA8_transition = DFA.UnpackEncodedStringArray(DFA8_transitionS);

    protected class DFA8 : DFA
    {
        public DFA8(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;

        }

        override public string Description
        {
            get { return "751:67: ( ( LineTerminator )* assignmentExpression )?"; }
        }

    }


    protected internal int DFA8_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA8_22 = input.LA(1);

                   	 
                   	int index8_22 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred15_AS3()) ) { s = 2; }

                   	else if ( (true) ) { s = 11; }

                   	 
                   	input.Seek(index8_22);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 8, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA7_eotS =
        "\x0b\uffff";
    const string DFA7_eofS =
        "\x0b\uffff";
    const string DFA7_minS =
        "\x01\x05\x0a\uffff";
    const string DFA7_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA7_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA7_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA7_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
    static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
    static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
    static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
    static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
    static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
    static readonly short[][] DFA7_transition = DFA.UnpackEncodedStringArray(DFA7_transitionS);

    protected class DFA7 : DFA
    {
        public DFA7(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 751:68: ( LineTerminator )*"; }
        }

    }

    const string DFA17_eotS =
        "\x0b\uffff";
    const string DFA17_eofS =
        "\x0b\uffff";
    const string DFA17_minS =
        "\x01\x05\x0a\uffff";
    const string DFA17_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA17_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA17_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA17_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA17_eot = DFA.UnpackEncodedString(DFA17_eotS);
    static readonly short[] DFA17_eof = DFA.UnpackEncodedString(DFA17_eofS);
    static readonly char[] DFA17_min = DFA.UnpackEncodedStringToUnsignedChars(DFA17_minS);
    static readonly char[] DFA17_max = DFA.UnpackEncodedStringToUnsignedChars(DFA17_maxS);
    static readonly short[] DFA17_accept = DFA.UnpackEncodedString(DFA17_acceptS);
    static readonly short[] DFA17_special = DFA.UnpackEncodedString(DFA17_specialS);
    static readonly short[][] DFA17_transition = DFA.UnpackEncodedStringArray(DFA17_transitionS);

    protected class DFA17 : DFA
    {
        public DFA17(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 759:37: ( LineTerminator )*"; }
        }

    }

    const string DFA18_eotS =
        "\x0a\uffff";
    const string DFA18_eofS =
        "\x0a\uffff";
    const string DFA18_minS =
        "\x01\x05\x09\uffff";
    const string DFA18_maxS =
        "\x01\x6b\x09\uffff";
    const string DFA18_acceptS =
        "\x01\uffff\x01\x02\x07\uffff\x01\x01";
    const string DFA18_specialS =
        "\x0a\uffff}>";
    static readonly string[] DFA18_transitionS = {
            "\x01\x09\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x3e"+
            "\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA18_eot = DFA.UnpackEncodedString(DFA18_eotS);
    static readonly short[] DFA18_eof = DFA.UnpackEncodedString(DFA18_eofS);
    static readonly char[] DFA18_min = DFA.UnpackEncodedStringToUnsignedChars(DFA18_minS);
    static readonly char[] DFA18_max = DFA.UnpackEncodedStringToUnsignedChars(DFA18_maxS);
    static readonly short[] DFA18_accept = DFA.UnpackEncodedString(DFA18_acceptS);
    static readonly short[] DFA18_special = DFA.UnpackEncodedString(DFA18_specialS);
    static readonly short[][] DFA18_transition = DFA.UnpackEncodedStringArray(DFA18_transitionS);

    protected class DFA18 : DFA
    {
        public DFA18(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 769:52: ( LineTerminator )*"; }
        }

    }

    const string DFA22_eotS =
        "\x6a\uffff";
    const string DFA22_eofS =
        "\x02\x02\x68\uffff";
    const string DFA22_minS =
        "\x02\x05\x1a\uffff\x01\x05\x19\uffff\x01\x00\x0f\uffff\x01\x00"+
        "\x17\uffff\x0a\x00\x02\uffff";
    const string DFA22_maxS =
        "\x02\x6b\x1a\uffff\x01\x6b\x19\uffff\x01\x00\x0f\uffff\x01\x00"+
        "\x17\uffff\x0a\x00\x02\uffff";
    const string DFA22_acceptS =
        "\x02\uffff\x01\x02\x2c\uffff\x01\x01\x3a\uffff";
    const string DFA22_specialS =
        "\x36\uffff\x01\x00\x0f\uffff\x01\x01\x17\uffff\x01\x02\x01\x03"+
        "\x01\x04\x01\x05\x01\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b"+
        "\x02\uffff}>";
    static readonly string[] DFA22_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x03"+
            "\x02\x01\x1c\x06\x02\x01\x2f\x3b\x02\x02\uffff\x01\x02",
            "\x01\x46\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x03"+
            "\x02\x01\x36\x06\x02\x01\x2f\x3b\x02\x02\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\x5e\x06\uffff\x01\x60\x05\uffff\x04\x61\x0d\uffff\x01"+
            "\x5f\x01\x64\x01\uffff\x01\x62\x02\x02\x01\x63\x02\uffff\x01"+
            "\x66\x01\uffff\x09\x67\x34\uffff\x01\x65",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            ""
    };

    static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
    static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
    static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
    static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
    static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
    static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
    static readonly short[][] DFA22_transition = DFA.UnpackEncodedStringArray(DFA22_transitionS);

    protected class DFA22 : DFA
    {
        public DFA22(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 769:115: ( ( LineTerminator )* memberExpressionSuffix )*"; }
        }

    }


    protected internal int DFA22_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA22_54 = input.LA(1);

                   	 
                   	int index22_54 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_54);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA22_70 = input.LA(1);

                   	 
                   	int index22_70 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_70);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA22_94 = input.LA(1);

                   	 
                   	int index22_94 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_94);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA22_95 = input.LA(1);

                   	 
                   	int index22_95 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_95);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA22_96 = input.LA(1);

                   	 
                   	int index22_96 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_96);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA22_97 = input.LA(1);

                   	 
                   	int index22_97 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_97);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA22_98 = input.LA(1);

                   	 
                   	int index22_98 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_98);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA22_99 = input.LA(1);

                   	 
                   	int index22_99 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_99);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA22_100 = input.LA(1);

                   	 
                   	int index22_100 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_100);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA22_101 = input.LA(1);

                   	 
                   	int index22_101 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_101);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA22_102 = input.LA(1);

                   	 
                   	int index22_102 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_102);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA22_103 = input.LA(1);

                   	 
                   	int index22_103 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred32_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index22_103);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 22, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA25_eotS =
        "\x13\uffff";
    const string DFA25_eofS =
        "\x13\uffff";
    const string DFA25_minS =
        "\x01\x0c\x07\uffff\x01\x05\x09\x00\x01\uffff";
    const string DFA25_maxS =
        "\x01\x6b\x07\uffff\x01\x6b\x09\x00\x01\uffff";
    const string DFA25_acceptS =
        "\x01\uffff\x01\x01\x10\uffff\x01\x02";
    const string DFA25_specialS =
        "\x09\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01"+
        "\x06\x01\x07\x01\x08\x01\uffff}>";
    static readonly string[] DFA25_transitionS = {
            "\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02\x01\x01\uffff\x01"+
            "\x01\x02\uffff\x01\x01\x02\uffff\x01\x08\x3e\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\x09\x06\uffff\x01\x0b\x05\uffff\x04\x0c\x0d\uffff\x01"+
            "\x0a\x01\x0f\x01\uffff\x01\x0d\x02\uffff\x01\x0e\x02\uffff\x01"+
            "\x11\x3e\uffff\x01\x10",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            ""
    };

    static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
    static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
    static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
    static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
    static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
    static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
    static readonly short[][] DFA25_transition = DFA.UnpackEncodedStringArray(DFA25_transitionS);

    protected class DFA25 : DFA
    {
        public DFA25(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;

        }

        override public string Description
        {
            get { return "777:1: newExpression : ( memberExpression | 'new' ( LineTerminator )* newExpression );"; }
        }

    }


    protected internal int DFA25_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA25_9 = input.LA(1);

                   	 
                   	int index25_9 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred34_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index25_9);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA25_10 = input.LA(1);

                   	 
                   	int index25_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred34_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index25_10);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA25_11 = input.LA(1);

                   	 
                   	int index25_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred34_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index25_11);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA25_12 = input.LA(1);

                   	 
                   	int index25_12 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred34_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index25_12);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA25_13 = input.LA(1);

                   	 
                   	int index25_13 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred34_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index25_13);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA25_14 = input.LA(1);

                   	 
                   	int index25_14 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred34_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index25_14);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA25_15 = input.LA(1);

                   	 
                   	int index25_15 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred34_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index25_15);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA25_16 = input.LA(1);

                   	 
                   	int index25_16 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred34_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index25_16);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA25_17 = input.LA(1);

                   	 
                   	int index25_17 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred34_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index25_17);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 25, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA24_eotS =
        "\x0a\uffff";
    const string DFA24_eofS =
        "\x0a\uffff";
    const string DFA24_minS =
        "\x01\x05\x09\uffff";
    const string DFA24_maxS =
        "\x01\x6b\x09\uffff";
    const string DFA24_acceptS =
        "\x01\uffff\x01\x02\x07\uffff\x01\x01";
    const string DFA24_specialS =
        "\x0a\uffff}>";
    static readonly string[] DFA24_transitionS = {
            "\x01\x09\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x3e"+
            "\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA24_eot = DFA.UnpackEncodedString(DFA24_eotS);
    static readonly short[] DFA24_eof = DFA.UnpackEncodedString(DFA24_eofS);
    static readonly char[] DFA24_min = DFA.UnpackEncodedStringToUnsignedChars(DFA24_minS);
    static readonly char[] DFA24_max = DFA.UnpackEncodedStringToUnsignedChars(DFA24_maxS);
    static readonly short[] DFA24_accept = DFA.UnpackEncodedString(DFA24_acceptS);
    static readonly short[] DFA24_special = DFA.UnpackEncodedString(DFA24_specialS);
    static readonly short[][] DFA24_transition = DFA.UnpackEncodedStringArray(DFA24_transitionS);

    protected class DFA24 : DFA
    {
        public DFA24(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 779:10: ( LineTerminator )*"; }
        }

    }

    const string DFA28_eotS =
        "\x75\uffff";
    const string DFA28_eofS =
        "\x01\x01\x01\uffff\x01\x01\x72\uffff";
    const string DFA28_minS =
        "\x01\x05\x01\uffff\x01\x05\x18\uffff\x02\x05\x19\uffff\x02\x00"+
        "\x0e\uffff\x01\x00\x17\uffff\x0a\x00\x02\uffff\x0a\x00\x01\uffff";
    const string DFA28_maxS =
        "\x01\x6b\x01\uffff\x01\x6b\x18\uffff\x02\x6b\x19\uffff\x02\x00"+
        "\x0e\uffff\x01\x00\x17\uffff\x0a\x00\x02\uffff\x0a\x00\x01\uffff";
    const string DFA28_acceptS =
        "\x01\uffff\x01\x02\x2d\uffff\x01\x01\x45\uffff";
    const string DFA28_specialS =
        "\x36\uffff\x01\x00\x01\x01\x0e\uffff\x01\x02\x17\uffff\x01\x03"+
        "\x01\x04\x01\x05\x01\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b"+
        "\x01\x0c\x02\uffff\x01\x0d\x01\x0e\x01\x0f\x01\x10\x01\x11\x01\x12"+
        "\x01\x13\x01\x14\x01\x15\x01\x16\x01\uffff}>";
    static readonly string[] DFA28_transitionS = {
            "\x01\x02\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x01"+
            "\x01\x01\x1c\x01\x01\x01\x1b\x06\x01\x01\x2f\x3b\x01\x02\uffff"+
            "\x01\x01",
            "",
            "\x01\x46\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x01"+
            "\x01\x01\x37\x01\x01\x01\x36\x06\x01\x01\x2f\x3b\x01\x02\uffff"+
            "\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\x5e\x06\uffff\x01\x60\x05\uffff\x04\x61\x0d\uffff\x01"+
            "\x5f\x01\x64\x01\uffff\x01\x62\x02\x01\x01\x63\x02\uffff\x01"+
            "\x66\x01\uffff\x09\x67\x34\uffff\x01\x65",
            "\x01\x6a\x06\uffff\x01\x6c\x05\uffff\x04\x6d\x0d\uffff\x01"+
            "\x6b\x01\x70\x01\x2f\x01\x6e\x02\uffff\x01\x6f\x02\uffff\x01"+
            "\x72\x01\uffff\x09\x73\x34\uffff\x01\x71",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            ""
    };

    static readonly short[] DFA28_eot = DFA.UnpackEncodedString(DFA28_eotS);
    static readonly short[] DFA28_eof = DFA.UnpackEncodedString(DFA28_eofS);
    static readonly char[] DFA28_min = DFA.UnpackEncodedStringToUnsignedChars(DFA28_minS);
    static readonly char[] DFA28_max = DFA.UnpackEncodedStringToUnsignedChars(DFA28_maxS);
    static readonly short[] DFA28_accept = DFA.UnpackEncodedString(DFA28_acceptS);
    static readonly short[] DFA28_special = DFA.UnpackEncodedString(DFA28_specialS);
    static readonly short[][] DFA28_transition = DFA.UnpackEncodedStringArray(DFA28_transitionS);

    protected class DFA28 : DFA
    {
        public DFA28(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 783:50: ( ( LineTerminator )* callExpressionSuffix )*"; }
        }

    }


    protected internal int DFA28_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA28_54 = input.LA(1);

                   	 
                   	int index28_54 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_54);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA28_55 = input.LA(1);

                   	 
                   	int index28_55 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_55);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA28_70 = input.LA(1);

                   	 
                   	int index28_70 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_70);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA28_94 = input.LA(1);

                   	 
                   	int index28_94 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_94);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA28_95 = input.LA(1);

                   	 
                   	int index28_95 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_95);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA28_96 = input.LA(1);

                   	 
                   	int index28_96 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_96);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA28_97 = input.LA(1);

                   	 
                   	int index28_97 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_97);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA28_98 = input.LA(1);

                   	 
                   	int index28_98 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_98);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA28_99 = input.LA(1);

                   	 
                   	int index28_99 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_99);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA28_100 = input.LA(1);

                   	 
                   	int index28_100 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_100);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA28_101 = input.LA(1);

                   	 
                   	int index28_101 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_101);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA28_102 = input.LA(1);

                   	 
                   	int index28_102 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_102);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA28_103 = input.LA(1);

                   	 
                   	int index28_103 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_103);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA28_106 = input.LA(1);

                   	 
                   	int index28_106 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_106);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA28_107 = input.LA(1);

                   	 
                   	int index28_107 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_107);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 15 : 
                   	int LA28_108 = input.LA(1);

                   	 
                   	int index28_108 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_108);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 16 : 
                   	int LA28_109 = input.LA(1);

                   	 
                   	int index28_109 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_109);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 17 : 
                   	int LA28_110 = input.LA(1);

                   	 
                   	int index28_110 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_110);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 18 : 
                   	int LA28_111 = input.LA(1);

                   	 
                   	int index28_111 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_111);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 19 : 
                   	int LA28_112 = input.LA(1);

                   	 
                   	int index28_112 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_112);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 20 : 
                   	int LA28_113 = input.LA(1);

                   	 
                   	int index28_113 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_113);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 21 : 
                   	int LA28_114 = input.LA(1);

                   	 
                   	int index28_114 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_114);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 22 : 
                   	int LA28_115 = input.LA(1);

                   	 
                   	int index28_115 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred38_AS3()) ) { s = 47; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index28_115);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 28, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA30_eotS =
        "\x0b\uffff";
    const string DFA30_eofS =
        "\x0b\uffff";
    const string DFA30_minS =
        "\x01\x05\x0a\uffff";
    const string DFA30_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA30_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA30_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA30_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA30_eot = DFA.UnpackEncodedString(DFA30_eotS);
    static readonly short[] DFA30_eof = DFA.UnpackEncodedString(DFA30_eofS);
    static readonly char[] DFA30_min = DFA.UnpackEncodedStringToUnsignedChars(DFA30_minS);
    static readonly char[] DFA30_max = DFA.UnpackEncodedStringToUnsignedChars(DFA30_maxS);
    static readonly short[] DFA30_accept = DFA.UnpackEncodedString(DFA30_acceptS);
    static readonly short[] DFA30_special = DFA.UnpackEncodedString(DFA30_specialS);
    static readonly short[][] DFA30_transition = DFA.UnpackEncodedStringArray(DFA30_transitionS);

    protected class DFA30 : DFA
    {
        public DFA30(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 793:8: ( LineTerminator )*"; }
        }

    }

    const string DFA37_eotS =
        "\x17\uffff";
    const string DFA37_eofS =
        "\x17\uffff";
    const string DFA37_minS =
        "\x02\x05\x0b\uffff\x01\x00\x09\uffff";
    const string DFA37_maxS =
        "\x02\x6b\x0b\uffff\x01\x00\x09\uffff";
    const string DFA37_acceptS =
        "\x02\uffff\x01\x01\x08\uffff\x01\x02\x0b\uffff";
    const string DFA37_specialS =
        "\x0d\uffff\x01\x00\x09\uffff}>";
    static readonly string[] DFA37_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x02"+
            "\x02\x01\x0b\x01\x02\x02\uffff\x01\x02\x02\uffff\x01\x02\x01"+
            "\uffff\x09\x02\x34\uffff\x01\x02",
            "\x01\x0d\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x02"+
            "\x02\x01\x0b\x01\x02\x02\uffff\x01\x02\x02\uffff\x01\x02\x01"+
            "\uffff\x09\x02\x34\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
    static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
    static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
    static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
    static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
    static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
    static readonly short[][] DFA37_transition = DFA.UnpackEncodedStringArray(DFA37_transitionS);

    protected class DFA37 : DFA
    {
        public DFA37(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;

        }

        override public string Description
        {
            get { return "801:8: ( ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )?"; }
        }

    }


    protected internal int DFA37_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA37_13 = input.LA(1);

                   	 
                   	int index37_13 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred48_AS3()) ) { s = 2; }

                   	else if ( (true) ) { s = 11; }

                   	 
                   	input.Seek(index37_13);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 37, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA33_eotS =
        "\x0b\uffff";
    const string DFA33_eofS =
        "\x0b\uffff";
    const string DFA33_minS =
        "\x01\x05\x0a\uffff";
    const string DFA33_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA33_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA33_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA33_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA33_eot = DFA.UnpackEncodedString(DFA33_eotS);
    static readonly short[] DFA33_eof = DFA.UnpackEncodedString(DFA33_eofS);
    static readonly char[] DFA33_min = DFA.UnpackEncodedStringToUnsignedChars(DFA33_minS);
    static readonly char[] DFA33_max = DFA.UnpackEncodedStringToUnsignedChars(DFA33_maxS);
    static readonly short[] DFA33_accept = DFA.UnpackEncodedString(DFA33_acceptS);
    static readonly short[] DFA33_special = DFA.UnpackEncodedString(DFA33_specialS);
    static readonly short[][] DFA33_transition = DFA.UnpackEncodedStringArray(DFA33_transitionS);

    protected class DFA33 : DFA
    {
        public DFA33(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 801:9: ( LineTerminator )*"; }
        }

    }

    const string DFA35_eotS =
        "\x0b\uffff";
    const string DFA35_eofS =
        "\x0b\uffff";
    const string DFA35_minS =
        "\x01\x05\x0a\uffff";
    const string DFA35_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA35_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA35_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA35_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA35_eot = DFA.UnpackEncodedString(DFA35_eotS);
    static readonly short[] DFA35_eof = DFA.UnpackEncodedString(DFA35_eofS);
    static readonly char[] DFA35_min = DFA.UnpackEncodedStringToUnsignedChars(DFA35_minS);
    static readonly char[] DFA35_max = DFA.UnpackEncodedStringToUnsignedChars(DFA35_maxS);
    static readonly short[] DFA35_accept = DFA.UnpackEncodedString(DFA35_acceptS);
    static readonly short[] DFA35_special = DFA.UnpackEncodedString(DFA35_specialS);
    static readonly short[][] DFA35_transition = DFA.UnpackEncodedStringArray(DFA35_transitionS);

    protected class DFA35 : DFA
    {
        public DFA35(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 801:67: ( LineTerminator )*"; }
        }

    }

    const string DFA39_eotS =
        "\u00bb\uffff";
    const string DFA39_eofS =
        "\x01\uffff\x03\x0c\u00b7\uffff";
    const string DFA39_minS =
        "\x01\x0c\x08\x05\x03\x00\x19\uffff\x01\x00\x12\uffff\x04\x00\x2b"+
        "\uffff\x04\x00\x2b\uffff\x24\x00\x01\uffff";
    const string DFA39_maxS =
        "\x05\x6b\x01\x15\x01\x6b\x01\x24\x01\x6b\x03\x00\x19\uffff\x01"+
        "\x00\x12\uffff\x04\x00\x2b\uffff\x04\x00\x2b\uffff\x24\x00\x01\uffff";
    const string DFA39_acceptS =
        "\x0c\uffff\x01\x02\u00ad\uffff\x01\x01";
    const string DFA39_specialS =
        "\x09\uffff\x01\x00\x01\x01\x01\x02\x19\uffff\x01\x03\x12\uffff"+
        "\x01\x04\x01\x05\x01\x06\x01\x07\x2b\uffff\x01\x08\x01\x09\x01\x0a"+
        "\x01\x0b\x2b\uffff\x01\x0c\x01\x0d\x01\x0e\x01\x0f\x01\x10\x01\x11"+
        "\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16\x01\x17\x01\x18\x01\x19"+
        "\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01\x20\x01\x21"+
        "\x01\x22\x01\x23\x01\x24\x01\x25\x01\x26\x01\x27\x01\x28\x01\x29"+
        "\x01\x2a\x01\x2b\x01\x2c\x01\x2d\x01\x2e\x01\x2f\x01\uffff}>";
    static readonly string[] DFA39_transitionS = {
            "\x01\x02\x05\uffff\x04\x03\x0d\uffff\x01\x01\x01\x06\x01\uffff"+
            "\x01\x04\x02\uffff\x01\x05\x02\uffff\x01\x08\x3e\uffff\x01\x07",
            "\x01\x09\x06\uffff\x01\x0c\x05\uffff\x04\x0c\x0d\uffff\x01"+
            "\x0c\x01\x25\x01\x0c\x01\x0a\x06\x0c\x01\x0b\x3b\x0c\x02\uffff"+
            "\x01\x0c",
            "\x01\x38\x06\uffff\x01\x0c\x05\uffff\x04\x0c\x0d\uffff\x01"+
            "\x0c\x01\x3b\x01\x0c\x01\x39\x06\x0c\x01\x3a\x3b\x0c\x02\uffff"+
            "\x01\x0c",
            "\x01\x67\x06\uffff\x01\x0c\x05\uffff\x04\x0c\x0d\uffff\x01"+
            "\x0c\x01\x6a\x01\x0c\x01\x68\x06\x0c\x01\x69\x3b\x0c\x02\uffff"+
            "\x01\x0c",
            "\x01\u0096\x06\uffff\x01\u0098\x05\uffff\x04\u0099\x0d\uffff"+
            "\x01\u0097\x01\u009c\x01\uffff\x01\u009a\x01\u00a0\x01\u00a1"+
            "\x01\u009b\x02\uffff\x01\u009e\x01\uffff\x09\u009f\x34\uffff"+
            "\x01\u009d",
            "\x01\u00a2\x06\uffff\x01\u00a3\x07\uffff\x02\u00a3",
            "\x01\u00a4\x06\uffff\x01\u00a6\x05\uffff\x04\u00a7\x0d\uffff"+
            "\x01\u00a5\x01\u00aa\x01\uffff\x01\u00a8\x02\uffff\x01\u00a9"+
            "\x02\uffff\x01\u00ac\x01\uffff\x09\u00ad\x34\uffff\x01\u00ab",
            "\x01\u00ae\x06\uffff\x01\u00af\x17\uffff\x01\u00b0",
            "\x01\u00b1\x06\uffff\x01\u00b3\x05\uffff\x04\u00b4\x0d\uffff"+
            "\x01\u00b2\x01\u00b7\x01\uffff\x01\u00b5\x02\uffff\x01\u00b6"+
            "\x02\uffff\x01\u00b9\x3e\uffff\x01\u00b8",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            ""
    };

    static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
    static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
    static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
    static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
    static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
    static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
    static readonly short[][] DFA39_transition = DFA.UnpackEncodedStringArray(DFA39_transitionS);

    protected class DFA39 : DFA
    {
        public DFA39(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;

        }

        override public string Description
        {
            get { return "804:1: leftHandSideExpression : ( callExpression | newExpression );"; }
        }

    }


    protected internal int DFA39_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA39_9 = input.LA(1);

                   	 
                   	int index39_9 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_9);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA39_10 = input.LA(1);

                   	 
                   	int index39_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_10);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA39_11 = input.LA(1);

                   	 
                   	int index39_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_11);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA39_37 = input.LA(1);

                   	 
                   	int index39_37 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_37);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA39_56 = input.LA(1);

                   	 
                   	int index39_56 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_56);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA39_57 = input.LA(1);

                   	 
                   	int index39_57 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_57);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA39_58 = input.LA(1);

                   	 
                   	int index39_58 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_58);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA39_59 = input.LA(1);

                   	 
                   	int index39_59 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_59);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA39_103 = input.LA(1);

                   	 
                   	int index39_103 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_103);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA39_104 = input.LA(1);

                   	 
                   	int index39_104 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_104);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA39_105 = input.LA(1);

                   	 
                   	int index39_105 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_105);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA39_106 = input.LA(1);

                   	 
                   	int index39_106 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_106);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA39_150 = input.LA(1);

                   	 
                   	int index39_150 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_150);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA39_151 = input.LA(1);

                   	 
                   	int index39_151 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_151);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA39_152 = input.LA(1);

                   	 
                   	int index39_152 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_152);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 15 : 
                   	int LA39_153 = input.LA(1);

                   	 
                   	int index39_153 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_153);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 16 : 
                   	int LA39_154 = input.LA(1);

                   	 
                   	int index39_154 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_154);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 17 : 
                   	int LA39_155 = input.LA(1);

                   	 
                   	int index39_155 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_155);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 18 : 
                   	int LA39_156 = input.LA(1);

                   	 
                   	int index39_156 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_156);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 19 : 
                   	int LA39_157 = input.LA(1);

                   	 
                   	int index39_157 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_157);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 20 : 
                   	int LA39_158 = input.LA(1);

                   	 
                   	int index39_158 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_158);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 21 : 
                   	int LA39_159 = input.LA(1);

                   	 
                   	int index39_159 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_159);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 22 : 
                   	int LA39_160 = input.LA(1);

                   	 
                   	int index39_160 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_160);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 23 : 
                   	int LA39_161 = input.LA(1);

                   	 
                   	int index39_161 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_161);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 24 : 
                   	int LA39_162 = input.LA(1);

                   	 
                   	int index39_162 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_162);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 25 : 
                   	int LA39_163 = input.LA(1);

                   	 
                   	int index39_163 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_163);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 26 : 
                   	int LA39_164 = input.LA(1);

                   	 
                   	int index39_164 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_164);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 27 : 
                   	int LA39_165 = input.LA(1);

                   	 
                   	int index39_165 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_165);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 28 : 
                   	int LA39_166 = input.LA(1);

                   	 
                   	int index39_166 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_166);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 29 : 
                   	int LA39_167 = input.LA(1);

                   	 
                   	int index39_167 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_167);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 30 : 
                   	int LA39_168 = input.LA(1);

                   	 
                   	int index39_168 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_168);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 31 : 
                   	int LA39_169 = input.LA(1);

                   	 
                   	int index39_169 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_169);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 32 : 
                   	int LA39_170 = input.LA(1);

                   	 
                   	int index39_170 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_170);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 33 : 
                   	int LA39_171 = input.LA(1);

                   	 
                   	int index39_171 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_171);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 34 : 
                   	int LA39_172 = input.LA(1);

                   	 
                   	int index39_172 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_172);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 35 : 
                   	int LA39_173 = input.LA(1);

                   	 
                   	int index39_173 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_173);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 36 : 
                   	int LA39_174 = input.LA(1);

                   	 
                   	int index39_174 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_174);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 37 : 
                   	int LA39_175 = input.LA(1);

                   	 
                   	int index39_175 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_175);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 38 : 
                   	int LA39_176 = input.LA(1);

                   	 
                   	int index39_176 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_176);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 39 : 
                   	int LA39_177 = input.LA(1);

                   	 
                   	int index39_177 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_177);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 40 : 
                   	int LA39_178 = input.LA(1);

                   	 
                   	int index39_178 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_178);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 41 : 
                   	int LA39_179 = input.LA(1);

                   	 
                   	int index39_179 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_179);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 42 : 
                   	int LA39_180 = input.LA(1);

                   	 
                   	int index39_180 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_180);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 43 : 
                   	int LA39_181 = input.LA(1);

                   	 
                   	int index39_181 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_181);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 44 : 
                   	int LA39_182 = input.LA(1);

                   	 
                   	int index39_182 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_182);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 45 : 
                   	int LA39_183 = input.LA(1);

                   	 
                   	int index39_183 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_183);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 46 : 
                   	int LA39_184 = input.LA(1);

                   	 
                   	int index39_184 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_184);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 47 : 
                   	int LA39_185 = input.LA(1);

                   	 
                   	int index39_185 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred50_AS3()) ) { s = 186; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index39_185);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 39, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA40_eotS =
        "\x5a\uffff";
    const string DFA40_eofS =
        "\x01\x02\x01\x2e\x58\uffff";
    const string DFA40_minS =
        "\x02\x05\x58\uffff";
    const string DFA40_maxS =
        "\x02\x6b\x58\uffff";
    const string DFA40_acceptS =
        "\x02\uffff\x01\x02\x2b\uffff\x01\x01\x01\uffff\x01\x01\x11\uffff"+
        "\x01\x01\x01\uffff\x08\x01\x0e\uffff";
    const string DFA40_specialS =
        "\x5a\uffff}>";
    static readonly string[] DFA40_transitionS = {
            "\x01\x02\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x02\x01\x1d\x02\x0c\uffff\x10\x02\x02\uffff\x01"+
            "\x02",
            "\x01\x2e\x06\uffff\x01\x45\x05\uffff\x04\x46\x0d\uffff\x01"+
            "\x44\x01\x48\x01\x2e\x01\x47\x02\x2e\x01\x42\x02\x2e\x01\x4a"+
            "\x01\uffff\x05\x4b\x02\x30\x02\x4b\x16\x2e\x0c\uffff\x02\x2e"+
            "\x0e\x46\x02\uffff\x01\x49",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA40_eot = DFA.UnpackEncodedString(DFA40_eotS);
    static readonly short[] DFA40_eof = DFA.UnpackEncodedString(DFA40_eofS);
    static readonly char[] DFA40_min = DFA.UnpackEncodedStringToUnsignedChars(DFA40_minS);
    static readonly char[] DFA40_max = DFA.UnpackEncodedStringToUnsignedChars(DFA40_maxS);
    static readonly short[] DFA40_accept = DFA.UnpackEncodedString(DFA40_acceptS);
    static readonly short[] DFA40_special = DFA.UnpackEncodedString(DFA40_specialS);
    static readonly short[][] DFA40_transition = DFA.UnpackEncodedStringArray(DFA40_transitionS);

    protected class DFA40 : DFA
    {
        public DFA40(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;

        }

        override public string Description
        {
            get { return "810:27: ( '++' | '--' )?"; }
        }

    }

    const string DFA41_eotS =
        "\x0a\uffff";
    const string DFA41_eofS =
        "\x0a\uffff";
    const string DFA41_minS =
        "\x01\x0c\x09\uffff";
    const string DFA41_maxS =
        "\x01\x6b\x09\uffff";
    const string DFA41_acceptS =
        "\x01\uffff\x01\x01\x07\uffff\x01\x02";
    const string DFA41_specialS =
        "\x0a\uffff}>";
    static readonly string[] DFA41_transitionS = {
            "\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02\x01\x01\uffff\x01"+
            "\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01\uffff\x09\x09\x34"+
            "\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA41_eot = DFA.UnpackEncodedString(DFA41_eotS);
    static readonly short[] DFA41_eof = DFA.UnpackEncodedString(DFA41_eofS);
    static readonly char[] DFA41_min = DFA.UnpackEncodedStringToUnsignedChars(DFA41_minS);
    static readonly char[] DFA41_max = DFA.UnpackEncodedStringToUnsignedChars(DFA41_maxS);
    static readonly short[] DFA41_accept = DFA.UnpackEncodedString(DFA41_acceptS);
    static readonly short[] DFA41_special = DFA.UnpackEncodedString(DFA41_specialS);
    static readonly short[][] DFA41_transition = DFA.UnpackEncodedStringArray(DFA41_transitionS);

    protected class DFA41 : DFA
    {
        public DFA41(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;

        }

        override public string Description
        {
            get { return "813:1: unaryExpression : ( postfixExpression | ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression );"; }
        }

    }

    const string DFA44_eotS =
        "\x59\uffff";
    const string DFA44_eofS =
        "\x02\x02\x57\uffff";
    const string DFA44_minS =
        "\x02\x05\x41\uffff\x01\x00\x15\uffff";
    const string DFA44_maxS =
        "\x02\x6b\x41\uffff\x01\x00\x15\uffff";
    const string DFA44_acceptS =
        "\x02\uffff\x01\x02\x29\uffff\x01\x01\x2c\uffff";
    const string DFA44_specialS =
        "\x43\uffff\x01\x00\x15\uffff}>";
    static readonly string[] DFA44_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x03\x2c\x13\x02\x0c\uffff\x10\x02\x02"+
            "\uffff\x01\x02",
            "\x01\x43\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x03\x2c\x13\x02\x0c\uffff\x10\x02\x02"+
            "\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
    static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
    static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
    static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
    static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
    static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
    static readonly short[][] DFA44_transition = DFA.UnpackEncodedStringArray(DFA44_transitionS);

    protected class DFA44 : DFA
    {
        public DFA44(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 819:20: ( ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression )*"; }
        }

    }


    protected internal int DFA44_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA44_67 = input.LA(1);

                   	 
                   	int index44_67 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred66_AS3()) ) { s = 44; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index44_67);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 44, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA43_eotS =
        "\x0b\uffff";
    const string DFA43_eofS =
        "\x0b\uffff";
    const string DFA43_minS =
        "\x01\x05\x0a\uffff";
    const string DFA43_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA43_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA43_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA43_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA43_eot = DFA.UnpackEncodedString(DFA43_eotS);
    static readonly short[] DFA43_eof = DFA.UnpackEncodedString(DFA43_eofS);
    static readonly char[] DFA43_min = DFA.UnpackEncodedStringToUnsignedChars(DFA43_minS);
    static readonly char[] DFA43_max = DFA.UnpackEncodedStringToUnsignedChars(DFA43_maxS);
    static readonly short[] DFA43_accept = DFA.UnpackEncodedString(DFA43_acceptS);
    static readonly short[] DFA43_special = DFA.UnpackEncodedString(DFA43_specialS);
    static readonly short[][] DFA43_transition = DFA.UnpackEncodedStringArray(DFA43_transitionS);

    protected class DFA43 : DFA
    {
        public DFA43(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 819:55: ( LineTerminator )*"; }
        }

    }

    const string DFA47_eotS =
        "\x61\uffff";
    const string DFA47_eofS =
        "\x02\x02\x5f\uffff";
    const string DFA47_minS =
        "\x02\x05\x1a\uffff\x01\x05\x19\uffff\x01\x00\x0b\uffff\x01\x00"+
        "\x15\uffff\x09\x00";
    const string DFA47_maxS =
        "\x02\x6b\x1a\uffff\x01\x6b\x19\uffff\x01\x00\x0b\uffff\x01\x00"+
        "\x15\uffff\x09\x00";
    const string DFA47_acceptS =
        "\x02\uffff\x01\x02\x54\uffff\x01\x01\x09\uffff";
    const string DFA47_specialS =
        "\x36\uffff\x01\x00\x0b\uffff\x01\x01\x15\uffff\x01\x02\x01\x03"+
        "\x01\x04\x01\x05\x01\x06\x01\x07\x01\x08\x01\x09\x01\x0a}>";
    static readonly string[] DFA47_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x05\x02\x02\x1c\x02\x02\x03\uffff\x13\x02\x0c"+
            "\uffff\x10\x02\x02\uffff\x01\x02",
            "\x01\x42\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x05\x02\x02\x36\x02\x02\x03\uffff\x13\x02\x0c"+
            "\uffff\x10\x02\x02\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\x57\x06\uffff\x01\x59\x05\uffff\x04\x5a\x0d\uffff\x01"+
            "\x58\x01\x5d\x01\uffff\x01\x5b\x02\uffff\x01\x5c\x02\uffff\x01"+
            "\x5f\x01\uffff\x09\x60\x34\uffff\x01\x5e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff"
    };

    static readonly short[] DFA47_eot = DFA.UnpackEncodedString(DFA47_eotS);
    static readonly short[] DFA47_eof = DFA.UnpackEncodedString(DFA47_eofS);
    static readonly char[] DFA47_min = DFA.UnpackEncodedStringToUnsignedChars(DFA47_minS);
    static readonly char[] DFA47_max = DFA.UnpackEncodedStringToUnsignedChars(DFA47_maxS);
    static readonly short[] DFA47_accept = DFA.UnpackEncodedString(DFA47_acceptS);
    static readonly short[] DFA47_special = DFA.UnpackEncodedString(DFA47_specialS);
    static readonly short[][] DFA47_transition = DFA.UnpackEncodedStringArray(DFA47_transitionS);

    protected class DFA47 : DFA
    {
        public DFA47(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 823:29: ( ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression )*"; }
        }

    }


    protected internal int DFA47_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA47_54 = input.LA(1);

                   	 
                   	int index47_54 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred70_AS3()) ) { s = 87; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index47_54);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA47_66 = input.LA(1);

                   	 
                   	int index47_66 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred70_AS3()) ) { s = 87; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index47_66);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA47_88 = input.LA(1);

                   	 
                   	int index47_88 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred70_AS3()) ) { s = 87; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index47_88);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA47_89 = input.LA(1);

                   	 
                   	int index47_89 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred70_AS3()) ) { s = 87; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index47_89);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA47_90 = input.LA(1);

                   	 
                   	int index47_90 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred70_AS3()) ) { s = 87; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index47_90);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA47_91 = input.LA(1);

                   	 
                   	int index47_91 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred70_AS3()) ) { s = 87; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index47_91);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA47_92 = input.LA(1);

                   	 
                   	int index47_92 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred70_AS3()) ) { s = 87; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index47_92);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA47_93 = input.LA(1);

                   	 
                   	int index47_93 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred70_AS3()) ) { s = 87; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index47_93);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA47_94 = input.LA(1);

                   	 
                   	int index47_94 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred70_AS3()) ) { s = 87; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index47_94);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA47_95 = input.LA(1);

                   	 
                   	int index47_95 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred70_AS3()) ) { s = 87; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index47_95);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA47_96 = input.LA(1);

                   	 
                   	int index47_96 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred70_AS3()) ) { s = 87; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index47_96);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 47, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA46_eotS =
        "\x0b\uffff";
    const string DFA46_eofS =
        "\x0b\uffff";
    const string DFA46_minS =
        "\x01\x05\x0a\uffff";
    const string DFA46_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA46_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA46_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA46_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA46_eot = DFA.UnpackEncodedString(DFA46_eotS);
    static readonly short[] DFA46_eof = DFA.UnpackEncodedString(DFA46_eofS);
    static readonly char[] DFA46_min = DFA.UnpackEncodedStringToUnsignedChars(DFA46_minS);
    static readonly char[] DFA46_max = DFA.UnpackEncodedStringToUnsignedChars(DFA46_maxS);
    static readonly short[] DFA46_accept = DFA.UnpackEncodedString(DFA46_acceptS);
    static readonly short[] DFA46_special = DFA.UnpackEncodedString(DFA46_specialS);
    static readonly short[][] DFA46_transition = DFA.UnpackEncodedStringArray(DFA46_transitionS);

    protected class DFA46 : DFA
    {
        public DFA46(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 823:58: ( LineTerminator )*"; }
        }

    }

    const string DFA50_eotS =
        "\x55\uffff";
    const string DFA50_eofS =
        "\x02\x02\x53\uffff";
    const string DFA50_minS =
        "\x02\x05\x3f\uffff\x01\x00\x13\uffff";
    const string DFA50_maxS =
        "\x02\x6b\x3f\uffff\x01\x00\x13\uffff";
    const string DFA50_acceptS =
        "\x02\uffff\x01\x02\x27\uffff\x01\x01\x2a\uffff";
    const string DFA50_specialS =
        "\x41\uffff\x01\x00\x13\uffff}>";
    static readonly string[] DFA50_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x03\uffff\x03\x2a\x10\x02\x0c\uffff\x10"+
            "\x02\x02\uffff\x01\x02",
            "\x01\x41\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x03\uffff\x03\x2a\x10\x02\x0c\uffff\x10"+
            "\x02\x02\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA50_eot = DFA.UnpackEncodedString(DFA50_eotS);
    static readonly short[] DFA50_eof = DFA.UnpackEncodedString(DFA50_eofS);
    static readonly char[] DFA50_min = DFA.UnpackEncodedStringToUnsignedChars(DFA50_minS);
    static readonly char[] DFA50_max = DFA.UnpackEncodedStringToUnsignedChars(DFA50_maxS);
    static readonly short[] DFA50_accept = DFA.UnpackEncodedString(DFA50_acceptS);
    static readonly short[] DFA50_special = DFA.UnpackEncodedString(DFA50_specialS);
    static readonly short[][] DFA50_transition = DFA.UnpackEncodedStringArray(DFA50_transitionS);

    protected class DFA50 : DFA
    {
        public DFA50(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 827:23: ( ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression )*"; }
        }

    }


    protected internal int DFA50_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA50_65 = input.LA(1);

                   	 
                   	int index50_65 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred75_AS3()) ) { s = 42; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index50_65);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 50, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA49_eotS =
        "\x0b\uffff";
    const string DFA49_eofS =
        "\x0b\uffff";
    const string DFA49_minS =
        "\x01\x05\x0a\uffff";
    const string DFA49_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA49_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA49_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA49_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA49_eot = DFA.UnpackEncodedString(DFA49_eotS);
    static readonly short[] DFA49_eof = DFA.UnpackEncodedString(DFA49_eofS);
    static readonly char[] DFA49_min = DFA.UnpackEncodedStringToUnsignedChars(DFA49_minS);
    static readonly char[] DFA49_max = DFA.UnpackEncodedStringToUnsignedChars(DFA49_maxS);
    static readonly short[] DFA49_accept = DFA.UnpackEncodedString(DFA49_acceptS);
    static readonly short[] DFA49_special = DFA.UnpackEncodedString(DFA49_specialS);
    static readonly short[][] DFA49_transition = DFA.UnpackEncodedStringArray(DFA49_transitionS);

    protected class DFA49 : DFA
    {
        public DFA49(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 827:62: ( LineTerminator )*"; }
        }

    }

    const string DFA53_eotS =
        "\x5d\uffff";
    const string DFA53_eofS =
        "\x02\x02\x5b\uffff";
    const string DFA53_minS =
        "\x02\x05\x0e\uffff\x01\x05\x2f\uffff\x01\x00\x03\uffff\x01\x00"+
        "\x0e\uffff\x0a\x00";
    const string DFA53_maxS =
        "\x02\x6b\x0e\uffff\x01\x6b\x2f\uffff\x01\x00\x03\uffff\x01\x00"+
        "\x0e\uffff\x0a\x00";
    const string DFA53_acceptS =
        "\x02\uffff\x01\x02\x26\uffff\x01\x01\x33\uffff";
    const string DFA53_specialS =
        "\x40\uffff\x01\x00\x03\uffff\x01\x01\x0e\uffff\x01\x02\x01\x03"+
        "\x01\x04\x01\x05\x01\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b}>";
    static readonly string[] DFA53_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x06\uffff\x05\x29\x01\x10\x0a\x02\x0c"+
            "\uffff\x10\x02\x02\uffff\x01\x02",
            "\x01\x40\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x06\uffff\x05\x29\x01\x44\x0a\x02\x0c"+
            "\uffff\x10\x02\x02\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\x53\x06\uffff\x01\x55\x05\uffff\x04\x56\x0d\uffff\x01"+
            "\x54\x01\x59\x01\uffff\x01\x57\x02\uffff\x01\x58\x02\uffff\x01"+
            "\x5b\x01\uffff\x09\x5c\x34\uffff\x01\x5a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff"
    };

    static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
    static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
    static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
    static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
    static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
    static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
    static readonly short[][] DFA53_transition = DFA.UnpackEncodedStringArray(DFA53_transitionS);

    protected class DFA53 : DFA
    {
        public DFA53(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 831:20: ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LineTerminator )* shiftExpression )*"; }
        }

    }


    protected internal int DFA53_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA53_64 = input.LA(1);

                   	 
                   	int index53_64 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_64);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA53_68 = input.LA(1);

                   	 
                   	int index53_68 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_68);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA53_83 = input.LA(1);

                   	 
                   	int index53_83 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_83);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA53_84 = input.LA(1);

                   	 
                   	int index53_84 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_84);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA53_85 = input.LA(1);

                   	 
                   	int index53_85 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_85);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA53_86 = input.LA(1);

                   	 
                   	int index53_86 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_86);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA53_87 = input.LA(1);

                   	 
                   	int index53_87 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_87);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA53_88 = input.LA(1);

                   	 
                   	int index53_88 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_88);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA53_89 = input.LA(1);

                   	 
                   	int index53_89 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_89);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA53_90 = input.LA(1);

                   	 
                   	int index53_90 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_90);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA53_91 = input.LA(1);

                   	 
                   	int index53_91 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_91);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA53_92 = input.LA(1);

                   	 
                   	int index53_92 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred83_AS3()) ) { s = 41; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index53_92);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 53, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA52_eotS =
        "\x0b\uffff";
    const string DFA52_eofS =
        "\x0b\uffff";
    const string DFA52_minS =
        "\x01\x05\x0a\uffff";
    const string DFA52_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA52_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA52_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA52_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA52_eot = DFA.UnpackEncodedString(DFA52_eotS);
    static readonly short[] DFA52_eof = DFA.UnpackEncodedString(DFA52_eofS);
    static readonly char[] DFA52_min = DFA.UnpackEncodedStringToUnsignedChars(DFA52_minS);
    static readonly char[] DFA52_max = DFA.UnpackEncodedStringToUnsignedChars(DFA52_maxS);
    static readonly short[] DFA52_accept = DFA.UnpackEncodedString(DFA52_acceptS);
    static readonly short[] DFA52_special = DFA.UnpackEncodedString(DFA52_specialS);
    static readonly short[][] DFA52_transition = DFA.UnpackEncodedStringArray(DFA52_transitionS);

    protected class DFA52 : DFA
    {
        public DFA52(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 831:85: ( LineTerminator )*"; }
        }

    }

    const string DFA56_eotS =
        "\x1a\uffff";
    const string DFA56_eofS =
        "\x01\x02\x19\uffff";
    const string DFA56_minS =
        "\x02\x05\x0d\uffff\x01\x00\x0a\uffff";
    const string DFA56_maxS =
        "\x02\x5a\x0d\uffff\x01\x00\x0a\uffff";
    const string DFA56_acceptS =
        "\x02\uffff\x01\x02\x0a\uffff\x01\x01\x0c\uffff";
    const string DFA56_specialS =
        "\x0f\uffff\x01\x00\x0a\uffff}>";
    static readonly string[] DFA56_transitionS = {
            "\x01\x01\x21\uffff\x01\x02\x15\uffff\x05\x0d\x0b\x02\x0d\uffff"+
            "\x01\x02",
            "\x01\x0f\x21\uffff\x01\x02\x15\uffff\x05\x0d\x0b\x02\x0d\uffff"+
            "\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA56_eot = DFA.UnpackEncodedString(DFA56_eotS);
    static readonly short[] DFA56_eof = DFA.UnpackEncodedString(DFA56_eofS);
    static readonly char[] DFA56_min = DFA.UnpackEncodedStringToUnsignedChars(DFA56_minS);
    static readonly char[] DFA56_max = DFA.UnpackEncodedStringToUnsignedChars(DFA56_maxS);
    static readonly short[] DFA56_accept = DFA.UnpackEncodedString(DFA56_acceptS);
    static readonly short[] DFA56_special = DFA.UnpackEncodedString(DFA56_specialS);
    static readonly short[][] DFA56_transition = DFA.UnpackEncodedStringArray(DFA56_transitionS);

    protected class DFA56 : DFA
    {
        public DFA56(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 835:20: ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LineTerminator )* shiftExpression )*"; }
        }

    }


    protected internal int DFA56_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA56_15 = input.LA(1);

                   	 
                   	int index56_15 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred90_AS3()) ) { s = 13; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index56_15);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 56, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA55_eotS =
        "\x0b\uffff";
    const string DFA55_eofS =
        "\x0b\uffff";
    const string DFA55_minS =
        "\x01\x05\x0a\uffff";
    const string DFA55_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA55_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA55_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA55_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA55_eot = DFA.UnpackEncodedString(DFA55_eotS);
    static readonly short[] DFA55_eof = DFA.UnpackEncodedString(DFA55_eofS);
    static readonly char[] DFA55_min = DFA.UnpackEncodedStringToUnsignedChars(DFA55_minS);
    static readonly char[] DFA55_max = DFA.UnpackEncodedStringToUnsignedChars(DFA55_maxS);
    static readonly short[] DFA55_accept = DFA.UnpackEncodedString(DFA55_acceptS);
    static readonly short[] DFA55_special = DFA.UnpackEncodedString(DFA55_specialS);
    static readonly short[][] DFA55_transition = DFA.UnpackEncodedStringArray(DFA55_transitionS);

    protected class DFA55 : DFA
    {
        public DFA55(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 835:79: ( LineTerminator )*"; }
        }

    }

    const string DFA59_eotS =
        "\x51\uffff";
    const string DFA59_eofS =
        "\x02\x02\x4f\uffff";
    const string DFA59_minS =
        "\x02\x05\x3d\uffff\x01\x00\x11\uffff";
    const string DFA59_maxS =
        "\x02\x6b\x3d\uffff\x01\x00\x11\uffff";
    const string DFA59_acceptS =
        "\x02\uffff\x01\x02\x25\uffff\x01\x01\x28\uffff";
    const string DFA59_specialS =
        "\x3f\uffff\x01\x00\x11\uffff}>";
    static readonly string[] DFA59_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x04\x28\x06\x02\x0c"+
            "\uffff\x10\x02\x02\uffff\x01\x02",
            "\x01\x3f\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x04\x28\x06\x02\x0c"+
            "\uffff\x10\x02\x02\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA59_eot = DFA.UnpackEncodedString(DFA59_eotS);
    static readonly short[] DFA59_eof = DFA.UnpackEncodedString(DFA59_eofS);
    static readonly char[] DFA59_min = DFA.UnpackEncodedStringToUnsignedChars(DFA59_minS);
    static readonly char[] DFA59_max = DFA.UnpackEncodedStringToUnsignedChars(DFA59_maxS);
    static readonly short[] DFA59_accept = DFA.UnpackEncodedString(DFA59_acceptS);
    static readonly short[] DFA59_special = DFA.UnpackEncodedString(DFA59_specialS);
    static readonly short[][] DFA59_transition = DFA.UnpackEncodedStringArray(DFA59_transitionS);

    protected class DFA59 : DFA
    {
        public DFA59(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 839:25: ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression )*"; }
        }

    }


    protected internal int DFA59_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA59_63 = input.LA(1);

                   	 
                   	int index59_63 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred96_AS3()) ) { s = 40; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index59_63);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 59, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA58_eotS =
        "\x0b\uffff";
    const string DFA58_eofS =
        "\x0b\uffff";
    const string DFA58_minS =
        "\x01\x05\x0a\uffff";
    const string DFA58_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA58_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA58_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA58_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA58_eot = DFA.UnpackEncodedString(DFA58_eotS);
    static readonly short[] DFA58_eof = DFA.UnpackEncodedString(DFA58_eofS);
    static readonly char[] DFA58_min = DFA.UnpackEncodedStringToUnsignedChars(DFA58_minS);
    static readonly char[] DFA58_max = DFA.UnpackEncodedStringToUnsignedChars(DFA58_maxS);
    static readonly short[] DFA58_accept = DFA.UnpackEncodedString(DFA58_acceptS);
    static readonly short[] DFA58_special = DFA.UnpackEncodedString(DFA58_specialS);
    static readonly short[][] DFA58_transition = DFA.UnpackEncodedStringArray(DFA58_transitionS);

    protected class DFA58 : DFA
    {
        public DFA58(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 839:72: ( LineTerminator )*"; }
        }

    }

    const string DFA62_eotS =
        "\x18\uffff";
    const string DFA62_eofS =
        "\x01\x02\x17\uffff";
    const string DFA62_minS =
        "\x02\x05\x0c\uffff\x01\x00\x09\uffff";
    const string DFA62_maxS =
        "\x02\x5a\x0c\uffff\x01\x00\x09\uffff";
    const string DFA62_acceptS =
        "\x02\uffff\x01\x02\x09\uffff\x01\x01\x0b\uffff";
    const string DFA62_specialS =
        "\x0e\uffff\x01\x00\x09\uffff}>";
    static readonly string[] DFA62_transitionS = {
            "\x01\x01\x21\uffff\x01\x02\x1a\uffff\x01\x02\x04\x0c\x06\x02"+
            "\x0d\uffff\x01\x02",
            "\x01\x0e\x21\uffff\x01\x02\x1a\uffff\x01\x02\x04\x0c\x06\x02"+
            "\x0d\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA62_eot = DFA.UnpackEncodedString(DFA62_eotS);
    static readonly short[] DFA62_eof = DFA.UnpackEncodedString(DFA62_eofS);
    static readonly char[] DFA62_min = DFA.UnpackEncodedStringToUnsignedChars(DFA62_minS);
    static readonly char[] DFA62_max = DFA.UnpackEncodedStringToUnsignedChars(DFA62_maxS);
    static readonly short[] DFA62_accept = DFA.UnpackEncodedString(DFA62_acceptS);
    static readonly short[] DFA62_special = DFA.UnpackEncodedString(DFA62_specialS);
    static readonly short[][] DFA62_transition = DFA.UnpackEncodedStringArray(DFA62_transitionS);

    protected class DFA62 : DFA
    {
        public DFA62(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 843:29: ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn )*"; }
        }

    }


    protected internal int DFA62_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA62_14 = input.LA(1);

                   	 
                   	int index62_14 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred102_AS3()) ) { s = 12; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index62_14);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 62, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA61_eotS =
        "\x0b\uffff";
    const string DFA61_eofS =
        "\x0b\uffff";
    const string DFA61_minS =
        "\x01\x05\x0a\uffff";
    const string DFA61_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA61_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA61_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA61_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA61_eot = DFA.UnpackEncodedString(DFA61_eotS);
    static readonly short[] DFA61_eof = DFA.UnpackEncodedString(DFA61_eofS);
    static readonly char[] DFA61_min = DFA.UnpackEncodedStringToUnsignedChars(DFA61_minS);
    static readonly char[] DFA61_max = DFA.UnpackEncodedStringToUnsignedChars(DFA61_maxS);
    static readonly short[] DFA61_accept = DFA.UnpackEncodedString(DFA61_acceptS);
    static readonly short[] DFA61_special = DFA.UnpackEncodedString(DFA61_specialS);
    static readonly short[][] DFA61_transition = DFA.UnpackEncodedStringArray(DFA61_transitionS);

    protected class DFA61 : DFA
    {
        public DFA61(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 843:76: ( LineTerminator )*"; }
        }

    }

    const string DFA65_eotS =
        "\x4f\uffff";
    const string DFA65_eofS =
        "\x02\x02\x4d\uffff";
    const string DFA65_minS =
        "\x02\x05\x3c\uffff\x01\x00\x10\uffff";
    const string DFA65_maxS =
        "\x02\x6b\x3c\uffff\x01\x00\x10\uffff";
    const string DFA65_acceptS =
        "\x02\uffff\x01\x02\x24\uffff\x01\x01\x27\uffff";
    const string DFA65_specialS =
        "\x3e\uffff\x01\x00\x10\uffff}>";
    static readonly string[] DFA65_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x04\uffff\x01\x27\x05"+
            "\x02\x0c\uffff\x10\x02\x02\uffff\x01\x02",
            "\x01\x3e\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x04\uffff\x01\x27\x05"+
            "\x02\x0c\uffff\x10\x02\x02\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA65_eot = DFA.UnpackEncodedString(DFA65_eotS);
    static readonly short[] DFA65_eof = DFA.UnpackEncodedString(DFA65_eofS);
    static readonly char[] DFA65_min = DFA.UnpackEncodedStringToUnsignedChars(DFA65_minS);
    static readonly char[] DFA65_max = DFA.UnpackEncodedStringToUnsignedChars(DFA65_maxS);
    static readonly short[] DFA65_accept = DFA.UnpackEncodedString(DFA65_acceptS);
    static readonly short[] DFA65_special = DFA.UnpackEncodedString(DFA65_specialS);
    static readonly short[][] DFA65_transition = DFA.UnpackEncodedStringArray(DFA65_transitionS);

    protected class DFA65 : DFA
    {
        public DFA65(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 847:23: ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpression )*"; }
        }

    }


    protected internal int DFA65_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA65_62 = input.LA(1);

                   	 
                   	int index65_62 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred105_AS3()) ) { s = 39; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index65_62);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 65, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA64_eotS =
        "\x0b\uffff";
    const string DFA64_eofS =
        "\x0b\uffff";
    const string DFA64_minS =
        "\x01\x05\x0a\uffff";
    const string DFA64_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA64_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA64_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA64_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA64_eot = DFA.UnpackEncodedString(DFA64_eotS);
    static readonly short[] DFA64_eof = DFA.UnpackEncodedString(DFA64_eofS);
    static readonly char[] DFA64_min = DFA.UnpackEncodedStringToUnsignedChars(DFA64_minS);
    static readonly char[] DFA64_max = DFA.UnpackEncodedStringToUnsignedChars(DFA64_maxS);
    static readonly short[] DFA64_accept = DFA.UnpackEncodedString(DFA64_acceptS);
    static readonly short[] DFA64_special = DFA.UnpackEncodedString(DFA64_specialS);
    static readonly short[][] DFA64_transition = DFA.UnpackEncodedStringArray(DFA64_transitionS);

    protected class DFA64 : DFA
    {
        public DFA64(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 847:44: ( LineTerminator )*"; }
        }

    }

    const string DFA68_eotS =
        "\x16\uffff";
    const string DFA68_eofS =
        "\x01\x02\x15\uffff";
    const string DFA68_minS =
        "\x02\x05\x0b\uffff\x01\x00\x08\uffff";
    const string DFA68_maxS =
        "\x02\x5a\x0b\uffff\x01\x00\x08\uffff";
    const string DFA68_acceptS =
        "\x02\uffff\x01\x02\x08\uffff\x01\x01\x0a\uffff";
    const string DFA68_specialS =
        "\x0d\uffff\x01\x00\x08\uffff}>";
    static readonly string[] DFA68_transitionS = {
            "\x01\x01\x21\uffff\x01\x02\x1a\uffff\x01\x02\x04\uffff\x01"+
            "\x0b\x05\x02\x0d\uffff\x01\x02",
            "\x01\x0d\x21\uffff\x01\x02\x1a\uffff\x01\x02\x04\uffff\x01"+
            "\x0b\x05\x02\x0d\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA68_eot = DFA.UnpackEncodedString(DFA68_eotS);
    static readonly short[] DFA68_eof = DFA.UnpackEncodedString(DFA68_eofS);
    static readonly char[] DFA68_min = DFA.UnpackEncodedStringToUnsignedChars(DFA68_minS);
    static readonly char[] DFA68_max = DFA.UnpackEncodedStringToUnsignedChars(DFA68_maxS);
    static readonly short[] DFA68_accept = DFA.UnpackEncodedString(DFA68_acceptS);
    static readonly short[] DFA68_special = DFA.UnpackEncodedString(DFA68_specialS);
    static readonly short[][] DFA68_transition = DFA.UnpackEncodedStringArray(DFA68_transitionS);

    protected class DFA68 : DFA
    {
        public DFA68(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 851:27: ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn )*"; }
        }

    }


    protected internal int DFA68_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA68_13 = input.LA(1);

                   	 
                   	int index68_13 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred108_AS3()) ) { s = 11; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index68_13);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 68, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA67_eotS =
        "\x0b\uffff";
    const string DFA67_eofS =
        "\x0b\uffff";
    const string DFA67_minS =
        "\x01\x05\x0a\uffff";
    const string DFA67_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA67_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA67_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA67_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA67_eot = DFA.UnpackEncodedString(DFA67_eotS);
    static readonly short[] DFA67_eof = DFA.UnpackEncodedString(DFA67_eofS);
    static readonly char[] DFA67_min = DFA.UnpackEncodedStringToUnsignedChars(DFA67_minS);
    static readonly char[] DFA67_max = DFA.UnpackEncodedStringToUnsignedChars(DFA67_maxS);
    static readonly short[] DFA67_accept = DFA.UnpackEncodedString(DFA67_acceptS);
    static readonly short[] DFA67_special = DFA.UnpackEncodedString(DFA67_specialS);
    static readonly short[][] DFA67_transition = DFA.UnpackEncodedStringArray(DFA67_transitionS);

    protected class DFA67 : DFA
    {
        public DFA67(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 851:48: ( LineTerminator )*"; }
        }

    }

    const string DFA71_eotS =
        "\x4d\uffff";
    const string DFA71_eofS =
        "\x02\x02\x4b\uffff";
    const string DFA71_minS =
        "\x02\x05\x3b\uffff\x01\x00\x0f\uffff";
    const string DFA71_maxS =
        "\x02\x6b\x3b\uffff\x01\x00\x0f\uffff";
    const string DFA71_acceptS =
        "\x02\uffff\x01\x02\x23\uffff\x01\x01\x26\uffff";
    const string DFA71_specialS =
        "\x3d\uffff\x01\x00\x0f\uffff}>";
    static readonly string[] DFA71_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x05\uffff\x01\x26\x04"+
            "\x02\x0c\uffff\x10\x02\x02\uffff\x01\x02",
            "\x01\x3d\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x05\uffff\x01\x26\x04"+
            "\x02\x0c\uffff\x10\x02\x02\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
    static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
    static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
    static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
    static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
    static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
    static readonly short[][] DFA71_transition = DFA.UnpackEncodedStringArray(DFA71_transitionS);

    protected class DFA71 : DFA
    {
        public DFA71(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 855:25: ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression )*"; }
        }

    }


    protected internal int DFA71_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA71_61 = input.LA(1);

                   	 
                   	int index71_61 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred111_AS3()) ) { s = 38; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index71_61);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 71, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA70_eotS =
        "\x0b\uffff";
    const string DFA70_eofS =
        "\x0b\uffff";
    const string DFA70_minS =
        "\x01\x05\x0a\uffff";
    const string DFA70_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA70_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA70_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA70_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA70_eot = DFA.UnpackEncodedString(DFA70_eotS);
    static readonly short[] DFA70_eof = DFA.UnpackEncodedString(DFA70_eofS);
    static readonly char[] DFA70_min = DFA.UnpackEncodedStringToUnsignedChars(DFA70_minS);
    static readonly char[] DFA70_max = DFA.UnpackEncodedStringToUnsignedChars(DFA70_maxS);
    static readonly short[] DFA70_accept = DFA.UnpackEncodedString(DFA70_acceptS);
    static readonly short[] DFA70_special = DFA.UnpackEncodedString(DFA70_specialS);
    static readonly short[][] DFA70_transition = DFA.UnpackEncodedStringArray(DFA70_transitionS);

    protected class DFA70 : DFA
    {
        public DFA70(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 855:46: ( LineTerminator )*"; }
        }

    }

    const string DFA74_eotS =
        "\x14\uffff";
    const string DFA74_eofS =
        "\x01\x02\x13\uffff";
    const string DFA74_minS =
        "\x02\x05\x0a\uffff\x01\x00\x07\uffff";
    const string DFA74_maxS =
        "\x02\x5a\x0a\uffff\x01\x00\x07\uffff";
    const string DFA74_acceptS =
        "\x02\uffff\x01\x02\x07\uffff\x01\x01\x09\uffff";
    const string DFA74_specialS =
        "\x0c\uffff\x01\x00\x07\uffff}>";
    static readonly string[] DFA74_transitionS = {
            "\x01\x01\x21\uffff\x01\x02\x1a\uffff\x01\x02\x05\uffff\x01"+
            "\x0a\x04\x02\x0d\uffff\x01\x02",
            "\x01\x0c\x21\uffff\x01\x02\x1a\uffff\x01\x02\x05\uffff\x01"+
            "\x0a\x04\x02\x0d\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA74_eot = DFA.UnpackEncodedString(DFA74_eotS);
    static readonly short[] DFA74_eof = DFA.UnpackEncodedString(DFA74_eofS);
    static readonly char[] DFA74_min = DFA.UnpackEncodedStringToUnsignedChars(DFA74_minS);
    static readonly char[] DFA74_max = DFA.UnpackEncodedStringToUnsignedChars(DFA74_maxS);
    static readonly short[] DFA74_accept = DFA.UnpackEncodedString(DFA74_acceptS);
    static readonly short[] DFA74_special = DFA.UnpackEncodedString(DFA74_specialS);
    static readonly short[][] DFA74_transition = DFA.UnpackEncodedStringArray(DFA74_transitionS);

    protected class DFA74 : DFA
    {
        public DFA74(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 859:29: ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn )*"; }
        }

    }


    protected internal int DFA74_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA74_12 = input.LA(1);

                   	 
                   	int index74_12 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred114_AS3()) ) { s = 10; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index74_12);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 74, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA73_eotS =
        "\x0b\uffff";
    const string DFA73_eofS =
        "\x0b\uffff";
    const string DFA73_minS =
        "\x01\x05\x0a\uffff";
    const string DFA73_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA73_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA73_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA73_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA73_eot = DFA.UnpackEncodedString(DFA73_eotS);
    static readonly short[] DFA73_eof = DFA.UnpackEncodedString(DFA73_eofS);
    static readonly char[] DFA73_min = DFA.UnpackEncodedStringToUnsignedChars(DFA73_minS);
    static readonly char[] DFA73_max = DFA.UnpackEncodedStringToUnsignedChars(DFA73_maxS);
    static readonly short[] DFA73_accept = DFA.UnpackEncodedString(DFA73_acceptS);
    static readonly short[] DFA73_special = DFA.UnpackEncodedString(DFA73_specialS);
    static readonly short[][] DFA73_transition = DFA.UnpackEncodedStringArray(DFA73_transitionS);

    protected class DFA73 : DFA
    {
        public DFA73(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 859:50: ( LineTerminator )*"; }
        }

    }

    const string DFA77_eotS =
        "\x4b\uffff";
    const string DFA77_eofS =
        "\x02\x02\x49\uffff";
    const string DFA77_minS =
        "\x02\x05\x3a\uffff\x01\x00\x0e\uffff";
    const string DFA77_maxS =
        "\x02\x6b\x3a\uffff\x01\x00\x0e\uffff";
    const string DFA77_acceptS =
        "\x02\uffff\x01\x02\x22\uffff\x01\x01\x25\uffff";
    const string DFA77_specialS =
        "\x3c\uffff\x01\x00\x0e\uffff}>";
    static readonly string[] DFA77_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x06\uffff\x01\x25\x03"+
            "\x02\x0c\uffff\x10\x02\x02\uffff\x01\x02",
            "\x01\x3c\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x06\uffff\x01\x25\x03"+
            "\x02\x0c\uffff\x10\x02\x02\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA77_eot = DFA.UnpackEncodedString(DFA77_eotS);
    static readonly short[] DFA77_eof = DFA.UnpackEncodedString(DFA77_eofS);
    static readonly char[] DFA77_min = DFA.UnpackEncodedStringToUnsignedChars(DFA77_minS);
    static readonly char[] DFA77_max = DFA.UnpackEncodedStringToUnsignedChars(DFA77_maxS);
    static readonly short[] DFA77_accept = DFA.UnpackEncodedString(DFA77_acceptS);
    static readonly short[] DFA77_special = DFA.UnpackEncodedString(DFA77_specialS);
    static readonly short[][] DFA77_transition = DFA.UnpackEncodedStringArray(DFA77_transitionS);

    protected class DFA77 : DFA
    {
        public DFA77(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 863:25: ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression )*"; }
        }

    }


    protected internal int DFA77_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA77_60 = input.LA(1);

                   	 
                   	int index77_60 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred117_AS3()) ) { s = 37; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index77_60);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 77, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA76_eotS =
        "\x0b\uffff";
    const string DFA76_eofS =
        "\x0b\uffff";
    const string DFA76_minS =
        "\x01\x05\x0a\uffff";
    const string DFA76_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA76_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA76_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA76_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA76_eot = DFA.UnpackEncodedString(DFA76_eotS);
    static readonly short[] DFA76_eof = DFA.UnpackEncodedString(DFA76_eofS);
    static readonly char[] DFA76_min = DFA.UnpackEncodedStringToUnsignedChars(DFA76_minS);
    static readonly char[] DFA76_max = DFA.UnpackEncodedStringToUnsignedChars(DFA76_maxS);
    static readonly short[] DFA76_accept = DFA.UnpackEncodedString(DFA76_acceptS);
    static readonly short[] DFA76_special = DFA.UnpackEncodedString(DFA76_specialS);
    static readonly short[][] DFA76_transition = DFA.UnpackEncodedStringArray(DFA76_transitionS);

    protected class DFA76 : DFA
    {
        public DFA76(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 863:46: ( LineTerminator )*"; }
        }

    }

    const string DFA80_eotS =
        "\x12\uffff";
    const string DFA80_eofS =
        "\x01\x02\x11\uffff";
    const string DFA80_minS =
        "\x02\x05\x09\uffff\x01\x00\x06\uffff";
    const string DFA80_maxS =
        "\x02\x5a\x09\uffff\x01\x00\x06\uffff";
    const string DFA80_acceptS =
        "\x02\uffff\x01\x02\x06\uffff\x01\x01\x08\uffff";
    const string DFA80_specialS =
        "\x0b\uffff\x01\x00\x06\uffff}>";
    static readonly string[] DFA80_transitionS = {
            "\x01\x01\x21\uffff\x01\x02\x1a\uffff\x01\x02\x06\uffff\x01"+
            "\x09\x03\x02\x0d\uffff\x01\x02",
            "\x01\x0b\x21\uffff\x01\x02\x1a\uffff\x01\x02\x06\uffff\x01"+
            "\x09\x03\x02\x0d\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA80_eot = DFA.UnpackEncodedString(DFA80_eotS);
    static readonly short[] DFA80_eof = DFA.UnpackEncodedString(DFA80_eofS);
    static readonly char[] DFA80_min = DFA.UnpackEncodedStringToUnsignedChars(DFA80_minS);
    static readonly char[] DFA80_max = DFA.UnpackEncodedStringToUnsignedChars(DFA80_maxS);
    static readonly short[] DFA80_accept = DFA.UnpackEncodedString(DFA80_acceptS);
    static readonly short[] DFA80_special = DFA.UnpackEncodedString(DFA80_specialS);
    static readonly short[][] DFA80_transition = DFA.UnpackEncodedStringArray(DFA80_transitionS);

    protected class DFA80 : DFA
    {
        public DFA80(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 867:29: ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn )*"; }
        }

    }


    protected internal int DFA80_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA80_11 = input.LA(1);

                   	 
                   	int index80_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred120_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index80_11);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 80, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA79_eotS =
        "\x0b\uffff";
    const string DFA79_eofS =
        "\x0b\uffff";
    const string DFA79_minS =
        "\x01\x05\x0a\uffff";
    const string DFA79_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA79_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA79_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA79_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA79_eot = DFA.UnpackEncodedString(DFA79_eotS);
    static readonly short[] DFA79_eof = DFA.UnpackEncodedString(DFA79_eofS);
    static readonly char[] DFA79_min = DFA.UnpackEncodedStringToUnsignedChars(DFA79_minS);
    static readonly char[] DFA79_max = DFA.UnpackEncodedStringToUnsignedChars(DFA79_maxS);
    static readonly short[] DFA79_accept = DFA.UnpackEncodedString(DFA79_acceptS);
    static readonly short[] DFA79_special = DFA.UnpackEncodedString(DFA79_specialS);
    static readonly short[][] DFA79_transition = DFA.UnpackEncodedStringArray(DFA79_transitionS);

    protected class DFA79 : DFA
    {
        public DFA79(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 867:50: ( LineTerminator )*"; }
        }

    }

    const string DFA83_eotS =
        "\x49\uffff";
    const string DFA83_eofS =
        "\x02\x02\x47\uffff";
    const string DFA83_minS =
        "\x02\x05\x39\uffff\x01\x00\x0d\uffff";
    const string DFA83_maxS =
        "\x02\x6b\x39\uffff\x01\x00\x0d\uffff";
    const string DFA83_acceptS =
        "\x02\uffff\x01\x02\x21\uffff\x01\x01\x24\uffff";
    const string DFA83_specialS =
        "\x3b\uffff\x01\x00\x0d\uffff}>";
    static readonly string[] DFA83_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x07\uffff\x01\x24\x02"+
            "\x02\x0c\uffff\x10\x02\x02\uffff\x01\x02",
            "\x01\x3b\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x07\uffff\x01\x24\x02"+
            "\x02\x0c\uffff\x10\x02\x02\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA83_eot = DFA.UnpackEncodedString(DFA83_eotS);
    static readonly short[] DFA83_eof = DFA.UnpackEncodedString(DFA83_eofS);
    static readonly char[] DFA83_min = DFA.UnpackEncodedStringToUnsignedChars(DFA83_minS);
    static readonly char[] DFA83_max = DFA.UnpackEncodedStringToUnsignedChars(DFA83_maxS);
    static readonly short[] DFA83_accept = DFA.UnpackEncodedString(DFA83_acceptS);
    static readonly short[] DFA83_special = DFA.UnpackEncodedString(DFA83_specialS);
    static readonly short[][] DFA83_transition = DFA.UnpackEncodedStringArray(DFA83_transitionS);

    protected class DFA83 : DFA
    {
        public DFA83(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 871:24: ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression )*"; }
        }

    }


    protected internal int DFA83_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA83_59 = input.LA(1);

                   	 
                   	int index83_59 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred123_AS3()) ) { s = 36; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index83_59);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 83, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA82_eotS =
        "\x0b\uffff";
    const string DFA82_eofS =
        "\x0b\uffff";
    const string DFA82_minS =
        "\x01\x05\x0a\uffff";
    const string DFA82_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA82_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA82_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA82_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA82_eot = DFA.UnpackEncodedString(DFA82_eotS);
    static readonly short[] DFA82_eof = DFA.UnpackEncodedString(DFA82_eofS);
    static readonly char[] DFA82_min = DFA.UnpackEncodedStringToUnsignedChars(DFA82_minS);
    static readonly char[] DFA82_max = DFA.UnpackEncodedStringToUnsignedChars(DFA82_maxS);
    static readonly short[] DFA82_accept = DFA.UnpackEncodedString(DFA82_acceptS);
    static readonly short[] DFA82_special = DFA.UnpackEncodedString(DFA82_specialS);
    static readonly short[][] DFA82_transition = DFA.UnpackEncodedStringArray(DFA82_transitionS);

    protected class DFA82 : DFA
    {
        public DFA82(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 871:46: ( LineTerminator )*"; }
        }

    }

    const string DFA86_eotS =
        "\x10\uffff";
    const string DFA86_eofS =
        "\x01\x02\x0f\uffff";
    const string DFA86_minS =
        "\x02\x05\x08\uffff\x01\x00\x05\uffff";
    const string DFA86_maxS =
        "\x02\x5a\x08\uffff\x01\x00\x05\uffff";
    const string DFA86_acceptS =
        "\x02\uffff\x01\x02\x05\uffff\x01\x01\x07\uffff";
    const string DFA86_specialS =
        "\x0a\uffff\x01\x00\x05\uffff}>";
    static readonly string[] DFA86_transitionS = {
            "\x01\x01\x21\uffff\x01\x02\x1a\uffff\x01\x02\x07\uffff\x01"+
            "\x08\x02\x02\x0d\uffff\x01\x02",
            "\x01\x0a\x21\uffff\x01\x02\x1a\uffff\x01\x02\x07\uffff\x01"+
            "\x08\x02\x02\x0d\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA86_eot = DFA.UnpackEncodedString(DFA86_eotS);
    static readonly short[] DFA86_eof = DFA.UnpackEncodedString(DFA86_eofS);
    static readonly char[] DFA86_min = DFA.UnpackEncodedStringToUnsignedChars(DFA86_minS);
    static readonly char[] DFA86_max = DFA.UnpackEncodedStringToUnsignedChars(DFA86_maxS);
    static readonly short[] DFA86_accept = DFA.UnpackEncodedString(DFA86_acceptS);
    static readonly short[] DFA86_special = DFA.UnpackEncodedString(DFA86_specialS);
    static readonly short[][] DFA86_transition = DFA.UnpackEncodedStringArray(DFA86_transitionS);

    protected class DFA86 : DFA
    {
        public DFA86(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 875:28: ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn )*"; }
        }

    }


    protected internal int DFA86_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA86_10 = input.LA(1);

                   	 
                   	int index86_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred126_AS3()) ) { s = 8; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index86_10);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 86, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA85_eotS =
        "\x0b\uffff";
    const string DFA85_eofS =
        "\x0b\uffff";
    const string DFA85_minS =
        "\x01\x05\x0a\uffff";
    const string DFA85_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA85_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA85_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA85_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA85_eot = DFA.UnpackEncodedString(DFA85_eotS);
    static readonly short[] DFA85_eof = DFA.UnpackEncodedString(DFA85_eofS);
    static readonly char[] DFA85_min = DFA.UnpackEncodedStringToUnsignedChars(DFA85_minS);
    static readonly char[] DFA85_max = DFA.UnpackEncodedStringToUnsignedChars(DFA85_maxS);
    static readonly short[] DFA85_accept = DFA.UnpackEncodedString(DFA85_acceptS);
    static readonly short[] DFA85_special = DFA.UnpackEncodedString(DFA85_specialS);
    static readonly short[][] DFA85_transition = DFA.UnpackEncodedStringArray(DFA85_transitionS);

    protected class DFA85 : DFA
    {
        public DFA85(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 875:50: ( LineTerminator )*"; }
        }

    }

    const string DFA89_eotS =
        "\x47\uffff";
    const string DFA89_eofS =
        "\x02\x02\x45\uffff";
    const string DFA89_minS =
        "\x02\x05\x38\uffff\x01\x00\x0c\uffff";
    const string DFA89_maxS =
        "\x02\x6b\x38\uffff\x01\x00\x0c\uffff";
    const string DFA89_acceptS =
        "\x02\uffff\x01\x02\x20\uffff\x01\x01\x23\uffff";
    const string DFA89_specialS =
        "\x3a\uffff\x01\x00\x0c\uffff}>";
    static readonly string[] DFA89_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x08\uffff\x01\x23\x01"+
            "\x02\x0c\uffff\x10\x02\x02\uffff\x01\x02",
            "\x01\x3a\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x0a"+
            "\x02\x01\uffff\x09\x02\x0b\uffff\x01\x02\x08\uffff\x01\x23\x01"+
            "\x02\x0c\uffff\x10\x02\x02\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA89_eot = DFA.UnpackEncodedString(DFA89_eotS);
    static readonly short[] DFA89_eof = DFA.UnpackEncodedString(DFA89_eofS);
    static readonly char[] DFA89_min = DFA.UnpackEncodedStringToUnsignedChars(DFA89_minS);
    static readonly char[] DFA89_max = DFA.UnpackEncodedStringToUnsignedChars(DFA89_maxS);
    static readonly short[] DFA89_accept = DFA.UnpackEncodedString(DFA89_acceptS);
    static readonly short[] DFA89_special = DFA.UnpackEncodedString(DFA89_specialS);
    static readonly short[][] DFA89_transition = DFA.UnpackEncodedStringArray(DFA89_transitionS);

    protected class DFA89 : DFA
    {
        public DFA89(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 879:25: ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression )*"; }
        }

    }


    protected internal int DFA89_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA89_58 = input.LA(1);

                   	 
                   	int index89_58 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred129_AS3()) ) { s = 35; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index89_58);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 89, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA88_eotS =
        "\x0b\uffff";
    const string DFA88_eofS =
        "\x0b\uffff";
    const string DFA88_minS =
        "\x01\x05\x0a\uffff";
    const string DFA88_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA88_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA88_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA88_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA88_eot = DFA.UnpackEncodedString(DFA88_eotS);
    static readonly short[] DFA88_eof = DFA.UnpackEncodedString(DFA88_eofS);
    static readonly char[] DFA88_min = DFA.UnpackEncodedStringToUnsignedChars(DFA88_minS);
    static readonly char[] DFA88_max = DFA.UnpackEncodedStringToUnsignedChars(DFA88_maxS);
    static readonly short[] DFA88_accept = DFA.UnpackEncodedString(DFA88_acceptS);
    static readonly short[] DFA88_special = DFA.UnpackEncodedString(DFA88_specialS);
    static readonly short[][] DFA88_transition = DFA.UnpackEncodedStringArray(DFA88_transitionS);

    protected class DFA88 : DFA
    {
        public DFA88(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 879:47: ( LineTerminator )*"; }
        }

    }

    const string DFA92_eotS =
        "\x0e\uffff";
    const string DFA92_eofS =
        "\x01\x02\x0d\uffff";
    const string DFA92_minS =
        "\x02\x05\x07\uffff\x01\x00\x04\uffff";
    const string DFA92_maxS =
        "\x02\x5a\x07\uffff\x01\x00\x04\uffff";
    const string DFA92_acceptS =
        "\x02\uffff\x01\x02\x04\uffff\x01\x01\x06\uffff";
    const string DFA92_specialS =
        "\x09\uffff\x01\x00\x04\uffff}>";
    static readonly string[] DFA92_transitionS = {
            "\x01\x01\x21\uffff\x01\x02\x1a\uffff\x01\x02\x08\uffff\x01"+
            "\x07\x01\x02\x0d\uffff\x01\x02",
            "\x01\x09\x21\uffff\x01\x02\x1a\uffff\x01\x02\x08\uffff\x01"+
            "\x07\x01\x02\x0d\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA92_eot = DFA.UnpackEncodedString(DFA92_eotS);
    static readonly short[] DFA92_eof = DFA.UnpackEncodedString(DFA92_eofS);
    static readonly char[] DFA92_min = DFA.UnpackEncodedStringToUnsignedChars(DFA92_minS);
    static readonly char[] DFA92_max = DFA.UnpackEncodedStringToUnsignedChars(DFA92_maxS);
    static readonly short[] DFA92_accept = DFA.UnpackEncodedString(DFA92_acceptS);
    static readonly short[] DFA92_special = DFA.UnpackEncodedString(DFA92_specialS);
    static readonly short[][] DFA92_transition = DFA.UnpackEncodedStringArray(DFA92_transitionS);

    protected class DFA92 : DFA
    {
        public DFA92(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 883:29: ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn )*"; }
        }

    }


    protected internal int DFA92_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA92_9 = input.LA(1);

                   	 
                   	int index92_9 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred132_AS3()) ) { s = 7; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index92_9);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 92, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA91_eotS =
        "\x0b\uffff";
    const string DFA91_eofS =
        "\x0b\uffff";
    const string DFA91_minS =
        "\x01\x05\x0a\uffff";
    const string DFA91_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA91_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA91_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA91_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA91_eot = DFA.UnpackEncodedString(DFA91_eotS);
    static readonly short[] DFA91_eof = DFA.UnpackEncodedString(DFA91_eofS);
    static readonly char[] DFA91_min = DFA.UnpackEncodedStringToUnsignedChars(DFA91_minS);
    static readonly char[] DFA91_max = DFA.UnpackEncodedStringToUnsignedChars(DFA91_maxS);
    static readonly short[] DFA91_accept = DFA.UnpackEncodedString(DFA91_acceptS);
    static readonly short[] DFA91_special = DFA.UnpackEncodedString(DFA91_specialS);
    static readonly short[][] DFA91_transition = DFA.UnpackEncodedStringArray(DFA91_transitionS);

    protected class DFA91 : DFA
    {
        public DFA91(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 883:51: ( LineTerminator )*"; }
        }

    }

    const string DFA97_eotS =
        "\x45\uffff";
    const string DFA97_eofS =
        "\x02\x03\x43\uffff";
    const string DFA97_minS =
        "\x02\x05\x37\uffff\x01\x00\x0b\uffff";
    const string DFA97_maxS =
        "\x02\x6b\x37\uffff\x01\x00\x0b\uffff";
    const string DFA97_acceptS =
        "\x02\uffff\x01\x01\x01\x02\x41\uffff";
    const string DFA97_specialS =
        "\x39\uffff\x01\x00\x0b\uffff}>";
    static readonly string[] DFA97_transitionS = {
            "\x01\x01\x06\uffff\x01\x03\x05\uffff\x04\x03\x0d\uffff\x0a"+
            "\x03\x01\uffff\x09\x03\x0b\uffff\x01\x03\x09\uffff\x01\x02\x0c"+
            "\uffff\x10\x03\x02\uffff\x01\x03",
            "\x01\x39\x06\uffff\x01\x03\x05\uffff\x04\x03\x0d\uffff\x0a"+
            "\x03\x01\uffff\x09\x03\x0b\uffff\x01\x03\x09\uffff\x01\x02\x0c"+
            "\uffff\x10\x03\x02\uffff\x01\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA97_eot = DFA.UnpackEncodedString(DFA97_eotS);
    static readonly short[] DFA97_eof = DFA.UnpackEncodedString(DFA97_eofS);
    static readonly char[] DFA97_min = DFA.UnpackEncodedStringToUnsignedChars(DFA97_minS);
    static readonly char[] DFA97_max = DFA.UnpackEncodedStringToUnsignedChars(DFA97_maxS);
    static readonly short[] DFA97_accept = DFA.UnpackEncodedString(DFA97_acceptS);
    static readonly short[] DFA97_special = DFA.UnpackEncodedString(DFA97_specialS);
    static readonly short[][] DFA97_transition = DFA.UnpackEncodedStringArray(DFA97_transitionS);

    protected class DFA97 : DFA
    {
        public DFA97(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;

        }

        override public string Description
        {
            get { return "887:24: ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?"; }
        }

    }


    protected internal int DFA97_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA97_57 = input.LA(1);

                   	 
                   	int index97_57 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred137_AS3()) ) { s = 2; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index97_57);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 97, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA94_eotS =
        "\x0b\uffff";
    const string DFA94_eofS =
        "\x0b\uffff";
    const string DFA94_minS =
        "\x01\x05\x0a\uffff";
    const string DFA94_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA94_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA94_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA94_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA94_eot = DFA.UnpackEncodedString(DFA94_eotS);
    static readonly short[] DFA94_eof = DFA.UnpackEncodedString(DFA94_eofS);
    static readonly char[] DFA94_min = DFA.UnpackEncodedStringToUnsignedChars(DFA94_minS);
    static readonly char[] DFA94_max = DFA.UnpackEncodedStringToUnsignedChars(DFA94_maxS);
    static readonly short[] DFA94_accept = DFA.UnpackEncodedString(DFA94_acceptS);
    static readonly short[] DFA94_special = DFA.UnpackEncodedString(DFA94_specialS);
    static readonly short[][] DFA94_transition = DFA.UnpackEncodedStringArray(DFA94_transitionS);

    protected class DFA94 : DFA
    {
        public DFA94(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 887:45: ( LineTerminator )*"; }
        }

    }

    const string DFA96_eotS =
        "\x0b\uffff";
    const string DFA96_eofS =
        "\x0b\uffff";
    const string DFA96_minS =
        "\x01\x05\x0a\uffff";
    const string DFA96_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA96_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA96_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA96_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA96_eot = DFA.UnpackEncodedString(DFA96_eotS);
    static readonly short[] DFA96_eof = DFA.UnpackEncodedString(DFA96_eofS);
    static readonly char[] DFA96_min = DFA.UnpackEncodedStringToUnsignedChars(DFA96_minS);
    static readonly char[] DFA96_max = DFA.UnpackEncodedStringToUnsignedChars(DFA96_maxS);
    static readonly short[] DFA96_accept = DFA.UnpackEncodedString(DFA96_acceptS);
    static readonly short[] DFA96_special = DFA.UnpackEncodedString(DFA96_specialS);
    static readonly short[][] DFA96_transition = DFA.UnpackEncodedStringArray(DFA96_transitionS);

    protected class DFA96 : DFA
    {
        public DFA96(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 887:102: ( LineTerminator )*"; }
        }

    }

    const string DFA102_eotS =
        "\x0c\uffff";
    const string DFA102_eofS =
        "\x01\x03\x0b\uffff";
    const string DFA102_minS =
        "\x02\x05\x06\uffff\x01\x00\x03\uffff";
    const string DFA102_maxS =
        "\x02\x5a\x06\uffff\x01\x00\x03\uffff";
    const string DFA102_acceptS =
        "\x02\uffff\x01\x01\x01\x02\x08\uffff";
    const string DFA102_specialS =
        "\x08\uffff\x01\x00\x03\uffff}>";
    static readonly string[] DFA102_transitionS = {
            "\x01\x01\x21\uffff\x01\x03\x1a\uffff\x01\x03\x09\uffff\x01"+
            "\x02\x0d\uffff\x01\x03",
            "\x01\x08\x21\uffff\x01\x03\x1a\uffff\x01\x03\x09\uffff\x01"+
            "\x02\x0d\uffff\x01\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            ""
    };

    static readonly short[] DFA102_eot = DFA.UnpackEncodedString(DFA102_eotS);
    static readonly short[] DFA102_eof = DFA.UnpackEncodedString(DFA102_eofS);
    static readonly char[] DFA102_min = DFA.UnpackEncodedStringToUnsignedChars(DFA102_minS);
    static readonly char[] DFA102_max = DFA.UnpackEncodedStringToUnsignedChars(DFA102_maxS);
    static readonly short[] DFA102_accept = DFA.UnpackEncodedString(DFA102_acceptS);
    static readonly short[] DFA102_special = DFA.UnpackEncodedString(DFA102_specialS);
    static readonly short[][] DFA102_transition = DFA.UnpackEncodedStringArray(DFA102_transitionS);

    protected class DFA102 : DFA
    {
        public DFA102(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;

        }

        override public string Description
        {
            get { return "891:28: ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?"; }
        }

    }


    protected internal int DFA102_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA102_8 = input.LA(1);

                   	 
                   	int index102_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred142_AS3()) ) { s = 2; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index102_8);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 102, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA99_eotS =
        "\x0b\uffff";
    const string DFA99_eofS =
        "\x0b\uffff";
    const string DFA99_minS =
        "\x01\x05\x0a\uffff";
    const string DFA99_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA99_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA99_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA99_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA99_eot = DFA.UnpackEncodedString(DFA99_eotS);
    static readonly short[] DFA99_eof = DFA.UnpackEncodedString(DFA99_eofS);
    static readonly char[] DFA99_min = DFA.UnpackEncodedStringToUnsignedChars(DFA99_minS);
    static readonly char[] DFA99_max = DFA.UnpackEncodedStringToUnsignedChars(DFA99_maxS);
    static readonly short[] DFA99_accept = DFA.UnpackEncodedString(DFA99_acceptS);
    static readonly short[] DFA99_special = DFA.UnpackEncodedString(DFA99_specialS);
    static readonly short[][] DFA99_transition = DFA.UnpackEncodedStringArray(DFA99_transitionS);

    protected class DFA99 : DFA
    {
        public DFA99(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 891:49: ( LineTerminator )*"; }
        }

    }

    const string DFA101_eotS =
        "\x0b\uffff";
    const string DFA101_eofS =
        "\x0b\uffff";
    const string DFA101_minS =
        "\x01\x05\x0a\uffff";
    const string DFA101_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA101_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA101_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA101_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA101_eot = DFA.UnpackEncodedString(DFA101_eotS);
    static readonly short[] DFA101_eof = DFA.UnpackEncodedString(DFA101_eofS);
    static readonly char[] DFA101_min = DFA.UnpackEncodedStringToUnsignedChars(DFA101_minS);
    static readonly char[] DFA101_max = DFA.UnpackEncodedStringToUnsignedChars(DFA101_maxS);
    static readonly short[] DFA101_accept = DFA.UnpackEncodedString(DFA101_acceptS);
    static readonly short[] DFA101_special = DFA.UnpackEncodedString(DFA101_specialS);
    static readonly short[][] DFA101_transition = DFA.UnpackEncodedStringArray(DFA101_transitionS);

    protected class DFA101 : DFA
    {
        public DFA101(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 891:106: ( LineTerminator )*"; }
        }

    }

    const string DFA105_eotS =
        "\u00bb\uffff";
    const string DFA105_eofS =
        "\x01\uffff\x03\x09\u00b7\uffff";
    const string DFA105_minS =
        "\x01\x0c\x08\x05\x01\uffff\x03\x00\x19\uffff\x01\x00\x12\uffff"+
        "\x03\x00\x19\uffff\x01\x00\x12\uffff\x03\x00\x01\uffff\x01\x00\x2a"+
        "\uffff\x24\x00";
    const string DFA105_maxS =
        "\x05\x6b\x01\x15\x01\x6b\x01\x24\x01\x6b\x01\uffff\x03\x00\x19"+
        "\uffff\x01\x00\x12\uffff\x03\x00\x19\uffff\x01\x00\x12\uffff\x03"+
        "\x00\x01\uffff\x01\x00\x2a\uffff\x24\x00";
    const string DFA105_acceptS =
        "\x09\uffff\x01\x01\x2e\uffff\x01\x02\u0082\uffff";
    const string DFA105_specialS =
        "\x0a\uffff\x01\x00\x01\x01\x01\x02\x19\uffff\x01\x03\x12\uffff"+
        "\x01\x04\x01\x05\x01\x06\x19\uffff\x01\x07\x12\uffff\x01\x08\x01"+
        "\x09\x01\x0a\x01\uffff\x01\x0b\x2a\uffff\x01\x0c\x01\x0d\x01\x0e"+
        "\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16"+
        "\x01\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e"+
        "\x01\x1f\x01\x20\x01\x21\x01\x22\x01\x23\x01\x24\x01\x25\x01\x26"+
        "\x01\x27\x01\x28\x01\x29\x01\x2a\x01\x2b\x01\x2c\x01\x2d\x01\x2e"+
        "\x01\x2f}>";
    static readonly string[] DFA105_transitionS = {
            "\x01\x02\x05\uffff\x04\x03\x0d\uffff\x01\x01\x01\x06\x01\uffff"+
            "\x01\x04\x02\uffff\x01\x05\x02\uffff\x01\x08\x01\uffff\x09\x09"+
            "\x34\uffff\x01\x07",
            "\x01\x0a\x06\uffff\x01\x09\x05\uffff\x04\x09\x0d\uffff\x01"+
            "\x09\x01\x26\x01\x09\x01\x0b\x06\x09\x01\x0c\x1f\x09\x0c\x38"+
            "\x10\x09\x02\uffff\x01\x09",
            "\x01\x39\x06\uffff\x01\x09\x05\uffff\x04\x09\x0d\uffff\x01"+
            "\x09\x01\x55\x01\x09\x01\x3a\x06\x09\x01\x3b\x1f\x09\x0c\x38"+
            "\x10\x09\x02\uffff\x01\x09",
            "\x01\x68\x06\uffff\x01\x09\x05\uffff\x04\x09\x0d\uffff\x01"+
            "\x09\x01\x6c\x01\x09\x01\x69\x06\x09\x01\x6a\x1f\x09\x0c\x38"+
            "\x10\x09\x02\uffff\x01\x09",
            "\x01\u0097\x06\uffff\x01\u0099\x05\uffff\x04\u009a\x0d\uffff"+
            "\x01\u0098\x01\u009d\x01\uffff\x01\u009b\x01\u00a1\x01\u00a2"+
            "\x01\u009c\x02\uffff\x01\u009f\x01\uffff\x09\u00a0\x34\uffff"+
            "\x01\u009e",
            "\x01\u00a3\x06\uffff\x01\u00a4\x07\uffff\x02\u00a4",
            "\x01\u00a5\x06\uffff\x01\u00a7\x05\uffff\x04\u00a8\x0d\uffff"+
            "\x01\u00a6\x01\u00ab\x01\uffff\x01\u00a9\x02\uffff\x01\u00aa"+
            "\x02\uffff\x01\u00ad\x01\uffff\x09\u00ae\x34\uffff\x01\u00ac",
            "\x01\u00af\x06\uffff\x01\u00b0\x17\uffff\x01\u00b1",
            "\x01\u00b2\x06\uffff\x01\u00b4\x05\uffff\x04\u00b5\x0d\uffff"+
            "\x01\u00b3\x01\u00b8\x01\uffff\x01\u00b6\x02\uffff\x01\u00b7"+
            "\x02\uffff\x01\u00ba\x3e\uffff\x01\u00b9",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff"
    };

    static readonly short[] DFA105_eot = DFA.UnpackEncodedString(DFA105_eotS);
    static readonly short[] DFA105_eof = DFA.UnpackEncodedString(DFA105_eofS);
    static readonly char[] DFA105_min = DFA.UnpackEncodedStringToUnsignedChars(DFA105_minS);
    static readonly char[] DFA105_max = DFA.UnpackEncodedStringToUnsignedChars(DFA105_maxS);
    static readonly short[] DFA105_accept = DFA.UnpackEncodedString(DFA105_acceptS);
    static readonly short[] DFA105_special = DFA.UnpackEncodedString(DFA105_specialS);
    static readonly short[][] DFA105_transition = DFA.UnpackEncodedStringArray(DFA105_transitionS);

    protected class DFA105 : DFA
    {
        public DFA105(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;

        }

        override public string Description
        {
            get { return "894:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpression );"; }
        }

    }


    protected internal int DFA105_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA105_10 = input.LA(1);

                   	 
                   	int index105_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_10);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA105_11 = input.LA(1);

                   	 
                   	int index105_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_11);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA105_12 = input.LA(1);

                   	 
                   	int index105_12 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_12);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA105_38 = input.LA(1);

                   	 
                   	int index105_38 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_38);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA105_57 = input.LA(1);

                   	 
                   	int index105_57 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_57);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA105_58 = input.LA(1);

                   	 
                   	int index105_58 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_58);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA105_59 = input.LA(1);

                   	 
                   	int index105_59 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_59);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA105_85 = input.LA(1);

                   	 
                   	int index105_85 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_85);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA105_104 = input.LA(1);

                   	 
                   	int index105_104 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_104);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA105_105 = input.LA(1);

                   	 
                   	int index105_105 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_105);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA105_106 = input.LA(1);

                   	 
                   	int index105_106 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_106);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA105_108 = input.LA(1);

                   	 
                   	int index105_108 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_108);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA105_151 = input.LA(1);

                   	 
                   	int index105_151 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_151);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA105_152 = input.LA(1);

                   	 
                   	int index105_152 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_152);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA105_153 = input.LA(1);

                   	 
                   	int index105_153 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_153);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 15 : 
                   	int LA105_154 = input.LA(1);

                   	 
                   	int index105_154 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_154);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 16 : 
                   	int LA105_155 = input.LA(1);

                   	 
                   	int index105_155 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_155);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 17 : 
                   	int LA105_156 = input.LA(1);

                   	 
                   	int index105_156 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_156);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 18 : 
                   	int LA105_157 = input.LA(1);

                   	 
                   	int index105_157 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_157);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 19 : 
                   	int LA105_158 = input.LA(1);

                   	 
                   	int index105_158 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_158);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 20 : 
                   	int LA105_159 = input.LA(1);

                   	 
                   	int index105_159 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_159);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 21 : 
                   	int LA105_160 = input.LA(1);

                   	 
                   	int index105_160 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_160);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 22 : 
                   	int LA105_161 = input.LA(1);

                   	 
                   	int index105_161 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_161);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 23 : 
                   	int LA105_162 = input.LA(1);

                   	 
                   	int index105_162 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_162);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 24 : 
                   	int LA105_163 = input.LA(1);

                   	 
                   	int index105_163 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_163);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 25 : 
                   	int LA105_164 = input.LA(1);

                   	 
                   	int index105_164 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_164);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 26 : 
                   	int LA105_165 = input.LA(1);

                   	 
                   	int index105_165 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_165);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 27 : 
                   	int LA105_166 = input.LA(1);

                   	 
                   	int index105_166 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_166);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 28 : 
                   	int LA105_167 = input.LA(1);

                   	 
                   	int index105_167 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_167);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 29 : 
                   	int LA105_168 = input.LA(1);

                   	 
                   	int index105_168 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_168);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 30 : 
                   	int LA105_169 = input.LA(1);

                   	 
                   	int index105_169 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_169);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 31 : 
                   	int LA105_170 = input.LA(1);

                   	 
                   	int index105_170 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_170);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 32 : 
                   	int LA105_171 = input.LA(1);

                   	 
                   	int index105_171 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_171);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 33 : 
                   	int LA105_172 = input.LA(1);

                   	 
                   	int index105_172 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_172);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 34 : 
                   	int LA105_173 = input.LA(1);

                   	 
                   	int index105_173 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_173);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 35 : 
                   	int LA105_174 = input.LA(1);

                   	 
                   	int index105_174 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_174);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 36 : 
                   	int LA105_175 = input.LA(1);

                   	 
                   	int index105_175 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_175);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 37 : 
                   	int LA105_176 = input.LA(1);

                   	 
                   	int index105_176 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_176);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 38 : 
                   	int LA105_177 = input.LA(1);

                   	 
                   	int index105_177 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_177);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 39 : 
                   	int LA105_178 = input.LA(1);

                   	 
                   	int index105_178 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_178);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 40 : 
                   	int LA105_179 = input.LA(1);

                   	 
                   	int index105_179 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_179);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 41 : 
                   	int LA105_180 = input.LA(1);

                   	 
                   	int index105_180 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_180);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 42 : 
                   	int LA105_181 = input.LA(1);

                   	 
                   	int index105_181 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_181);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 43 : 
                   	int LA105_182 = input.LA(1);

                   	 
                   	int index105_182 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_182);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 44 : 
                   	int LA105_183 = input.LA(1);

                   	 
                   	int index105_183 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_183);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 45 : 
                   	int LA105_184 = input.LA(1);

                   	 
                   	int index105_184 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_184);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 46 : 
                   	int LA105_185 = input.LA(1);

                   	 
                   	int index105_185 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_185);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 47 : 
                   	int LA105_186 = input.LA(1);

                   	 
                   	int index105_186 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 56; }

                   	 
                   	input.Seek(index105_186);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 105, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA104_eotS =
        "\x0b\uffff";
    const string DFA104_eofS =
        "\x0b\uffff";
    const string DFA104_minS =
        "\x01\x05\x0a\uffff";
    const string DFA104_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA104_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA104_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA104_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA104_eot = DFA.UnpackEncodedString(DFA104_eotS);
    static readonly short[] DFA104_eof = DFA.UnpackEncodedString(DFA104_eofS);
    static readonly char[] DFA104_min = DFA.UnpackEncodedStringToUnsignedChars(DFA104_minS);
    static readonly char[] DFA104_max = DFA.UnpackEncodedStringToUnsignedChars(DFA104_maxS);
    static readonly short[] DFA104_accept = DFA.UnpackEncodedString(DFA104_acceptS);
    static readonly short[] DFA104_special = DFA.UnpackEncodedString(DFA104_specialS);
    static readonly short[][] DFA104_transition = DFA.UnpackEncodedStringArray(DFA104_transitionS);

    protected class DFA104 : DFA
    {
        public DFA104(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 896:62: ( LineTerminator )*"; }
        }

    }

    const string DFA108_eotS =
        "\x6d\uffff";
    const string DFA108_eofS =
        "\x01\uffff\x03\x09\x69\uffff";
    const string DFA108_minS =
        "\x01\x0c\x08\x05\x01\uffff\x04\x00\x11\uffff\x04\x00\x11\uffff"+
        "\x04\x00\x11\uffff\x24\x00";
    const string DFA108_maxS =
        "\x01\x6b\x03\x5a\x01\x6b\x01\x15\x01\x6b\x01\x24\x01\x6b\x01\uffff"+
        "\x04\x00\x11\uffff\x04\x00\x11\uffff\x04\x00\x11\uffff\x24\x00";
    const string DFA108_acceptS =
        "\x09\uffff\x01\x01\x14\uffff\x01\x02\x4e\uffff";
    const string DFA108_specialS =
        "\x0a\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x11\uffff\x01\x04\x01"+
        "\x05\x01\x06\x01\x07\x11\uffff\x01\x08\x01\x09\x01\x0a\x01\x0b\x11"+
        "\uffff\x01\x0c\x01\x0d\x01\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01"+
        "\x13\x01\x14\x01\x15\x01\x16\x01\x17\x01\x18\x01\x19\x01\x1a\x01"+
        "\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01\x20\x01\x21\x01\x22\x01"+
        "\x23\x01\x24\x01\x25\x01\x26\x01\x27\x01\x28\x01\x29\x01\x2a\x01"+
        "\x2b\x01\x2c\x01\x2d\x01\x2e\x01\x2f}>";
    static readonly string[] DFA108_transitionS = {
            "\x01\x02\x05\uffff\x04\x03\x0d\uffff\x01\x01\x01\x06\x01\uffff"+
            "\x01\x04\x02\uffff\x01\x05\x02\uffff\x01\x08\x01\uffff\x09\x09"+
            "\x34\uffff\x01\x07",
            "\x01\x0a\x1e\uffff\x01\x0d\x01\uffff\x01\x0b\x01\x09\x05\uffff"+
            "\x01\x0c\x02\x09\x03\uffff\x02\x09\x02\uffff\x16\x09\x0c\x1e"+
            "\x01\uffff\x01\x09",
            "\x01\x1f\x1e\uffff\x01\x22\x01\uffff\x01\x20\x01\x09\x05\uffff"+
            "\x01\x21\x02\x09\x03\uffff\x02\x09\x02\uffff\x16\x09\x0c\x1e"+
            "\x01\uffff\x01\x09",
            "\x01\x34\x1e\uffff\x01\x37\x01\uffff\x01\x35\x01\x09\x05\uffff"+
            "\x01\x36\x02\x09\x03\uffff\x02\x09\x02\uffff\x16\x09\x0c\x1e"+
            "\x01\uffff\x01\x09",
            "\x01\x49\x06\uffff\x01\x4b\x05\uffff\x04\x4c\x0d\uffff\x01"+
            "\x4a\x01\x4f\x01\uffff\x01\x4d\x01\x53\x01\x54\x01\x4e\x02\uffff"+
            "\x01\x51\x01\uffff\x09\x52\x34\uffff\x01\x50",
            "\x01\x55\x06\uffff\x01\x56\x07\uffff\x02\x56",
            "\x01\x57\x06\uffff\x01\x59\x05\uffff\x04\x5a\x0d\uffff\x01"+
            "\x58\x01\x5d\x01\uffff\x01\x5b\x02\uffff\x01\x5c\x02\uffff\x01"+
            "\x5f\x01\uffff\x09\x60\x34\uffff\x01\x5e",
            "\x01\x61\x06\uffff\x01\x62\x17\uffff\x01\x63",
            "\x01\x64\x06\uffff\x01\x66\x05\uffff\x04\x67\x0d\uffff\x01"+
            "\x65\x01\x6a\x01\uffff\x01\x68\x02\uffff\x01\x69\x02\uffff\x01"+
            "\x6c\x3e\uffff\x01\x6b",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff"
    };

    static readonly short[] DFA108_eot = DFA.UnpackEncodedString(DFA108_eotS);
    static readonly short[] DFA108_eof = DFA.UnpackEncodedString(DFA108_eofS);
    static readonly char[] DFA108_min = DFA.UnpackEncodedStringToUnsignedChars(DFA108_minS);
    static readonly char[] DFA108_max = DFA.UnpackEncodedStringToUnsignedChars(DFA108_maxS);
    static readonly short[] DFA108_accept = DFA.UnpackEncodedString(DFA108_acceptS);
    static readonly short[] DFA108_special = DFA.UnpackEncodedString(DFA108_specialS);
    static readonly short[][] DFA108_transition = DFA.UnpackEncodedStringArray(DFA108_transitionS);

    protected class DFA108 : DFA
    {
        public DFA108(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;

        }

        override public string Description
        {
            get { return "899:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpressionNoIn );"; }
        }

    }


    protected internal int DFA108_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA108_10 = input.LA(1);

                   	 
                   	int index108_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_10);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA108_11 = input.LA(1);

                   	 
                   	int index108_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_11);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA108_12 = input.LA(1);

                   	 
                   	int index108_12 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_12);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA108_13 = input.LA(1);

                   	 
                   	int index108_13 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_13);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA108_31 = input.LA(1);

                   	 
                   	int index108_31 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_31);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA108_32 = input.LA(1);

                   	 
                   	int index108_32 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_32);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA108_33 = input.LA(1);

                   	 
                   	int index108_33 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_33);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA108_34 = input.LA(1);

                   	 
                   	int index108_34 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_34);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA108_52 = input.LA(1);

                   	 
                   	int index108_52 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_52);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA108_53 = input.LA(1);

                   	 
                   	int index108_53 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_53);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA108_54 = input.LA(1);

                   	 
                   	int index108_54 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_54);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA108_55 = input.LA(1);

                   	 
                   	int index108_55 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_55);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA108_73 = input.LA(1);

                   	 
                   	int index108_73 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_73);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA108_74 = input.LA(1);

                   	 
                   	int index108_74 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_74);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA108_75 = input.LA(1);

                   	 
                   	int index108_75 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_75);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 15 : 
                   	int LA108_76 = input.LA(1);

                   	 
                   	int index108_76 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_76);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 16 : 
                   	int LA108_77 = input.LA(1);

                   	 
                   	int index108_77 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_77);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 17 : 
                   	int LA108_78 = input.LA(1);

                   	 
                   	int index108_78 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_78);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 18 : 
                   	int LA108_79 = input.LA(1);

                   	 
                   	int index108_79 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_79);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 19 : 
                   	int LA108_80 = input.LA(1);

                   	 
                   	int index108_80 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_80);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 20 : 
                   	int LA108_81 = input.LA(1);

                   	 
                   	int index108_81 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_81);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 21 : 
                   	int LA108_82 = input.LA(1);

                   	 
                   	int index108_82 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_82);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 22 : 
                   	int LA108_83 = input.LA(1);

                   	 
                   	int index108_83 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_83);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 23 : 
                   	int LA108_84 = input.LA(1);

                   	 
                   	int index108_84 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_84);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 24 : 
                   	int LA108_85 = input.LA(1);

                   	 
                   	int index108_85 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_85);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 25 : 
                   	int LA108_86 = input.LA(1);

                   	 
                   	int index108_86 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_86);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 26 : 
                   	int LA108_87 = input.LA(1);

                   	 
                   	int index108_87 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_87);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 27 : 
                   	int LA108_88 = input.LA(1);

                   	 
                   	int index108_88 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_88);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 28 : 
                   	int LA108_89 = input.LA(1);

                   	 
                   	int index108_89 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_89);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 29 : 
                   	int LA108_90 = input.LA(1);

                   	 
                   	int index108_90 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_90);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 30 : 
                   	int LA108_91 = input.LA(1);

                   	 
                   	int index108_91 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_91);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 31 : 
                   	int LA108_92 = input.LA(1);

                   	 
                   	int index108_92 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_92);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 32 : 
                   	int LA108_93 = input.LA(1);

                   	 
                   	int index108_93 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_93);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 33 : 
                   	int LA108_94 = input.LA(1);

                   	 
                   	int index108_94 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_94);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 34 : 
                   	int LA108_95 = input.LA(1);

                   	 
                   	int index108_95 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_95);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 35 : 
                   	int LA108_96 = input.LA(1);

                   	 
                   	int index108_96 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_96);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 36 : 
                   	int LA108_97 = input.LA(1);

                   	 
                   	int index108_97 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_97);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 37 : 
                   	int LA108_98 = input.LA(1);

                   	 
                   	int index108_98 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_98);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 38 : 
                   	int LA108_99 = input.LA(1);

                   	 
                   	int index108_99 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_99);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 39 : 
                   	int LA108_100 = input.LA(1);

                   	 
                   	int index108_100 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_100);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 40 : 
                   	int LA108_101 = input.LA(1);

                   	 
                   	int index108_101 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_101);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 41 : 
                   	int LA108_102 = input.LA(1);

                   	 
                   	int index108_102 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_102);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 42 : 
                   	int LA108_103 = input.LA(1);

                   	 
                   	int index108_103 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_103);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 43 : 
                   	int LA108_104 = input.LA(1);

                   	 
                   	int index108_104 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_104);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 44 : 
                   	int LA108_105 = input.LA(1);

                   	 
                   	int index108_105 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_105);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 45 : 
                   	int LA108_106 = input.LA(1);

                   	 
                   	int index108_106 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_106);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 46 : 
                   	int LA108_107 = input.LA(1);

                   	 
                   	int index108_107 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_107);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 47 : 
                   	int LA108_108 = input.LA(1);

                   	 
                   	int index108_108 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_AS3()) ) { s = 9; }

                   	else if ( (true) ) { s = 30; }

                   	 
                   	input.Seek(index108_108);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 108, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA107_eotS =
        "\x0b\uffff";
    const string DFA107_eofS =
        "\x0b\uffff";
    const string DFA107_minS =
        "\x01\x05\x0a\uffff";
    const string DFA107_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA107_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA107_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA107_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA107_eot = DFA.UnpackEncodedString(DFA107_eotS);
    static readonly short[] DFA107_eof = DFA.UnpackEncodedString(DFA107_eofS);
    static readonly char[] DFA107_min = DFA.UnpackEncodedStringToUnsignedChars(DFA107_minS);
    static readonly char[] DFA107_max = DFA.UnpackEncodedStringToUnsignedChars(DFA107_maxS);
    static readonly short[] DFA107_accept = DFA.UnpackEncodedString(DFA107_acceptS);
    static readonly short[] DFA107_special = DFA.UnpackEncodedString(DFA107_specialS);
    static readonly short[][] DFA107_transition = DFA.UnpackEncodedStringArray(DFA107_transitionS);

    protected class DFA107 : DFA
    {
        public DFA107(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 901:62: ( LineTerminator )*"; }
        }

    }

    const string DFA111_eotS =
        "\x41\uffff";
    const string DFA111_eofS =
        "\x02\x02\x3f\uffff";
    const string DFA111_minS =
        "\x02\x05\x35\uffff\x01\x00\x09\uffff";
    const string DFA111_maxS =
        "\x02\x6b\x35\uffff\x01\x00\x09\uffff";
    const string DFA111_acceptS =
        "\x02\uffff\x01\x02\x1d\uffff\x01\x01\x20\uffff";
    const string DFA111_specialS =
        "\x37\uffff\x01\x00\x09\uffff}>";
    static readonly string[] DFA111_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x04"+
            "\x02\x01\x20\x05\x02\x01\uffff\x09\x02\x22\uffff\x10\x02\x02"+
            "\uffff\x01\x02",
            "\x01\x37\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x04"+
            "\x02\x01\x20\x05\x02\x01\uffff\x09\x02\x22\uffff\x10\x02\x02"+
            "\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA111_eot = DFA.UnpackEncodedString(DFA111_eotS);
    static readonly short[] DFA111_eof = DFA.UnpackEncodedString(DFA111_eofS);
    static readonly char[] DFA111_min = DFA.UnpackEncodedStringToUnsignedChars(DFA111_minS);
    static readonly char[] DFA111_max = DFA.UnpackEncodedStringToUnsignedChars(DFA111_maxS);
    static readonly short[] DFA111_accept = DFA.UnpackEncodedString(DFA111_acceptS);
    static readonly short[] DFA111_special = DFA.UnpackEncodedString(DFA111_specialS);
    static readonly short[][] DFA111_transition = DFA.UnpackEncodedStringArray(DFA111_transitionS);

    protected class DFA111 : DFA
    {
        public DFA111(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 909:25: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*"; }
        }

    }


    protected internal int DFA111_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA111_55 = input.LA(1);

                   	 
                   	int index111_55 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred162_AS3()) ) { s = 32; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index111_55);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 111, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA110_eotS =
        "\x0b\uffff";
    const string DFA110_eofS =
        "\x0b\uffff";
    const string DFA110_minS =
        "\x01\x05\x0a\uffff";
    const string DFA110_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA110_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA110_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA110_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA110_eot = DFA.UnpackEncodedString(DFA110_eotS);
    static readonly short[] DFA110_eof = DFA.UnpackEncodedString(DFA110_eofS);
    static readonly char[] DFA110_min = DFA.UnpackEncodedStringToUnsignedChars(DFA110_minS);
    static readonly char[] DFA110_max = DFA.UnpackEncodedStringToUnsignedChars(DFA110_maxS);
    static readonly short[] DFA110_accept = DFA.UnpackEncodedString(DFA110_acceptS);
    static readonly short[] DFA110_special = DFA.UnpackEncodedString(DFA110_specialS);
    static readonly short[][] DFA110_transition = DFA.UnpackEncodedStringArray(DFA110_transitionS);

    protected class DFA110 : DFA
    {
        public DFA110(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 909:46: ( LineTerminator )*"; }
        }

    }

    const string DFA113_eotS =
        "\x0b\uffff";
    const string DFA113_eofS =
        "\x0b\uffff";
    const string DFA113_minS =
        "\x01\x05\x0a\uffff";
    const string DFA113_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA113_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA113_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA113_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA113_eot = DFA.UnpackEncodedString(DFA113_eotS);
    static readonly short[] DFA113_eof = DFA.UnpackEncodedString(DFA113_eofS);
    static readonly char[] DFA113_min = DFA.UnpackEncodedStringToUnsignedChars(DFA113_minS);
    static readonly char[] DFA113_max = DFA.UnpackEncodedStringToUnsignedChars(DFA113_maxS);
    static readonly short[] DFA113_accept = DFA.UnpackEncodedString(DFA113_acceptS);
    static readonly short[] DFA113_special = DFA.UnpackEncodedString(DFA113_specialS);
    static readonly short[][] DFA113_transition = DFA.UnpackEncodedStringArray(DFA113_transitionS);

    protected class DFA113 : DFA
    {
        public DFA113(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 913:50: ( LineTerminator )*"; }
        }

    }

    const string DFA115_eotS =
        "\x5d\uffff";
    const string DFA115_eofS =
        "\x05\uffff\x01\x04\x57\uffff";
    const string DFA115_minS =
        "\x01\x0c\x01\x05\x03\uffff\x01\x05\x11\uffff\x01\x00\x04\uffff"+
        "\x02\x00\x12\uffff\x01\x00\x2c\uffff";
    const string DFA115_maxS =
        "\x02\x6b\x03\uffff\x01\x6b\x11\uffff\x01\x00\x04\uffff\x02\x00"+
        "\x12\uffff\x01\x00\x2c\uffff";
    const string DFA115_acceptS =
        "\x02\uffff\x01\x02\x01\x03\x01\x04\x07\uffff\x01\x05\x01\x06\x02"+
        "\uffff\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0c\x01\x0d\x01\x0e\x01"+
        "\uffff\x01\x01\x1b\uffff\x01\x0b\x28\uffff";
    const string DFA115_specialS =
        "\x17\uffff\x01\x00\x04\uffff\x01\x01\x01\x02\x12\uffff\x01\x03"+
        "\x2c\uffff}>";
    static readonly string[] DFA115_transitionS = {
            "\x01\x05\x05\uffff\x04\x04\x0d\uffff\x02\x04\x01\uffff\x01"+
            "\x04\x02\uffff\x01\x01\x02\uffff\x01\x04\x01\uffff\x09\x04\x22"+
            "\uffff\x01\x02\x01\x03\x01\x0c\x01\uffff\x03\x0d\x01\x10\x01"+
            "\x11\x01\x12\x01\x13\x01\x14\x02\uffff\x01\x15\x01\x16\x02\uffff"+
            "\x01\x04",
            "\x01\x17\x06\uffff\x01\x1c\x05\uffff\x02\x18\x02\x1d\x0d\uffff"+
            "\x04\x18\x02\uffff\x01\x18\x02\uffff\x01\x18\x01\uffff\x09\x18"+
            "\x22\uffff\x03\x18\x01\uffff\x08\x18\x02\uffff\x02\x18\x02\uffff"+
            "\x01\x18",
            "",
            "",
            "",
            "\x01\x30\x06\uffff\x01\x04\x05\uffff\x04\x04\x0d\uffff\x05"+
            "\x04\x01\uffff\x02\x04\x01\x34\x3d\x04\x02\uffff\x01\x04",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA115_eot = DFA.UnpackEncodedString(DFA115_eotS);
    static readonly short[] DFA115_eof = DFA.UnpackEncodedString(DFA115_eofS);
    static readonly char[] DFA115_min = DFA.UnpackEncodedStringToUnsignedChars(DFA115_minS);
    static readonly char[] DFA115_max = DFA.UnpackEncodedStringToUnsignedChars(DFA115_maxS);
    static readonly short[] DFA115_accept = DFA.UnpackEncodedString(DFA115_acceptS);
    static readonly short[] DFA115_special = DFA.UnpackEncodedString(DFA115_specialS);
    static readonly short[][] DFA115_transition = DFA.UnpackEncodedStringArray(DFA115_transitionS);

    protected class DFA115 : DFA
    {
        public DFA115(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;

        }

        override public string Description
        {
            get { return "920:1: statement : ( blockStatement | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement );"; }
        }

    }


    protected internal int DFA115_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA115_23 = input.LA(1);

                   	 
                   	int index115_23 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred166_AS3()) ) { s = 24; }

                   	else if ( (synpred169_AS3()) ) { s = 4; }

                   	 
                   	input.Seek(index115_23);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA115_28 = input.LA(1);

                   	 
                   	int index115_28 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred166_AS3()) ) { s = 24; }

                   	else if ( (synpred169_AS3()) ) { s = 4; }

                   	 
                   	input.Seek(index115_28);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA115_29 = input.LA(1);

                   	 
                   	int index115_29 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred166_AS3()) ) { s = 24; }

                   	else if ( (synpred169_AS3()) ) { s = 4; }

                   	 
                   	input.Seek(index115_29);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA115_48 = input.LA(1);

                   	 
                   	int index115_48 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred169_AS3()) ) { s = 4; }

                   	else if ( (synpred176_AS3()) ) { s = 52; }

                   	 
                   	input.Seek(index115_48);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 115, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA116_eotS =
        "\x32\uffff";
    const string DFA116_eofS =
        "\x32\uffff";
    const string DFA116_minS =
        "\x01\x05\x16\uffff\x01\x00\x1a\uffff";
    const string DFA116_maxS =
        "\x01\x6b\x16\uffff\x01\x00\x1a\uffff";
    const string DFA116_acceptS =
        "\x01\uffff\x01\x02\x2f\uffff\x01\x01";
    const string DFA116_specialS =
        "\x17\uffff\x01\x00\x1a\uffff}>";
    static readonly string[] DFA116_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x04"+
            "\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01\uffff\x09\x01\x22"+
            "\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff\x02\x01\x02\uffff"+
            "\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA116_eot = DFA.UnpackEncodedString(DFA116_eotS);
    static readonly short[] DFA116_eof = DFA.UnpackEncodedString(DFA116_eofS);
    static readonly char[] DFA116_min = DFA.UnpackEncodedStringToUnsignedChars(DFA116_minS);
    static readonly char[] DFA116_max = DFA.UnpackEncodedStringToUnsignedChars(DFA116_maxS);
    static readonly short[] DFA116_accept = DFA.UnpackEncodedString(DFA116_acceptS);
    static readonly short[] DFA116_special = DFA.UnpackEncodedString(DFA116_specialS);
    static readonly short[][] DFA116_transition = DFA.UnpackEncodedStringArray(DFA116_transitionS);

    protected class DFA116 : DFA
    {
        public DFA116(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 938:8: ( LineTerminator )*"; }
        }

    }


    protected internal int DFA116_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA116_23 = input.LA(1);

                   	 
                   	int index116_23 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred179_AS3()) ) { s = 49; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index116_23);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 116, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA117_eotS =
        "\x19\uffff";
    const string DFA117_eofS =
        "\x19\uffff";
    const string DFA117_minS =
        "\x01\x05\x18\uffff";
    const string DFA117_maxS =
        "\x01\x6b\x18\uffff";
    const string DFA117_acceptS =
        "\x01\uffff\x01\x01\x15\uffff\x01\x02\x01\uffff";
    const string DFA117_specialS =
        "\x19\uffff}>";
    static readonly string[] DFA117_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\x17\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA117_eot = DFA.UnpackEncodedString(DFA117_eotS);
    static readonly short[] DFA117_eof = DFA.UnpackEncodedString(DFA117_eofS);
    static readonly char[] DFA117_min = DFA.UnpackEncodedStringToUnsignedChars(DFA117_minS);
    static readonly char[] DFA117_max = DFA.UnpackEncodedStringToUnsignedChars(DFA117_maxS);
    static readonly short[] DFA117_accept = DFA.UnpackEncodedString(DFA117_acceptS);
    static readonly short[] DFA117_special = DFA.UnpackEncodedString(DFA117_specialS);
    static readonly short[][] DFA117_transition = DFA.UnpackEncodedStringArray(DFA117_transitionS);

    protected class DFA117 : DFA
    {
        public DFA117(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;

        }

        override public string Description
        {
            get { return "938:24: ( statementList )?"; }
        }

    }

    const string DFA120_eotS =
        "\x38\uffff";
    const string DFA120_eofS =
        "\x01\x02\x37\uffff";
    const string DFA120_minS =
        "\x02\x05\x1c\uffff\x01\x00\x19\uffff";
    const string DFA120_maxS =
        "\x02\x6b\x1c\uffff\x01\x00\x19\uffff";
    const string DFA120_acceptS =
        "\x02\uffff\x01\x02\x04\uffff\x01\x01\x30\uffff";
    const string DFA120_specialS =
        "\x1e\uffff\x01\x00\x19\uffff}>";
    static readonly string[] DFA120_transitionS = {
            "\x01\x01\x06\uffff\x01\x07\x05\uffff\x04\x07\x0d\uffff\x02"+
            "\x07\x01\x02\x01\x07\x02\uffff\x01\x07\x01\x02\x01\uffff\x01"+
            "\x07\x01\uffff\x09\x07\x22\uffff\x03\x07\x01\uffff\x08\x07\x02"+
            "\x02\x02\x07\x02\uffff\x01\x07",
            "\x01\x1e\x06\uffff\x01\x07\x05\uffff\x04\x07\x0d\uffff\x02"+
            "\x07\x01\x02\x01\x07\x02\uffff\x01\x07\x01\x02\x01\uffff\x01"+
            "\x07\x01\uffff\x09\x07\x22\uffff\x03\x07\x01\uffff\x08\x07\x02"+
            "\x02\x02\x07\x02\uffff\x01\x07",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA120_eot = DFA.UnpackEncodedString(DFA120_eotS);
    static readonly short[] DFA120_eof = DFA.UnpackEncodedString(DFA120_eofS);
    static readonly char[] DFA120_min = DFA.UnpackEncodedStringToUnsignedChars(DFA120_minS);
    static readonly char[] DFA120_max = DFA.UnpackEncodedStringToUnsignedChars(DFA120_maxS);
    static readonly short[] DFA120_accept = DFA.UnpackEncodedString(DFA120_acceptS);
    static readonly short[] DFA120_special = DFA.UnpackEncodedString(DFA120_specialS);
    static readonly short[][] DFA120_transition = DFA.UnpackEncodedStringArray(DFA120_transitionS);

    protected class DFA120 : DFA
    {
        public DFA120(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 942:14: ( ( LineTerminator )* statement )*"; }
        }

    }


    protected internal int DFA120_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA120_30 = input.LA(1);

                   	 
                   	int index120_30 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred183_AS3()) ) { s = 7; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index120_30);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 120, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA119_eotS =
        "\x18\uffff";
    const string DFA119_eofS =
        "\x18\uffff";
    const string DFA119_minS =
        "\x01\x05\x17\uffff";
    const string DFA119_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA119_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA119_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA119_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA119_eot = DFA.UnpackEncodedString(DFA119_eotS);
    static readonly short[] DFA119_eof = DFA.UnpackEncodedString(DFA119_eofS);
    static readonly char[] DFA119_min = DFA.UnpackEncodedStringToUnsignedChars(DFA119_minS);
    static readonly char[] DFA119_max = DFA.UnpackEncodedStringToUnsignedChars(DFA119_maxS);
    static readonly short[] DFA119_accept = DFA.UnpackEncodedString(DFA119_acceptS);
    static readonly short[] DFA119_special = DFA.UnpackEncodedString(DFA119_specialS);
    static readonly short[][] DFA119_transition = DFA.UnpackEncodedStringArray(DFA119_transitionS);

    protected class DFA119 : DFA
    {
        public DFA119(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 942:15: ( LineTerminator )*"; }
        }

    }

    const string DFA124_eotS =
        "\x22\uffff";
    const string DFA124_eofS =
        "\x01\uffff\x01\x02\x20\uffff";
    const string DFA124_minS =
        "\x02\x05\x03\uffff\x01\x00\x1c\uffff";
    const string DFA124_maxS =
        "\x01\x5a\x01\x6b\x03\uffff\x01\x00\x1c\uffff";
    const string DFA124_acceptS =
        "\x02\uffff\x01\x02\x01\x01\x1e\uffff";
    const string DFA124_specialS =
        "\x05\uffff\x01\x00\x1c\uffff}>";
    static readonly string[] DFA124_transitionS = {
            "\x01\x01\x21\uffff\x01\x03\x32\uffff\x01\x02",
            "\x01\x05\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x04"+
            "\x02\x01\x03\x01\uffff\x02\x02\x01\uffff\x01\x02\x01\uffff\x09"+
            "\x02\x22\uffff\x10\x02\x02\uffff\x01\x02",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA124_eot = DFA.UnpackEncodedString(DFA124_eotS);
    static readonly short[] DFA124_eof = DFA.UnpackEncodedString(DFA124_eofS);
    static readonly char[] DFA124_min = DFA.UnpackEncodedStringToUnsignedChars(DFA124_minS);
    static readonly char[] DFA124_max = DFA.UnpackEncodedStringToUnsignedChars(DFA124_maxS);
    static readonly short[] DFA124_accept = DFA.UnpackEncodedString(DFA124_acceptS);
    static readonly short[] DFA124_special = DFA.UnpackEncodedString(DFA124_specialS);
    static readonly short[][] DFA124_transition = DFA.UnpackEncodedStringArray(DFA124_transitionS);

    protected class DFA124 : DFA
    {
        public DFA124(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 950:24: ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration )*"; }
        }

    }


    protected internal int DFA124_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA124_5 = input.LA(1);

                   	 
                   	int index124_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred188_AS3()) ) { s = 3; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index124_5);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 124, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA130_eotS =
        "\x27\uffff";
    const string DFA130_eofS =
        "\x02\x03\x25\uffff";
    const string DFA130_minS =
        "\x02\x05\x06\uffff\x01\x00\x1e\uffff";
    const string DFA130_maxS =
        "\x01\x5a\x01\x6b\x06\uffff\x01\x00\x1e\uffff";
    const string DFA130_acceptS =
        "\x02\uffff\x01\x01\x01\x02\x23\uffff";
    const string DFA130_specialS =
        "\x08\uffff\x01\x00\x1e\uffff}>";
    static readonly string[] DFA130_transitionS = {
            "\x01\x01\x21\uffff\x01\x03\x03\uffff\x01\x02\x21\uffff\x01"+
            "\x03\x0c\uffff\x01\x03",
            "\x01\x08\x06\uffff\x01\x03\x05\uffff\x04\x03\x0d\uffff\x05"+
            "\x03\x01\uffff\x02\x03\x01\x02\x01\x03\x01\uffff\x09\x03\x16"+
            "\uffff\x01\x03\x0b\uffff\x10\x03\x02\uffff\x01\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA130_eot = DFA.UnpackEncodedString(DFA130_eotS);
    static readonly short[] DFA130_eof = DFA.UnpackEncodedString(DFA130_eofS);
    static readonly char[] DFA130_min = DFA.UnpackEncodedStringToUnsignedChars(DFA130_minS);
    static readonly char[] DFA130_max = DFA.UnpackEncodedStringToUnsignedChars(DFA130_maxS);
    static readonly short[] DFA130_accept = DFA.UnpackEncodedString(DFA130_acceptS);
    static readonly short[] DFA130_special = DFA.UnpackEncodedString(DFA130_specialS);
    static readonly short[][] DFA130_transition = DFA.UnpackEncodedStringArray(DFA130_transitionS);

    protected class DFA130 : DFA
    {
        public DFA130(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;

        }

        override public string Description
        {
            get { return "958:15: ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )?"; }
        }

    }


    protected internal int DFA130_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA130_8 = input.LA(1);

                   	 
                   	int index130_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred194_AS3()) ) { s = 2; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index130_8);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 130, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA131_eotS =
        "\x26\uffff";
    const string DFA131_eofS =
        "\x01\x01\x25\uffff";
    const string DFA131_minS =
        "\x01\x05\x01\uffff\x01\x00\x23\uffff";
    const string DFA131_maxS =
        "\x01\x5a\x01\uffff\x01\x00\x23\uffff";
    const string DFA131_acceptS =
        "\x01\uffff\x01\x02\x23\uffff\x01\x01";
    const string DFA131_specialS =
        "\x02\uffff\x01\x00\x23\uffff}>";
    static readonly string[] DFA131_transitionS = {
            "\x01\x02\x21\uffff\x01\x01\x25\uffff\x01\x01\x0c\uffff\x01"+
            "\x01",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA131_eot = DFA.UnpackEncodedString(DFA131_eotS);
    static readonly short[] DFA131_eof = DFA.UnpackEncodedString(DFA131_eofS);
    static readonly char[] DFA131_min = DFA.UnpackEncodedStringToUnsignedChars(DFA131_minS);
    static readonly char[] DFA131_max = DFA.UnpackEncodedStringToUnsignedChars(DFA131_maxS);
    static readonly short[] DFA131_accept = DFA.UnpackEncodedString(DFA131_acceptS);
    static readonly short[] DFA131_special = DFA.UnpackEncodedString(DFA131_specialS);
    static readonly short[][] DFA131_transition = DFA.UnpackEncodedStringArray(DFA131_transitionS);

    protected class DFA131 : DFA
    {
        public DFA131(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 958:65: ( LineTerminator )*"; }
        }

    }


    protected internal int DFA131_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA131_2 = input.LA(1);

                   	 
                   	int index131_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred195_AS3()) ) { s = 37; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index131_2);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 131, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA135_eotS =
        "\x0f\uffff";
    const string DFA135_eofS =
        "\x02\x03\x0d\uffff";
    const string DFA135_minS =
        "\x02\x05\x07\uffff\x01\x00\x05\uffff";
    const string DFA135_maxS =
        "\x02\x5a\x07\uffff\x01\x00\x05\uffff";
    const string DFA135_acceptS =
        "\x02\uffff\x01\x01\x01\x02\x0b\uffff";
    const string DFA135_specialS =
        "\x09\uffff\x01\x00\x05\uffff}>";
    static readonly string[] DFA135_transitionS = {
            "\x01\x01\x21\uffff\x01\x03\x03\uffff\x01\x02\x16\uffff\x01"+
            "\x03\x0a\uffff\x01\x03\x0c\uffff\x01\x03",
            "\x01\x09\x21\uffff\x01\x03\x03\uffff\x01\x02\x16\uffff\x01"+
            "\x03\x0a\uffff\x01\x03\x0c\uffff\x01\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA135_eot = DFA.UnpackEncodedString(DFA135_eotS);
    static readonly short[] DFA135_eof = DFA.UnpackEncodedString(DFA135_eofS);
    static readonly char[] DFA135_min = DFA.UnpackEncodedStringToUnsignedChars(DFA135_minS);
    static readonly char[] DFA135_max = DFA.UnpackEncodedStringToUnsignedChars(DFA135_maxS);
    static readonly short[] DFA135_accept = DFA.UnpackEncodedString(DFA135_acceptS);
    static readonly short[] DFA135_special = DFA.UnpackEncodedString(DFA135_specialS);
    static readonly short[][] DFA135_transition = DFA.UnpackEncodedStringArray(DFA135_transitionS);

    protected class DFA135 : DFA
    {
        public DFA135(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;

        }

        override public string Description
        {
            get { return "962:15: ( ( LineTerminator )* ':' ( LineTerminator )* Identifier )?"; }
        }

    }


    protected internal int DFA135_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA135_9 = input.LA(1);

                   	 
                   	int index135_9 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred199_AS3()) ) { s = 2; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index135_9);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 135, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA136_eotS =
        "\x0e\uffff";
    const string DFA136_eofS =
        "\x01\x01\x0d\uffff";
    const string DFA136_minS =
        "\x01\x05\x01\uffff\x01\x00\x0b\uffff";
    const string DFA136_maxS =
        "\x01\x5a\x01\uffff\x01\x00\x0b\uffff";
    const string DFA136_acceptS =
        "\x01\uffff\x01\x02\x0b\uffff\x01\x01";
    const string DFA136_specialS =
        "\x02\uffff\x01\x00\x0b\uffff}>";
    static readonly string[] DFA136_transitionS = {
            "\x01\x02\x21\uffff\x01\x01\x1a\uffff\x01\x01\x0a\uffff\x01"+
            "\x01\x0c\uffff\x01\x01",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA136_eot = DFA.UnpackEncodedString(DFA136_eotS);
    static readonly short[] DFA136_eof = DFA.UnpackEncodedString(DFA136_eofS);
    static readonly char[] DFA136_min = DFA.UnpackEncodedStringToUnsignedChars(DFA136_minS);
    static readonly char[] DFA136_max = DFA.UnpackEncodedStringToUnsignedChars(DFA136_maxS);
    static readonly short[] DFA136_accept = DFA.UnpackEncodedString(DFA136_acceptS);
    static readonly short[] DFA136_special = DFA.UnpackEncodedString(DFA136_specialS);
    static readonly short[][] DFA136_transition = DFA.UnpackEncodedStringArray(DFA136_transitionS);

    protected class DFA136 : DFA
    {
        public DFA136(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 962:65: ( LineTerminator )*"; }
        }

    }


    protected internal int DFA136_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA136_2 = input.LA(1);

                   	 
                   	int index136_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred200_AS3()) ) { s = 13; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index136_2);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 136, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA138_eotS =
        "\x0b\uffff";
    const string DFA138_eofS =
        "\x0b\uffff";
    const string DFA138_minS =
        "\x01\x05\x0a\uffff";
    const string DFA138_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA138_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA138_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA138_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA138_eot = DFA.UnpackEncodedString(DFA138_eotS);
    static readonly short[] DFA138_eof = DFA.UnpackEncodedString(DFA138_eofS);
    static readonly char[] DFA138_min = DFA.UnpackEncodedStringToUnsignedChars(DFA138_minS);
    static readonly char[] DFA138_max = DFA.UnpackEncodedStringToUnsignedChars(DFA138_maxS);
    static readonly short[] DFA138_accept = DFA.UnpackEncodedString(DFA138_acceptS);
    static readonly short[] DFA138_special = DFA.UnpackEncodedString(DFA138_specialS);
    static readonly short[][] DFA138_transition = DFA.UnpackEncodedStringArray(DFA138_transitionS);

    protected class DFA138 : DFA
    {
        public DFA138(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 966:8: ( LineTerminator )*"; }
        }

    }

    const string DFA139_eotS =
        "\x0b\uffff";
    const string DFA139_eofS =
        "\x0b\uffff";
    const string DFA139_minS =
        "\x01\x05\x0a\uffff";
    const string DFA139_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA139_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA139_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA139_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA139_eot = DFA.UnpackEncodedString(DFA139_eotS);
    static readonly short[] DFA139_eof = DFA.UnpackEncodedString(DFA139_eofS);
    static readonly char[] DFA139_min = DFA.UnpackEncodedStringToUnsignedChars(DFA139_minS);
    static readonly char[] DFA139_max = DFA.UnpackEncodedStringToUnsignedChars(DFA139_maxS);
    static readonly short[] DFA139_accept = DFA.UnpackEncodedString(DFA139_acceptS);
    static readonly short[] DFA139_special = DFA.UnpackEncodedString(DFA139_specialS);
    static readonly short[][] DFA139_transition = DFA.UnpackEncodedStringArray(DFA139_transitionS);

    protected class DFA139 : DFA
    {
        public DFA139(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 970:8: ( LineTerminator )*"; }
        }

    }

    const string DFA141_eotS =
        "\x3c\uffff";
    const string DFA141_eofS =
        "\x01\x01\x3b\uffff";
    const string DFA141_minS =
        "\x01\x05\x03\uffff\x01\x00\x37\uffff";
    const string DFA141_maxS =
        "\x01\x6b\x03\uffff\x01\x00\x37\uffff";
    const string DFA141_acceptS =
        "\x01\uffff\x01\x01\x39\uffff\x01\x02";
    const string DFA141_specialS =
        "\x04\uffff\x01\x00\x37\uffff}>";
    static readonly string[] DFA141_transitionS = {
            "\x01\x01\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x04"+
            "\x01\x02\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x09\x01\x22"+
            "\uffff\x01\x01\x01\x04\x0e\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA141_eot = DFA.UnpackEncodedString(DFA141_eotS);
    static readonly short[] DFA141_eof = DFA.UnpackEncodedString(DFA141_eofS);
    static readonly char[] DFA141_min = DFA.UnpackEncodedStringToUnsignedChars(DFA141_minS);
    static readonly char[] DFA141_max = DFA.UnpackEncodedStringToUnsignedChars(DFA141_maxS);
    static readonly short[] DFA141_accept = DFA.UnpackEncodedString(DFA141_acceptS);
    static readonly short[] DFA141_special = DFA.UnpackEncodedString(DFA141_specialS);
    static readonly short[][] DFA141_transition = DFA.UnpackEncodedStringArray(DFA141_transitionS);

    protected class DFA141 : DFA
    {
        public DFA141(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;

        }

        override public string Description
        {
            get { return "978:15: ( ( LineTerminator )* | ';' )"; }
        }

    }


    protected internal int DFA141_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA141_4 = input.LA(1);

                   	 
                   	int index141_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred205_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 59; }

                   	 
                   	input.Seek(index141_4);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 141, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA140_eotS =
        "\x3c\uffff";
    const string DFA140_eofS =
        "\x01\x02\x3b\uffff";
    const string DFA140_minS =
        "\x01\x05\x01\x00\x3a\uffff";
    const string DFA140_maxS =
        "\x01\x6b\x01\x00\x3a\uffff";
    const string DFA140_acceptS =
        "\x02\uffff\x01\x02\x38\uffff\x01\x01";
    const string DFA140_specialS =
        "\x01\uffff\x01\x00\x3a\uffff}>";
    static readonly string[] DFA140_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x04"+
            "\x02\x02\uffff\x02\x02\x01\uffff\x01\x02\x01\uffff\x09\x02\x22"+
            "\uffff\x10\x02\x02\uffff\x01\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA140_eot = DFA.UnpackEncodedString(DFA140_eotS);
    static readonly short[] DFA140_eof = DFA.UnpackEncodedString(DFA140_eofS);
    static readonly char[] DFA140_min = DFA.UnpackEncodedStringToUnsignedChars(DFA140_minS);
    static readonly char[] DFA140_max = DFA.UnpackEncodedStringToUnsignedChars(DFA140_maxS);
    static readonly short[] DFA140_accept = DFA.UnpackEncodedString(DFA140_acceptS);
    static readonly short[] DFA140_special = DFA.UnpackEncodedString(DFA140_specialS);
    static readonly short[][] DFA140_transition = DFA.UnpackEncodedStringArray(DFA140_transitionS);

    protected class DFA140 : DFA
    {
        public DFA140(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 978:16: ( LineTerminator )*"; }
        }

    }


    protected internal int DFA140_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA140_1 = input.LA(1);

                   	 
                   	int index140_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred204_AS3()) ) { s = 59; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index140_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 140, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA143_eotS =
        "\x0b\uffff";
    const string DFA143_eofS =
        "\x0b\uffff";
    const string DFA143_minS =
        "\x01\x05\x0a\uffff";
    const string DFA143_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA143_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA143_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA143_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA143_eot = DFA.UnpackEncodedString(DFA143_eotS);
    static readonly short[] DFA143_eof = DFA.UnpackEncodedString(DFA143_eofS);
    static readonly char[] DFA143_min = DFA.UnpackEncodedStringToUnsignedChars(DFA143_minS);
    static readonly char[] DFA143_max = DFA.UnpackEncodedStringToUnsignedChars(DFA143_maxS);
    static readonly short[] DFA143_accept = DFA.UnpackEncodedString(DFA143_acceptS);
    static readonly short[] DFA143_special = DFA.UnpackEncodedString(DFA143_specialS);
    static readonly short[][] DFA143_transition = DFA.UnpackEncodedStringArray(DFA143_transitionS);

    protected class DFA143 : DFA
    {
        public DFA143(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 982:29: ( LineTerminator )*"; }
        }

    }

    const string DFA145_eotS =
        "\x18\uffff";
    const string DFA145_eofS =
        "\x18\uffff";
    const string DFA145_minS =
        "\x01\x05\x17\uffff";
    const string DFA145_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA145_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA145_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA145_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA145_eot = DFA.UnpackEncodedString(DFA145_eotS);
    static readonly short[] DFA145_eof = DFA.UnpackEncodedString(DFA145_eofS);
    static readonly char[] DFA145_min = DFA.UnpackEncodedStringToUnsignedChars(DFA145_minS);
    static readonly char[] DFA145_max = DFA.UnpackEncodedStringToUnsignedChars(DFA145_maxS);
    static readonly short[] DFA145_accept = DFA.UnpackEncodedString(DFA145_acceptS);
    static readonly short[] DFA145_special = DFA.UnpackEncodedString(DFA145_specialS);
    static readonly short[][] DFA145_transition = DFA.UnpackEncodedStringArray(DFA145_transitionS);

    protected class DFA145 : DFA
    {
        public DFA145(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 982:76: ( LineTerminator )*"; }
        }

    }

    const string DFA148_eotS =
        "\x53\uffff";
    const string DFA148_eofS =
        "\x01\x03\x52\uffff";
    const string DFA148_minS =
        "\x01\x05\x02\x00\x50\uffff";
    const string DFA148_maxS =
        "\x01\x6b\x02\x00\x50\uffff";
    const string DFA148_acceptS =
        "\x03\uffff\x01\x02\x37\uffff\x01\x01\x17\uffff";
    const string DFA148_specialS =
        "\x01\uffff\x01\x00\x01\x01\x50\uffff}>";
    static readonly string[] DFA148_transitionS = {
            "\x01\x01\x06\uffff\x01\x03\x05\uffff\x04\x03\x0d\uffff\x04"+
            "\x03\x02\uffff\x02\x03\x01\uffff\x01\x03\x01\uffff\x09\x03\x22"+
            "\uffff\x03\x03\x01\x02\x0c\x03\x02\uffff\x01\x03",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA148_eot = DFA.UnpackEncodedString(DFA148_eotS);
    static readonly short[] DFA148_eof = DFA.UnpackEncodedString(DFA148_eofS);
    static readonly char[] DFA148_min = DFA.UnpackEncodedStringToUnsignedChars(DFA148_minS);
    static readonly char[] DFA148_max = DFA.UnpackEncodedStringToUnsignedChars(DFA148_maxS);
    static readonly short[] DFA148_accept = DFA.UnpackEncodedString(DFA148_acceptS);
    static readonly short[] DFA148_special = DFA.UnpackEncodedString(DFA148_specialS);
    static readonly short[][] DFA148_transition = DFA.UnpackEncodedStringArray(DFA148_transitionS);

    protected class DFA148 : DFA
    {
        public DFA148(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;

        }

        override public string Description
        {
            get { return "982:102: ( ( LineTerminator )* 'else' ( LineTerminator )* statement )?"; }
        }

    }


    protected internal int DFA148_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA148_1 = input.LA(1);

                   	 
                   	int index148_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred212_AS3()) ) { s = 59; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index148_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA148_2 = input.LA(1);

                   	 
                   	int index148_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred212_AS3()) ) { s = 59; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index148_2);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 148, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA147_eotS =
        "\x18\uffff";
    const string DFA147_eofS =
        "\x18\uffff";
    const string DFA147_minS =
        "\x01\x05\x17\uffff";
    const string DFA147_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA147_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA147_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA147_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA147_eot = DFA.UnpackEncodedString(DFA147_eotS);
    static readonly short[] DFA147_eof = DFA.UnpackEncodedString(DFA147_eofS);
    static readonly char[] DFA147_min = DFA.UnpackEncodedStringToUnsignedChars(DFA147_minS);
    static readonly char[] DFA147_max = DFA.UnpackEncodedStringToUnsignedChars(DFA147_maxS);
    static readonly short[] DFA147_accept = DFA.UnpackEncodedString(DFA147_acceptS);
    static readonly short[] DFA147_special = DFA.UnpackEncodedString(DFA147_specialS);
    static readonly short[][] DFA147_transition = DFA.UnpackEncodedStringArray(DFA147_transitionS);

    protected class DFA147 : DFA
    {
        public DFA147(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 982:126: ( LineTerminator )*"; }
        }

    }

    const string DFA150_eotS =
        "\x18\uffff";
    const string DFA150_eofS =
        "\x18\uffff";
    const string DFA150_minS =
        "\x01\x05\x17\uffff";
    const string DFA150_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA150_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA150_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA150_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA150_eot = DFA.UnpackEncodedString(DFA150_eotS);
    static readonly short[] DFA150_eof = DFA.UnpackEncodedString(DFA150_eofS);
    static readonly char[] DFA150_min = DFA.UnpackEncodedStringToUnsignedChars(DFA150_minS);
    static readonly char[] DFA150_max = DFA.UnpackEncodedStringToUnsignedChars(DFA150_maxS);
    static readonly short[] DFA150_accept = DFA.UnpackEncodedString(DFA150_acceptS);
    static readonly short[] DFA150_special = DFA.UnpackEncodedString(DFA150_specialS);
    static readonly short[][] DFA150_transition = DFA.UnpackEncodedStringArray(DFA150_transitionS);

    protected class DFA150 : DFA
    {
        public DFA150(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 993:9: ( LineTerminator )*"; }
        }

    }

    const string DFA154_eotS =
        "\x0b\uffff";
    const string DFA154_eofS =
        "\x0b\uffff";
    const string DFA154_minS =
        "\x01\x05\x0a\uffff";
    const string DFA154_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA154_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA154_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA154_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA154_eot = DFA.UnpackEncodedString(DFA154_eotS);
    static readonly short[] DFA154_eof = DFA.UnpackEncodedString(DFA154_eofS);
    static readonly char[] DFA154_min = DFA.UnpackEncodedStringToUnsignedChars(DFA154_minS);
    static readonly char[] DFA154_max = DFA.UnpackEncodedStringToUnsignedChars(DFA154_maxS);
    static readonly short[] DFA154_accept = DFA.UnpackEncodedString(DFA154_acceptS);
    static readonly short[] DFA154_special = DFA.UnpackEncodedString(DFA154_specialS);
    static readonly short[][] DFA154_transition = DFA.UnpackEncodedStringArray(DFA154_transitionS);

    protected class DFA154 : DFA
    {
        public DFA154(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 997:32: ( LineTerminator )*"; }
        }

    }

    const string DFA156_eotS =
        "\x18\uffff";
    const string DFA156_eofS =
        "\x18\uffff";
    const string DFA156_minS =
        "\x01\x05\x17\uffff";
    const string DFA156_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA156_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA156_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA156_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA156_eot = DFA.UnpackEncodedString(DFA156_eotS);
    static readonly short[] DFA156_eof = DFA.UnpackEncodedString(DFA156_eofS);
    static readonly char[] DFA156_min = DFA.UnpackEncodedStringToUnsignedChars(DFA156_minS);
    static readonly char[] DFA156_max = DFA.UnpackEncodedStringToUnsignedChars(DFA156_maxS);
    static readonly short[] DFA156_accept = DFA.UnpackEncodedString(DFA156_acceptS);
    static readonly short[] DFA156_special = DFA.UnpackEncodedString(DFA156_specialS);
    static readonly short[][] DFA156_transition = DFA.UnpackEncodedStringArray(DFA156_transitionS);

    protected class DFA156 : DFA
    {
        public DFA156(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 997:79: ( LineTerminator )*"; }
        }

    }

    const string DFA159_eotS =
        "\x19\uffff";
    const string DFA159_eofS =
        "\x19\uffff";
    const string DFA159_minS =
        "\x02\x05\x0c\uffff\x01\x00\x0a\uffff";
    const string DFA159_maxS =
        "\x02\x6b\x0c\uffff\x01\x00\x0a\uffff";
    const string DFA159_acceptS =
        "\x02\uffff\x01\x01\x09\uffff\x01\x02\x0c\uffff";
    const string DFA159_specialS =
        "\x0e\uffff\x01\x00\x0a\uffff}>";
    static readonly string[] DFA159_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x02"+
            "\x02\x01\uffff\x01\x02\x02\uffff\x01\x02\x02\uffff\x01\x02\x01"+
            "\uffff\x09\x02\x22\uffff\x01\x02\x01\x0c\x10\uffff\x01\x02",
            "\x01\x0e\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x02"+
            "\x02\x01\uffff\x01\x02\x02\uffff\x01\x02\x02\uffff\x01\x02\x01"+
            "\uffff\x09\x02\x22\uffff\x01\x02\x01\x0c\x10\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA159_eot = DFA.UnpackEncodedString(DFA159_eotS);
    static readonly short[] DFA159_eof = DFA.UnpackEncodedString(DFA159_eofS);
    static readonly char[] DFA159_min = DFA.UnpackEncodedStringToUnsignedChars(DFA159_minS);
    static readonly char[] DFA159_max = DFA.UnpackEncodedStringToUnsignedChars(DFA159_maxS);
    static readonly short[] DFA159_accept = DFA.UnpackEncodedString(DFA159_acceptS);
    static readonly short[] DFA159_special = DFA.UnpackEncodedString(DFA159_specialS);
    static readonly short[][] DFA159_transition = DFA.UnpackEncodedStringArray(DFA159_transitionS);

    protected class DFA159 : DFA
    {
        public DFA159(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;

        }

        override public string Description
        {
            get { return "1001:30: ( ( LineTerminator )* forStatementInitialiserPart )?"; }
        }

    }


    protected internal int DFA159_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA159_14 = input.LA(1);

                   	 
                   	int index159_14 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred226_AS3()) ) { s = 2; }

                   	else if ( (true) ) { s = 12; }

                   	 
                   	input.Seek(index159_14);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 159, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA158_eotS =
        "\x0c\uffff";
    const string DFA158_eofS =
        "\x0c\uffff";
    const string DFA158_minS =
        "\x01\x05\x0b\uffff";
    const string DFA158_maxS =
        "\x01\x6b\x0b\uffff";
    const string DFA158_acceptS =
        "\x01\uffff\x01\x02\x09\uffff\x01\x01";
    const string DFA158_specialS =
        "\x0c\uffff}>";
    static readonly string[] DFA158_transitionS = {
            "\x01\x0b\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x01\x01\x11\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA158_eot = DFA.UnpackEncodedString(DFA158_eotS);
    static readonly short[] DFA158_eof = DFA.UnpackEncodedString(DFA158_eofS);
    static readonly char[] DFA158_min = DFA.UnpackEncodedStringToUnsignedChars(DFA158_minS);
    static readonly char[] DFA158_max = DFA.UnpackEncodedStringToUnsignedChars(DFA158_maxS);
    static readonly short[] DFA158_accept = DFA.UnpackEncodedString(DFA158_acceptS);
    static readonly short[] DFA158_special = DFA.UnpackEncodedString(DFA158_specialS);
    static readonly short[][] DFA158_transition = DFA.UnpackEncodedStringArray(DFA158_transitionS);

    protected class DFA158 : DFA
    {
        public DFA158(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1001:31: ( LineTerminator )*"; }
        }

    }

    const string DFA162_eotS =
        "\x17\uffff";
    const string DFA162_eofS =
        "\x17\uffff";
    const string DFA162_minS =
        "\x02\x05\x0b\uffff\x01\x00\x09\uffff";
    const string DFA162_maxS =
        "\x02\x6b\x0b\uffff\x01\x00\x09\uffff";
    const string DFA162_acceptS =
        "\x02\uffff\x01\x01\x08\uffff\x01\x02\x0b\uffff";
    const string DFA162_specialS =
        "\x0d\uffff\x01\x00\x09\uffff}>";
    static readonly string[] DFA162_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x02"+
            "\x02\x01\uffff\x01\x02\x02\uffff\x01\x02\x02\uffff\x01\x02\x01"+
            "\uffff\x09\x02\x23\uffff\x01\x0b\x10\uffff\x01\x02",
            "\x01\x0d\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x02"+
            "\x02\x01\uffff\x01\x02\x02\uffff\x01\x02\x02\uffff\x01\x02\x01"+
            "\uffff\x09\x02\x23\uffff\x01\x0b\x10\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA162_eot = DFA.UnpackEncodedString(DFA162_eotS);
    static readonly short[] DFA162_eof = DFA.UnpackEncodedString(DFA162_eofS);
    static readonly char[] DFA162_min = DFA.UnpackEncodedStringToUnsignedChars(DFA162_minS);
    static readonly char[] DFA162_max = DFA.UnpackEncodedStringToUnsignedChars(DFA162_maxS);
    static readonly short[] DFA162_accept = DFA.UnpackEncodedString(DFA162_acceptS);
    static readonly short[] DFA162_special = DFA.UnpackEncodedString(DFA162_specialS);
    static readonly short[][] DFA162_transition = DFA.UnpackEncodedStringArray(DFA162_transitionS);

    protected class DFA162 : DFA
    {
        public DFA162(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;

        }

        override public string Description
        {
            get { return "1001:97: ( ( LineTerminator )* expression )?"; }
        }

    }


    protected internal int DFA162_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA162_13 = input.LA(1);

                   	 
                   	int index162_13 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred229_AS3()) ) { s = 2; }

                   	else if ( (true) ) { s = 11; }

                   	 
                   	input.Seek(index162_13);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 162, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA161_eotS =
        "\x0b\uffff";
    const string DFA161_eofS =
        "\x0b\uffff";
    const string DFA161_minS =
        "\x01\x05\x0a\uffff";
    const string DFA161_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA161_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA161_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA161_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA161_eot = DFA.UnpackEncodedString(DFA161_eotS);
    static readonly short[] DFA161_eof = DFA.UnpackEncodedString(DFA161_eofS);
    static readonly char[] DFA161_min = DFA.UnpackEncodedStringToUnsignedChars(DFA161_minS);
    static readonly char[] DFA161_max = DFA.UnpackEncodedStringToUnsignedChars(DFA161_maxS);
    static readonly short[] DFA161_accept = DFA.UnpackEncodedString(DFA161_acceptS);
    static readonly short[] DFA161_special = DFA.UnpackEncodedString(DFA161_specialS);
    static readonly short[][] DFA161_transition = DFA.UnpackEncodedStringArray(DFA161_transitionS);

    protected class DFA161 : DFA
    {
        public DFA161(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1001:98: ( LineTerminator )*"; }
        }

    }

    const string DFA165_eotS =
        "\x17\uffff";
    const string DFA165_eofS =
        "\x17\uffff";
    const string DFA165_minS =
        "\x02\x05\x0b\uffff\x01\x00\x09\uffff";
    const string DFA165_maxS =
        "\x02\x6b\x0b\uffff\x01\x00\x09\uffff";
    const string DFA165_acceptS =
        "\x02\uffff\x01\x01\x08\uffff\x01\x02\x0b\uffff";
    const string DFA165_specialS =
        "\x0d\uffff\x01\x00\x09\uffff}>";
    static readonly string[] DFA165_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x02"+
            "\x02\x01\x0b\x01\x02\x02\uffff\x01\x02\x02\uffff\x01\x02\x01"+
            "\uffff\x09\x02\x34\uffff\x01\x02",
            "\x01\x0d\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x02"+
            "\x02\x01\x0b\x01\x02\x02\uffff\x01\x02\x02\uffff\x01\x02\x01"+
            "\uffff\x09\x02\x34\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA165_eot = DFA.UnpackEncodedString(DFA165_eotS);
    static readonly short[] DFA165_eof = DFA.UnpackEncodedString(DFA165_eofS);
    static readonly char[] DFA165_min = DFA.UnpackEncodedStringToUnsignedChars(DFA165_minS);
    static readonly char[] DFA165_max = DFA.UnpackEncodedStringToUnsignedChars(DFA165_maxS);
    static readonly short[] DFA165_accept = DFA.UnpackEncodedString(DFA165_acceptS);
    static readonly short[] DFA165_special = DFA.UnpackEncodedString(DFA165_specialS);
    static readonly short[][] DFA165_transition = DFA.UnpackEncodedStringArray(DFA165_transitionS);

    protected class DFA165 : DFA
    {
        public DFA165(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;

        }

        override public string Description
        {
            get { return "1001:147: ( ( LineTerminator )* expression )?"; }
        }

    }


    protected internal int DFA165_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA165_13 = input.LA(1);

                   	 
                   	int index165_13 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred232_AS3()) ) { s = 2; }

                   	else if ( (true) ) { s = 11; }

                   	 
                   	input.Seek(index165_13);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 165, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA164_eotS =
        "\x0b\uffff";
    const string DFA164_eofS =
        "\x0b\uffff";
    const string DFA164_minS =
        "\x01\x05\x0a\uffff";
    const string DFA164_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA164_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA164_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA164_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA164_eot = DFA.UnpackEncodedString(DFA164_eotS);
    static readonly short[] DFA164_eof = DFA.UnpackEncodedString(DFA164_eofS);
    static readonly char[] DFA164_min = DFA.UnpackEncodedStringToUnsignedChars(DFA164_minS);
    static readonly char[] DFA164_max = DFA.UnpackEncodedStringToUnsignedChars(DFA164_maxS);
    static readonly short[] DFA164_accept = DFA.UnpackEncodedString(DFA164_acceptS);
    static readonly short[] DFA164_special = DFA.UnpackEncodedString(DFA164_specialS);
    static readonly short[][] DFA164_transition = DFA.UnpackEncodedStringArray(DFA164_transitionS);

    protected class DFA164 : DFA
    {
        public DFA164(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1001:148: ( LineTerminator )*"; }
        }

    }

    const string DFA167_eotS =
        "\x18\uffff";
    const string DFA167_eofS =
        "\x18\uffff";
    const string DFA167_minS =
        "\x01\x05\x17\uffff";
    const string DFA167_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA167_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA167_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA167_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA167_eot = DFA.UnpackEncodedString(DFA167_eotS);
    static readonly short[] DFA167_eof = DFA.UnpackEncodedString(DFA167_eofS);
    static readonly char[] DFA167_min = DFA.UnpackEncodedStringToUnsignedChars(DFA167_minS);
    static readonly char[] DFA167_max = DFA.UnpackEncodedStringToUnsignedChars(DFA167_maxS);
    static readonly short[] DFA167_accept = DFA.UnpackEncodedString(DFA167_acceptS);
    static readonly short[] DFA167_special = DFA.UnpackEncodedString(DFA167_specialS);
    static readonly short[][] DFA167_transition = DFA.UnpackEncodedStringArray(DFA167_transitionS);

    protected class DFA167 : DFA
    {
        public DFA167(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1001:197: ( LineTerminator )*"; }
        }

    }

    const string DFA169_eotS =
        "\x0b\uffff";
    const string DFA169_eofS =
        "\x0b\uffff";
    const string DFA169_minS =
        "\x01\x0c\x0a\uffff";
    const string DFA169_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA169_acceptS =
        "\x01\uffff\x01\x01\x08\uffff\x01\x02";
    const string DFA169_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA169_transitionS = {
            "\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02\x01\x01\uffff\x01"+
            "\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01\uffff\x09\x01\x22"+
            "\uffff\x01\x0a\x11\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA169_eot = DFA.UnpackEncodedString(DFA169_eotS);
    static readonly short[] DFA169_eof = DFA.UnpackEncodedString(DFA169_eofS);
    static readonly char[] DFA169_min = DFA.UnpackEncodedStringToUnsignedChars(DFA169_minS);
    static readonly char[] DFA169_max = DFA.UnpackEncodedStringToUnsignedChars(DFA169_maxS);
    static readonly short[] DFA169_accept = DFA.UnpackEncodedString(DFA169_acceptS);
    static readonly short[] DFA169_special = DFA.UnpackEncodedString(DFA169_specialS);
    static readonly short[][] DFA169_transition = DFA.UnpackEncodedStringArray(DFA169_transitionS);

    protected class DFA169 : DFA
    {
        public DFA169(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;

        }

        override public string Description
        {
            get { return "1004:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LineTerminator )* variableDeclarationListNoIn );"; }
        }

    }

    const string DFA171_eotS =
        "\x0b\uffff";
    const string DFA171_eofS =
        "\x0b\uffff";
    const string DFA171_minS =
        "\x01\x05\x0a\uffff";
    const string DFA171_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA171_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA171_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA171_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x2c"+
            "\uffff\x01\x01\x11\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA171_eot = DFA.UnpackEncodedString(DFA171_eotS);
    static readonly short[] DFA171_eof = DFA.UnpackEncodedString(DFA171_eofS);
    static readonly char[] DFA171_min = DFA.UnpackEncodedStringToUnsignedChars(DFA171_minS);
    static readonly char[] DFA171_max = DFA.UnpackEncodedStringToUnsignedChars(DFA171_maxS);
    static readonly short[] DFA171_accept = DFA.UnpackEncodedString(DFA171_acceptS);
    static readonly short[] DFA171_special = DFA.UnpackEncodedString(DFA171_specialS);
    static readonly short[][] DFA171_transition = DFA.UnpackEncodedStringArray(DFA171_transitionS);

    protected class DFA171 : DFA
    {
        public DFA171(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1010:30: ( LineTerminator )*"; }
        }

    }

    const string DFA173_eotS =
        "\x0b\uffff";
    const string DFA173_eofS =
        "\x0b\uffff";
    const string DFA173_minS =
        "\x01\x05\x0a\uffff";
    const string DFA173_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA173_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA173_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA173_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA173_eot = DFA.UnpackEncodedString(DFA173_eotS);
    static readonly short[] DFA173_eof = DFA.UnpackEncodedString(DFA173_eofS);
    static readonly char[] DFA173_min = DFA.UnpackEncodedStringToUnsignedChars(DFA173_minS);
    static readonly char[] DFA173_max = DFA.UnpackEncodedStringToUnsignedChars(DFA173_maxS);
    static readonly short[] DFA173_accept = DFA.UnpackEncodedString(DFA173_acceptS);
    static readonly short[] DFA173_special = DFA.UnpackEncodedString(DFA173_specialS);
    static readonly short[][] DFA173_transition = DFA.UnpackEncodedStringArray(DFA173_transitionS);

    protected class DFA173 : DFA
    {
        public DFA173(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = DFA173_eot;
            this.eof = DFA173_eof;
            this.min = DFA173_min;
            this.max = DFA173_max;
            this.accept = DFA173_accept;
            this.special = DFA173_special;
            this.transition = DFA173_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1010:97: ( LineTerminator )*"; }
        }

    }

    const string DFA175_eotS =
        "\x18\uffff";
    const string DFA175_eofS =
        "\x18\uffff";
    const string DFA175_minS =
        "\x01\x05\x17\uffff";
    const string DFA175_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA175_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA175_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA175_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA175_eot = DFA.UnpackEncodedString(DFA175_eotS);
    static readonly short[] DFA175_eof = DFA.UnpackEncodedString(DFA175_eofS);
    static readonly char[] DFA175_min = DFA.UnpackEncodedStringToUnsignedChars(DFA175_minS);
    static readonly char[] DFA175_max = DFA.UnpackEncodedStringToUnsignedChars(DFA175_maxS);
    static readonly short[] DFA175_accept = DFA.UnpackEncodedString(DFA175_acceptS);
    static readonly short[] DFA175_special = DFA.UnpackEncodedString(DFA175_specialS);
    static readonly short[][] DFA175_transition = DFA.UnpackEncodedStringArray(DFA175_transitionS);

    protected class DFA175 : DFA
    {
        public DFA175(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = DFA175_eot;
            this.eof = DFA175_eof;
            this.min = DFA175_min;
            this.max = DFA175_max;
            this.accept = DFA175_accept;
            this.special = DFA175_special;
            this.transition = DFA175_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1010:144: ( LineTerminator )*"; }
        }

    }

    const string DFA177_eotS =
        "\x0a\uffff";
    const string DFA177_eofS =
        "\x0a\uffff";
    const string DFA177_minS =
        "\x01\x0c\x09\uffff";
    const string DFA177_maxS =
        "\x01\x6b\x09\uffff";
    const string DFA177_acceptS =
        "\x01\uffff\x01\x01\x07\uffff\x01\x02";
    const string DFA177_specialS =
        "\x0a\uffff}>";
    static readonly string[] DFA177_transitionS = {
            "\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02\x01\x01\uffff\x01"+
            "\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x2c\uffff\x01\x09\x11"+
            "\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA177_eot = DFA.UnpackEncodedString(DFA177_eotS);
    static readonly short[] DFA177_eof = DFA.UnpackEncodedString(DFA177_eofS);
    static readonly char[] DFA177_min = DFA.UnpackEncodedStringToUnsignedChars(DFA177_minS);
    static readonly char[] DFA177_max = DFA.UnpackEncodedStringToUnsignedChars(DFA177_maxS);
    static readonly short[] DFA177_accept = DFA.UnpackEncodedString(DFA177_acceptS);
    static readonly short[] DFA177_special = DFA.UnpackEncodedString(DFA177_specialS);
    static readonly short[][] DFA177_transition = DFA.UnpackEncodedStringArray(DFA177_transitionS);

    protected class DFA177 : DFA
    {
        public DFA177(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = DFA177_eot;
            this.eof = DFA177_eof;
            this.min = DFA177_min;
            this.max = DFA177_max;
            this.accept = DFA177_accept;
            this.special = DFA177_special;
            this.transition = DFA177_transition;

        }

        override public string Description
        {
            get { return "1013:1: forInStatementInitialiserPart : ( leftHandSideExpression | 'var' ( LineTerminator )* variableDeclarationNoIn );"; }
        }

    }

    const string DFA180_eotS =
        "\x0b\uffff";
    const string DFA180_eofS =
        "\x0b\uffff";
    const string DFA180_minS =
        "\x01\x05\x0a\uffff";
    const string DFA180_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA180_acceptS =
        "\x01\uffff\x01\x01\x08\uffff\x01\x02";
    const string DFA180_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA180_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x23\uffff\x01\x0a\x10\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA180_eot = DFA.UnpackEncodedString(DFA180_eotS);
    static readonly short[] DFA180_eof = DFA.UnpackEncodedString(DFA180_eofS);
    static readonly char[] DFA180_min = DFA.UnpackEncodedStringToUnsignedChars(DFA180_minS);
    static readonly char[] DFA180_max = DFA.UnpackEncodedStringToUnsignedChars(DFA180_maxS);
    static readonly short[] DFA180_accept = DFA.UnpackEncodedString(DFA180_acceptS);
    static readonly short[] DFA180_special = DFA.UnpackEncodedString(DFA180_specialS);
    static readonly short[][] DFA180_transition = DFA.UnpackEncodedStringArray(DFA180_transitionS);

    protected class DFA180 : DFA
    {
        public DFA180(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;

        }

        override public string Description
        {
            get { return "1027:13: ( expression )?"; }
        }

    }

    const string DFA182_eotS =
        "\x0b\uffff";
    const string DFA182_eofS =
        "\x0b\uffff";
    const string DFA182_minS =
        "\x01\x05\x0a\uffff";
    const string DFA182_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA182_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA182_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA182_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA182_eot = DFA.UnpackEncodedString(DFA182_eotS);
    static readonly short[] DFA182_eof = DFA.UnpackEncodedString(DFA182_eofS);
    static readonly char[] DFA182_min = DFA.UnpackEncodedStringToUnsignedChars(DFA182_minS);
    static readonly char[] DFA182_max = DFA.UnpackEncodedStringToUnsignedChars(DFA182_maxS);
    static readonly short[] DFA182_accept = DFA.UnpackEncodedString(DFA182_acceptS);
    static readonly short[] DFA182_special = DFA.UnpackEncodedString(DFA182_specialS);
    static readonly short[][] DFA182_transition = DFA.UnpackEncodedStringArray(DFA182_transitionS);

    protected class DFA182 : DFA
    {
        public DFA182(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1031:31: ( LineTerminator )*"; }
        }

    }

    const string DFA184_eotS =
        "\x18\uffff";
    const string DFA184_eofS =
        "\x18\uffff";
    const string DFA184_minS =
        "\x01\x05\x17\uffff";
    const string DFA184_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA184_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA184_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA184_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA184_eot = DFA.UnpackEncodedString(DFA184_eotS);
    static readonly short[] DFA184_eof = DFA.UnpackEncodedString(DFA184_eofS);
    static readonly char[] DFA184_min = DFA.UnpackEncodedStringToUnsignedChars(DFA184_minS);
    static readonly char[] DFA184_max = DFA.UnpackEncodedStringToUnsignedChars(DFA184_maxS);
    static readonly short[] DFA184_accept = DFA.UnpackEncodedString(DFA184_acceptS);
    static readonly short[] DFA184_special = DFA.UnpackEncodedString(DFA184_specialS);
    static readonly short[][] DFA184_transition = DFA.UnpackEncodedStringArray(DFA184_transitionS);

    protected class DFA184 : DFA
    {
        public DFA184(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1031:78: ( LineTerminator )*"; }
        }

    }

    const string DFA186_eotS =
        "\x0b\uffff";
    const string DFA186_eofS =
        "\x0b\uffff";
    const string DFA186_minS =
        "\x01\x05\x0a\uffff";
    const string DFA186_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA186_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA186_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA186_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA186_eot = DFA.UnpackEncodedString(DFA186_eotS);
    static readonly short[] DFA186_eof = DFA.UnpackEncodedString(DFA186_eofS);
    static readonly char[] DFA186_min = DFA.UnpackEncodedStringToUnsignedChars(DFA186_minS);
    static readonly char[] DFA186_max = DFA.UnpackEncodedStringToUnsignedChars(DFA186_maxS);
    static readonly short[] DFA186_accept = DFA.UnpackEncodedString(DFA186_acceptS);
    static readonly short[] DFA186_special = DFA.UnpackEncodedString(DFA186_specialS);
    static readonly short[][] DFA186_transition = DFA.UnpackEncodedStringArray(DFA186_transitionS);

    protected class DFA186 : DFA
    {
        public DFA186(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = DFA186_eot;
            this.eof = DFA186_eof;
            this.min = DFA186_min;
            this.max = DFA186_max;
            this.accept = DFA186_accept;
            this.special = DFA186_special;
            this.transition = DFA186_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1035:33: ( LineTerminator )*"; }
        }

    }

    const string DFA196_eotS =
        "\x0b\uffff";
    const string DFA196_eofS =
        "\x0b\uffff";
    const string DFA196_minS =
        "\x01\x05\x0a\uffff";
    const string DFA196_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA196_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA196_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA196_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA196_eot = DFA.UnpackEncodedString(DFA196_eotS);
    static readonly short[] DFA196_eof = DFA.UnpackEncodedString(DFA196_eofS);
    static readonly char[] DFA196_min = DFA.UnpackEncodedStringToUnsignedChars(DFA196_minS);
    static readonly char[] DFA196_max = DFA.UnpackEncodedStringToUnsignedChars(DFA196_maxS);
    static readonly short[] DFA196_accept = DFA.UnpackEncodedString(DFA196_acceptS);
    static readonly short[] DFA196_special = DFA.UnpackEncodedString(DFA196_specialS);
    static readonly short[][] DFA196_transition = DFA.UnpackEncodedStringArray(DFA196_transitionS);

    protected class DFA196 : DFA
    {
        public DFA196(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 196;
            this.eot = DFA196_eot;
            this.eof = DFA196_eof;
            this.min = DFA196_min;
            this.max = DFA196_max;
            this.accept = DFA196_accept;
            this.special = DFA196_special;
            this.transition = DFA196_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1043:11: ( LineTerminator )*"; }
        }

    }

    const string DFA198_eotS =
        "\x38\uffff";
    const string DFA198_eofS =
        "\x01\x01\x37\uffff";
    const string DFA198_minS =
        "\x01\x05\x16\uffff\x01\x00\x20\uffff";
    const string DFA198_maxS =
        "\x01\x6b\x16\uffff\x01\x00\x20\uffff";
    const string DFA198_acceptS =
        "\x01\uffff\x01\x02\x35\uffff\x01\x01";
    const string DFA198_specialS =
        "\x17\uffff\x01\x00\x20\uffff}>";
    static readonly string[] DFA198_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x02\x01\x01\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x0c\x01\x02\uffff"+
            "\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA198_eot = DFA.UnpackEncodedString(DFA198_eotS);
    static readonly short[] DFA198_eof = DFA.UnpackEncodedString(DFA198_eofS);
    static readonly char[] DFA198_min = DFA.UnpackEncodedStringToUnsignedChars(DFA198_minS);
    static readonly char[] DFA198_max = DFA.UnpackEncodedStringToUnsignedChars(DFA198_maxS);
    static readonly short[] DFA198_accept = DFA.UnpackEncodedString(DFA198_acceptS);
    static readonly short[] DFA198_special = DFA.UnpackEncodedString(DFA198_specialS);
    static readonly short[][] DFA198_transition = DFA.UnpackEncodedStringArray(DFA198_transitionS);

    protected class DFA198 : DFA
    {
        public DFA198(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = DFA198_eot;
            this.eof = DFA198_eof;
            this.min = DFA198_min;
            this.max = DFA198_max;
            this.accept = DFA198_accept;
            this.special = DFA198_special;
            this.transition = DFA198_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1043:58: ( LineTerminator )*"; }
        }

    }


    protected internal int DFA198_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA198_23 = input.LA(1);

                   	 
                   	int index198_23 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred268_AS3()) ) { s = 55; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index198_23);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 198, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA199_eotS =
        "\x1c\uffff";
    const string DFA199_eofS =
        "\x01\x17\x1b\uffff";
    const string DFA199_minS =
        "\x01\x05\x1b\uffff";
    const string DFA199_maxS =
        "\x01\x6b\x1b\uffff";
    const string DFA199_acceptS =
        "\x01\uffff\x01\x01\x15\uffff\x01\x02\x04\uffff";
    const string DFA199_specialS =
        "\x1c\uffff}>";
    static readonly string[] DFA199_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x01\x17\x01\uffff\x01"+
            "\x01\x01\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02"+
            "\x17\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA199_eot = DFA.UnpackEncodedString(DFA199_eotS);
    static readonly short[] DFA199_eof = DFA.UnpackEncodedString(DFA199_eofS);
    static readonly char[] DFA199_min = DFA.UnpackEncodedStringToUnsignedChars(DFA199_minS);
    static readonly char[] DFA199_max = DFA.UnpackEncodedStringToUnsignedChars(DFA199_maxS);
    static readonly short[] DFA199_accept = DFA.UnpackEncodedString(DFA199_acceptS);
    static readonly short[] DFA199_special = DFA.UnpackEncodedString(DFA199_specialS);
    static readonly short[][] DFA199_transition = DFA.UnpackEncodedStringArray(DFA199_transitionS);

    protected class DFA199 : DFA
    {
        public DFA199(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 199;
            this.eot = DFA199_eot;
            this.eof = DFA199_eof;
            this.min = DFA199_min;
            this.max = DFA199_max;
            this.accept = DFA199_accept;
            this.special = DFA199_special;
            this.transition = DFA199_transition;

        }

        override public string Description
        {
            get { return "1043:74: ( statementList )?"; }
        }

    }

    const string DFA201_eotS =
        "\x36\uffff";
    const string DFA201_eofS =
        "\x01\x01\x35\uffff";
    const string DFA201_minS =
        "\x01\x05\x16\uffff\x01\x00\x1e\uffff";
    const string DFA201_maxS =
        "\x01\x6b\x16\uffff\x01\x00\x1e\uffff";
    const string DFA201_acceptS =
        "\x01\uffff\x01\x02\x33\uffff\x01\x01";
    const string DFA201_specialS =
        "\x17\uffff\x01\x00\x1e\uffff}>";
    static readonly string[] DFA201_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x02\x01\x01\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x09\x01\x01\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA201_eot = DFA.UnpackEncodedString(DFA201_eotS);
    static readonly short[] DFA201_eof = DFA.UnpackEncodedString(DFA201_eofS);
    static readonly char[] DFA201_min = DFA.UnpackEncodedStringToUnsignedChars(DFA201_minS);
    static readonly char[] DFA201_max = DFA.UnpackEncodedStringToUnsignedChars(DFA201_maxS);
    static readonly short[] DFA201_accept = DFA.UnpackEncodedString(DFA201_acceptS);
    static readonly short[] DFA201_special = DFA.UnpackEncodedString(DFA201_specialS);
    static readonly short[][] DFA201_transition = DFA.UnpackEncodedStringArray(DFA201_transitionS);

    protected class DFA201 : DFA
    {
        public DFA201(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 201;
            this.eot = DFA201_eot;
            this.eof = DFA201_eof;
            this.min = DFA201_min;
            this.max = DFA201_max;
            this.accept = DFA201_accept;
            this.special = DFA201_special;
            this.transition = DFA201_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1047:34: ( LineTerminator )*"; }
        }

    }


    protected internal int DFA201_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA201_23 = input.LA(1);

                   	 
                   	int index201_23 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred271_AS3()) ) { s = 53; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index201_23);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 201, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA202_eotS =
        "\x1b\uffff";
    const string DFA202_eofS =
        "\x01\x17\x1a\uffff";
    const string DFA202_minS =
        "\x01\x05\x1a\uffff";
    const string DFA202_maxS =
        "\x01\x6b\x1a\uffff";
    const string DFA202_acceptS =
        "\x01\uffff\x01\x01\x15\uffff\x01\x02\x03\uffff";
    const string DFA202_specialS =
        "\x1b\uffff}>";
    static readonly string[] DFA202_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x01\x17\x01\uffff\x01"+
            "\x01\x01\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x01"+
            "\x17\x01\uffff\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA202_eot = DFA.UnpackEncodedString(DFA202_eotS);
    static readonly short[] DFA202_eof = DFA.UnpackEncodedString(DFA202_eofS);
    static readonly char[] DFA202_min = DFA.UnpackEncodedStringToUnsignedChars(DFA202_minS);
    static readonly char[] DFA202_max = DFA.UnpackEncodedStringToUnsignedChars(DFA202_maxS);
    static readonly short[] DFA202_accept = DFA.UnpackEncodedString(DFA202_acceptS);
    static readonly short[] DFA202_special = DFA.UnpackEncodedString(DFA202_specialS);
    static readonly short[][] DFA202_transition = DFA.UnpackEncodedStringArray(DFA202_transitionS);

    protected class DFA202 : DFA
    {
        public DFA202(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 202;
            this.eot = DFA202_eot;
            this.eof = DFA202_eof;
            this.min = DFA202_min;
            this.max = DFA202_max;
            this.accept = DFA202_accept;
            this.special = DFA202_special;
            this.transition = DFA202_transition;

        }

        override public string Description
        {
            get { return "1047:50: ( statementList )?"; }
        }

    }

    const string DFA204_eotS =
        "\x18\uffff";
    const string DFA204_eofS =
        "\x18\uffff";
    const string DFA204_minS =
        "\x01\x05\x17\uffff";
    const string DFA204_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA204_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA204_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA204_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA204_eot = DFA.UnpackEncodedString(DFA204_eotS);
    static readonly short[] DFA204_eof = DFA.UnpackEncodedString(DFA204_eofS);
    static readonly char[] DFA204_min = DFA.UnpackEncodedStringToUnsignedChars(DFA204_minS);
    static readonly char[] DFA204_max = DFA.UnpackEncodedStringToUnsignedChars(DFA204_maxS);
    static readonly short[] DFA204_accept = DFA.UnpackEncodedString(DFA204_acceptS);
    static readonly short[] DFA204_special = DFA.UnpackEncodedString(DFA204_specialS);
    static readonly short[][] DFA204_transition = DFA.UnpackEncodedStringArray(DFA204_transitionS);

    protected class DFA204 : DFA
    {
        public DFA204(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 204;
            this.eot = DFA204_eot;
            this.eof = DFA204_eof;
            this.min = DFA204_min;
            this.max = DFA204_max;
            this.accept = DFA204_accept;
            this.special = DFA204_special;
            this.transition = DFA204_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1051:35: ( LineTerminator )*"; }
        }

    }

    const string DFA206_eotS =
        "\x3c\uffff";
    const string DFA206_eofS =
        "\x01\x01\x3b\uffff";
    const string DFA206_minS =
        "\x01\x05\x03\uffff\x01\x00\x37\uffff";
    const string DFA206_maxS =
        "\x01\x6b\x03\uffff\x01\x00\x37\uffff";
    const string DFA206_acceptS =
        "\x01\uffff\x01\x01\x39\uffff\x01\x02";
    const string DFA206_specialS =
        "\x04\uffff\x01\x00\x37\uffff}>";
    static readonly string[] DFA206_transitionS = {
            "\x01\x01\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x04"+
            "\x01\x02\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x09\x01\x22"+
            "\uffff\x01\x01\x01\x04\x0e\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA206_eot = DFA.UnpackEncodedString(DFA206_eotS);
    static readonly short[] DFA206_eof = DFA.UnpackEncodedString(DFA206_eofS);
    static readonly char[] DFA206_min = DFA.UnpackEncodedStringToUnsignedChars(DFA206_minS);
    static readonly char[] DFA206_max = DFA.UnpackEncodedStringToUnsignedChars(DFA206_maxS);
    static readonly short[] DFA206_accept = DFA.UnpackEncodedString(DFA206_acceptS);
    static readonly short[] DFA206_special = DFA.UnpackEncodedString(DFA206_specialS);
    static readonly short[][] DFA206_transition = DFA.UnpackEncodedStringArray(DFA206_transitionS);

    protected class DFA206 : DFA
    {
        public DFA206(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 206;
            this.eot = DFA206_eot;
            this.eof = DFA206_eof;
            this.min = DFA206_min;
            this.max = DFA206_max;
            this.accept = DFA206_accept;
            this.special = DFA206_special;
            this.transition = DFA206_transition;

        }

        override public string Description
        {
            get { return "1055:23: ( ( LineTerminator )* | ';' )"; }
        }

    }


    protected internal int DFA206_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA206_4 = input.LA(1);

                   	 
                   	int index206_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred276_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 59; }

                   	 
                   	input.Seek(index206_4);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 206, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA205_eotS =
        "\x3c\uffff";
    const string DFA205_eofS =
        "\x01\x02\x3b\uffff";
    const string DFA205_minS =
        "\x01\x05\x01\x00\x3a\uffff";
    const string DFA205_maxS =
        "\x01\x6b\x01\x00\x3a\uffff";
    const string DFA205_acceptS =
        "\x02\uffff\x01\x02\x38\uffff\x01\x01";
    const string DFA205_specialS =
        "\x01\uffff\x01\x00\x3a\uffff}>";
    static readonly string[] DFA205_transitionS = {
            "\x01\x01\x06\uffff\x01\x02\x05\uffff\x04\x02\x0d\uffff\x04"+
            "\x02\x02\uffff\x02\x02\x01\uffff\x01\x02\x01\uffff\x09\x02\x22"+
            "\uffff\x10\x02\x02\uffff\x01\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA205_eot = DFA.UnpackEncodedString(DFA205_eotS);
    static readonly short[] DFA205_eof = DFA.UnpackEncodedString(DFA205_eofS);
    static readonly char[] DFA205_min = DFA.UnpackEncodedStringToUnsignedChars(DFA205_minS);
    static readonly char[] DFA205_max = DFA.UnpackEncodedStringToUnsignedChars(DFA205_maxS);
    static readonly short[] DFA205_accept = DFA.UnpackEncodedString(DFA205_acceptS);
    static readonly short[] DFA205_special = DFA.UnpackEncodedString(DFA205_specialS);
    static readonly short[][] DFA205_transition = DFA.UnpackEncodedStringArray(DFA205_transitionS);

    protected class DFA205 : DFA
    {
        public DFA205(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 205;
            this.eot = DFA205_eot;
            this.eof = DFA205_eof;
            this.min = DFA205_min;
            this.max = DFA205_max;
            this.accept = DFA205_accept;
            this.special = DFA205_special;
            this.transition = DFA205_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1055:24: ( LineTerminator )*"; }
        }

    }


    protected internal int DFA205_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA205_1 = input.LA(1);

                   	 
                   	int index205_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred275_AS3()) ) { s = 59; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index205_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 205, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA210_eotS =
        "\x3d\uffff";
    const string DFA210_eofS =
        "\x02\x03\x3b\uffff";
    const string DFA210_minS =
        "\x02\x05\x33\uffff\x01\x00\x07\uffff";
    const string DFA210_maxS =
        "\x02\x6b\x33\uffff\x01\x00\x07\uffff";
    const string DFA210_acceptS =
        "\x02\uffff\x01\x01\x01\x02\x39\uffff";
    const string DFA210_specialS =
        "\x35\uffff\x01\x00\x07\uffff}>";
    static readonly string[] DFA210_transitionS = {
            "\x01\x01\x06\uffff\x01\x03\x05\uffff\x04\x03\x0d\uffff\x04"+
            "\x03\x02\uffff\x02\x03\x01\uffff\x01\x03\x01\uffff\x09\x03\x22"+
            "\uffff\x10\x03\x01\uffff\x01\x02\x01\x03",
            "\x01\x35\x06\uffff\x01\x03\x05\uffff\x04\x03\x0d\uffff\x04"+
            "\x03\x02\uffff\x02\x03\x01\uffff\x01\x03\x01\uffff\x09\x03\x22"+
            "\uffff\x10\x03\x01\uffff\x01\x02\x01\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA210_eot = DFA.UnpackEncodedString(DFA210_eotS);
    static readonly short[] DFA210_eof = DFA.UnpackEncodedString(DFA210_eofS);
    static readonly char[] DFA210_min = DFA.UnpackEncodedStringToUnsignedChars(DFA210_minS);
    static readonly char[] DFA210_max = DFA.UnpackEncodedStringToUnsignedChars(DFA210_maxS);
    static readonly short[] DFA210_accept = DFA.UnpackEncodedString(DFA210_acceptS);
    static readonly short[] DFA210_special = DFA.UnpackEncodedString(DFA210_specialS);
    static readonly short[][] DFA210_transition = DFA.UnpackEncodedStringArray(DFA210_transitionS);

    protected class DFA210 : DFA
    {
        public DFA210(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 210;
            this.eot = DFA210_eot;
            this.eof = DFA210_eof;
            this.min = DFA210_min;
            this.max = DFA210_max;
            this.accept = DFA210_accept;
            this.special = DFA210_special;
            this.transition = DFA210_transition;

        }

        override public string Description
        {
            get { return "1059:86: ( ( LineTerminator )* finallyClause )?"; }
        }

    }


    protected internal int DFA210_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA210_53 = input.LA(1);

                   	 
                   	int index210_53 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred281_AS3()) ) { s = 2; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index210_53);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 210, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA230_eotS =
        "\x18\uffff";
    const string DFA230_eofS =
        "\x18\uffff";
    const string DFA230_minS =
        "\x01\x05\x17\uffff";
    const string DFA230_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA230_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA230_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA230_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA230_eot = DFA.UnpackEncodedString(DFA230_eotS);
    static readonly short[] DFA230_eof = DFA.UnpackEncodedString(DFA230_eofS);
    static readonly char[] DFA230_min = DFA.UnpackEncodedStringToUnsignedChars(DFA230_minS);
    static readonly char[] DFA230_max = DFA.UnpackEncodedStringToUnsignedChars(DFA230_maxS);
    static readonly short[] DFA230_accept = DFA.UnpackEncodedString(DFA230_acceptS);
    static readonly short[] DFA230_special = DFA.UnpackEncodedString(DFA230_specialS);
    static readonly short[][] DFA230_transition = DFA.UnpackEncodedStringArray(DFA230_transitionS);

    protected class DFA230 : DFA
    {
        public DFA230(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 230;
            this.eot = DFA230_eot;
            this.eof = DFA230_eof;
            this.min = DFA230_min;
            this.max = DFA230_max;
            this.accept = DFA230_accept;
            this.special = DFA230_special;
            this.transition = DFA230_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1087:8: ( LineTerminator )*"; }
        }

    }

    const string DFA232_eotS =
        "\x18\uffff";
    const string DFA232_eofS =
        "\x18\uffff";
    const string DFA232_minS =
        "\x01\x05\x17\uffff";
    const string DFA232_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA232_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA232_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA232_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA232_eot = DFA.UnpackEncodedString(DFA232_eotS);
    static readonly short[] DFA232_eof = DFA.UnpackEncodedString(DFA232_eofS);
    static readonly char[] DFA232_min = DFA.UnpackEncodedStringToUnsignedChars(DFA232_minS);
    static readonly char[] DFA232_max = DFA.UnpackEncodedStringToUnsignedChars(DFA232_maxS);
    static readonly short[] DFA232_accept = DFA.UnpackEncodedString(DFA232_acceptS);
    static readonly short[] DFA232_special = DFA.UnpackEncodedString(DFA232_specialS);
    static readonly short[][] DFA232_transition = DFA.UnpackEncodedStringArray(DFA232_transitionS);

    protected class DFA232 : DFA
    {
        public DFA232(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 232;
            this.eot = DFA232_eot;
            this.eof = DFA232_eof;
            this.min = DFA232_min;
            this.max = DFA232_max;
            this.accept = DFA232_accept;
            this.special = DFA232_special;
            this.transition = DFA232_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1091:4: ( LineTerminator )*"; }
        }

    }

    const string DFA235_eotS =
        "\x33\uffff";
    const string DFA235_eofS =
        "\x02\x02\x31\uffff";
    const string DFA235_minS =
        "\x02\x05\x19\uffff\x01\x00\x17\uffff";
    const string DFA235_maxS =
        "\x02\x6b\x19\uffff\x01\x00\x17\uffff";
    const string DFA235_acceptS =
        "\x02\uffff\x01\x02\x01\uffff\x01\x01\x2e\uffff";
    const string DFA235_specialS =
        "\x1b\uffff\x01\x00\x17\uffff}>";
    static readonly string[] DFA235_transitionS = {
            "\x01\x01\x06\uffff\x01\x04\x05\uffff\x04\x04\x0d\uffff\x02"+
            "\x04\x01\uffff\x01\x04\x02\uffff\x01\x04\x01\x02\x01\uffff\x01"+
            "\x04\x01\uffff\x09\x04\x22\uffff\x03\x04\x01\uffff\x08\x04\x02"+
            "\uffff\x02\x04\x02\uffff\x01\x04",
            "\x01\x1b\x06\uffff\x01\x04\x05\uffff\x04\x04\x0d\uffff\x02"+
            "\x04\x01\uffff\x01\x04\x02\uffff\x01\x04\x01\x02\x01\uffff\x01"+
            "\x04\x01\uffff\x09\x04\x22\uffff\x03\x04\x01\uffff\x08\x04\x02"+
            "\uffff\x02\x04\x02\uffff\x01\x04",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA235_eot = DFA.UnpackEncodedString(DFA235_eotS);
    static readonly short[] DFA235_eof = DFA.UnpackEncodedString(DFA235_eofS);
    static readonly char[] DFA235_min = DFA.UnpackEncodedStringToUnsignedChars(DFA235_minS);
    static readonly char[] DFA235_max = DFA.UnpackEncodedStringToUnsignedChars(DFA235_maxS);
    static readonly short[] DFA235_accept = DFA.UnpackEncodedString(DFA235_acceptS);
    static readonly short[] DFA235_special = DFA.UnpackEncodedString(DFA235_specialS);
    static readonly short[][] DFA235_transition = DFA.UnpackEncodedStringArray(DFA235_transitionS);

    protected class DFA235 : DFA
    {
        public DFA235(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 235;
            this.eot = DFA235_eot;
            this.eof = DFA235_eof;
            this.min = DFA235_min;
            this.max = DFA235_max;
            this.accept = DFA235_accept;
            this.special = DFA235_special;
            this.transition = DFA235_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1095:18: ( ( LineTerminator )* sourceElement )*"; }
        }

    }


    protected internal int DFA235_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA235_27 = input.LA(1);

                   	 
                   	int index235_27 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred305_AS3()) ) { s = 4; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index235_27);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 235, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA234_eotS =
        "\x18\uffff";
    const string DFA234_eofS =
        "\x18\uffff";
    const string DFA234_minS =
        "\x01\x05\x17\uffff";
    const string DFA234_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA234_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA234_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA234_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA234_eot = DFA.UnpackEncodedString(DFA234_eotS);
    static readonly short[] DFA234_eof = DFA.UnpackEncodedString(DFA234_eofS);
    static readonly char[] DFA234_min = DFA.UnpackEncodedStringToUnsignedChars(DFA234_minS);
    static readonly char[] DFA234_max = DFA.UnpackEncodedStringToUnsignedChars(DFA234_maxS);
    static readonly short[] DFA234_accept = DFA.UnpackEncodedString(DFA234_acceptS);
    static readonly short[] DFA234_special = DFA.UnpackEncodedString(DFA234_specialS);
    static readonly short[][] DFA234_transition = DFA.UnpackEncodedStringArray(DFA234_transitionS);

    protected class DFA234 : DFA
    {
        public DFA234(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 234;
            this.eot = DFA234_eot;
            this.eof = DFA234_eof;
            this.min = DFA234_min;
            this.max = DFA234_max;
            this.accept = DFA234_accept;
            this.special = DFA234_special;
            this.transition = DFA234_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1095:19: ( LineTerminator )*"; }
        }

    }

    const string DFA236_eotS =
        "\x1b\uffff";
    const string DFA236_eofS =
        "\x1b\uffff";
    const string DFA236_minS =
        "\x01\x0c\x08\uffff\x01\x05\x0d\uffff\x02\x00\x02\uffff";
    const string DFA236_maxS =
        "\x01\x6b\x08\uffff\x01\x24\x0d\uffff\x02\x00\x02\uffff";
    const string DFA236_acceptS =
        "\x01\uffff\x01\x01\x18\uffff\x01\x02";
    const string DFA236_specialS =
        "\x17\uffff\x01\x00\x01\x01\x02\uffff}>";
    static readonly string[] DFA236_transitionS = {
            "\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02\x01\x01\uffff\x01"+
            "\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01\uffff\x09\x01\x22"+
            "\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff\x02\x01\x02\uffff"+
            "\x01\x09",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\x17\x06\uffff\x01\x18\x17\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "",
            ""
    };

    static readonly short[] DFA236_eot = DFA.UnpackEncodedString(DFA236_eotS);
    static readonly short[] DFA236_eof = DFA.UnpackEncodedString(DFA236_eofS);
    static readonly char[] DFA236_min = DFA.UnpackEncodedStringToUnsignedChars(DFA236_minS);
    static readonly char[] DFA236_max = DFA.UnpackEncodedStringToUnsignedChars(DFA236_maxS);
    static readonly short[] DFA236_accept = DFA.UnpackEncodedString(DFA236_acceptS);
    static readonly short[] DFA236_special = DFA.UnpackEncodedString(DFA236_specialS);
    static readonly short[][] DFA236_transition = DFA.UnpackEncodedStringArray(DFA236_transitionS);

    protected class DFA236 : DFA
    {
        public DFA236(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 236;
            this.eot = DFA236_eot;
            this.eof = DFA236_eof;
            this.min = DFA236_min;
            this.max = DFA236_max;
            this.accept = DFA236_accept;
            this.special = DFA236_special;
            this.transition = DFA236_transition;

        }

        override public string Description
        {
            get { return "1098:1: sourceElement : ( statement | functionDeclaration );"; }
        }

    }


    protected internal int DFA236_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA236_23 = input.LA(1);

                   	 
                   	int index236_23 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred306_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 26; }

                   	 
                   	input.Seek(index236_23);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA236_24 = input.LA(1);

                   	 
                   	int index236_24 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred306_AS3()) ) { s = 1; }

                   	else if ( (true) ) { s = 26; }

                   	 
                   	input.Seek(index236_24);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 236, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA237_eotS =
        "\x0b\uffff";
    const string DFA237_eofS =
        "\x0b\uffff";
    const string DFA237_minS =
        "\x01\x05\x0a\uffff";
    const string DFA237_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA237_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA237_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA237_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA237_eot = DFA.UnpackEncodedString(DFA237_eotS);
    static readonly short[] DFA237_eof = DFA.UnpackEncodedString(DFA237_eofS);
    static readonly char[] DFA237_min = DFA.UnpackEncodedStringToUnsignedChars(DFA237_minS);
    static readonly char[] DFA237_max = DFA.UnpackEncodedStringToUnsignedChars(DFA237_maxS);
    static readonly short[] DFA237_accept = DFA.UnpackEncodedString(DFA237_acceptS);
    static readonly short[] DFA237_special = DFA.UnpackEncodedString(DFA237_specialS);
    static readonly short[][] DFA237_transition = DFA.UnpackEncodedStringArray(DFA237_transitionS);

    protected class DFA237 : DFA
    {
        public DFA237(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 237;
            this.eot = DFA237_eot;
            this.eof = DFA237_eof;
            this.min = DFA237_min;
            this.max = DFA237_max;
            this.accept = DFA237_accept;
            this.special = DFA237_special;
            this.transition = DFA237_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 751:68: ( LineTerminator )*"; }
        }

    }

    const string DFA240_eotS =
        "\x0c\uffff";
    const string DFA240_eofS =
        "\x01\x0b\x0b\uffff";
    const string DFA240_minS =
        "\x01\x05\x0b\uffff";
    const string DFA240_maxS =
        "\x01\x6b\x0b\uffff";
    const string DFA240_acceptS =
        "\x01\uffff\x01\x01\x09\uffff\x01\x02";
    const string DFA240_specialS =
        "\x0c\uffff}>";
    static readonly string[] DFA240_transitionS = {
            "\x01\x01\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA240_eot = DFA.UnpackEncodedString(DFA240_eotS);
    static readonly short[] DFA240_eof = DFA.UnpackEncodedString(DFA240_eofS);
    static readonly char[] DFA240_min = DFA.UnpackEncodedStringToUnsignedChars(DFA240_minS);
    static readonly char[] DFA240_max = DFA.UnpackEncodedStringToUnsignedChars(DFA240_maxS);
    static readonly short[] DFA240_accept = DFA.UnpackEncodedString(DFA240_acceptS);
    static readonly short[] DFA240_special = DFA.UnpackEncodedString(DFA240_specialS);
    static readonly short[][] DFA240_transition = DFA.UnpackEncodedStringArray(DFA240_transitionS);

    protected class DFA240 : DFA
    {
        public DFA240(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 240;
            this.eot = DFA240_eot;
            this.eof = DFA240_eof;
            this.min = DFA240_min;
            this.max = DFA240_max;
            this.accept = DFA240_accept;
            this.special = DFA240_special;
            this.transition = DFA240_transition;

        }

        override public string Description
        {
            get { return "751:67: ( ( LineTerminator )* assignmentExpression )?"; }
        }

    }

    const string DFA239_eotS =
        "\x0b\uffff";
    const string DFA239_eofS =
        "\x0b\uffff";
    const string DFA239_minS =
        "\x01\x05\x0a\uffff";
    const string DFA239_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA239_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA239_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA239_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA239_eot = DFA.UnpackEncodedString(DFA239_eotS);
    static readonly short[] DFA239_eof = DFA.UnpackEncodedString(DFA239_eofS);
    static readonly char[] DFA239_min = DFA.UnpackEncodedStringToUnsignedChars(DFA239_minS);
    static readonly char[] DFA239_max = DFA.UnpackEncodedStringToUnsignedChars(DFA239_maxS);
    static readonly short[] DFA239_accept = DFA.UnpackEncodedString(DFA239_acceptS);
    static readonly short[] DFA239_special = DFA.UnpackEncodedString(DFA239_specialS);
    static readonly short[][] DFA239_transition = DFA.UnpackEncodedStringArray(DFA239_transitionS);

    protected class DFA239 : DFA
    {
        public DFA239(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 239;
            this.eot = DFA239_eot;
            this.eof = DFA239_eof;
            this.min = DFA239_min;
            this.max = DFA239_max;
            this.accept = DFA239_accept;
            this.special = DFA239_special;
            this.transition = DFA239_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 751:68: ( LineTerminator )*"; }
        }

    }

    const string DFA246_eotS =
        "\x0b\uffff";
    const string DFA246_eofS =
        "\x0b\uffff";
    const string DFA246_minS =
        "\x01\x05\x0a\uffff";
    const string DFA246_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA246_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA246_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA246_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA246_eot = DFA.UnpackEncodedString(DFA246_eotS);
    static readonly short[] DFA246_eof = DFA.UnpackEncodedString(DFA246_eofS);
    static readonly char[] DFA246_min = DFA.UnpackEncodedStringToUnsignedChars(DFA246_minS);
    static readonly char[] DFA246_max = DFA.UnpackEncodedStringToUnsignedChars(DFA246_maxS);
    static readonly short[] DFA246_accept = DFA.UnpackEncodedString(DFA246_acceptS);
    static readonly short[] DFA246_special = DFA.UnpackEncodedString(DFA246_specialS);
    static readonly short[][] DFA246_transition = DFA.UnpackEncodedStringArray(DFA246_transitionS);

    protected class DFA246 : DFA
    {
        public DFA246(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 246;
            this.eot = DFA246_eot;
            this.eof = DFA246_eof;
            this.min = DFA246_min;
            this.max = DFA246_max;
            this.accept = DFA246_accept;
            this.special = DFA246_special;
            this.transition = DFA246_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 801:67: ( LineTerminator )*"; }
        }

    }

    const string DFA247_eotS =
        "\x0b\uffff";
    const string DFA247_eofS =
        "\x0b\uffff";
    const string DFA247_minS =
        "\x01\x05\x0a\uffff";
    const string DFA247_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA247_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA247_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA247_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA247_eot = DFA.UnpackEncodedString(DFA247_eotS);
    static readonly short[] DFA247_eof = DFA.UnpackEncodedString(DFA247_eofS);
    static readonly char[] DFA247_min = DFA.UnpackEncodedStringToUnsignedChars(DFA247_minS);
    static readonly char[] DFA247_max = DFA.UnpackEncodedStringToUnsignedChars(DFA247_maxS);
    static readonly short[] DFA247_accept = DFA.UnpackEncodedString(DFA247_acceptS);
    static readonly short[] DFA247_special = DFA.UnpackEncodedString(DFA247_specialS);
    static readonly short[][] DFA247_transition = DFA.UnpackEncodedStringArray(DFA247_transitionS);

    protected class DFA247 : DFA
    {
        public DFA247(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 247;
            this.eot = DFA247_eot;
            this.eof = DFA247_eof;
            this.min = DFA247_min;
            this.max = DFA247_max;
            this.accept = DFA247_accept;
            this.special = DFA247_special;
            this.transition = DFA247_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 801:9: ( LineTerminator )*"; }
        }

    }

    const string DFA249_eotS =
        "\x0b\uffff";
    const string DFA249_eofS =
        "\x0b\uffff";
    const string DFA249_minS =
        "\x01\x05\x0a\uffff";
    const string DFA249_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA249_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA249_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA249_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA249_eot = DFA.UnpackEncodedString(DFA249_eotS);
    static readonly short[] DFA249_eof = DFA.UnpackEncodedString(DFA249_eofS);
    static readonly char[] DFA249_min = DFA.UnpackEncodedStringToUnsignedChars(DFA249_minS);
    static readonly char[] DFA249_max = DFA.UnpackEncodedStringToUnsignedChars(DFA249_maxS);
    static readonly short[] DFA249_accept = DFA.UnpackEncodedString(DFA249_acceptS);
    static readonly short[] DFA249_special = DFA.UnpackEncodedString(DFA249_specialS);
    static readonly short[][] DFA249_transition = DFA.UnpackEncodedStringArray(DFA249_transitionS);

    protected class DFA249 : DFA
    {
        public DFA249(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 249;
            this.eot = DFA249_eot;
            this.eof = DFA249_eof;
            this.min = DFA249_min;
            this.max = DFA249_max;
            this.accept = DFA249_accept;
            this.special = DFA249_special;
            this.transition = DFA249_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 801:67: ( LineTerminator )*"; }
        }

    }

    const string DFA252_eotS =
        "\x0b\uffff";
    const string DFA252_eofS =
        "\x0b\uffff";
    const string DFA252_minS =
        "\x01\x05\x0a\uffff";
    const string DFA252_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA252_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA252_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA252_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA252_eot = DFA.UnpackEncodedString(DFA252_eotS);
    static readonly short[] DFA252_eof = DFA.UnpackEncodedString(DFA252_eofS);
    static readonly char[] DFA252_min = DFA.UnpackEncodedStringToUnsignedChars(DFA252_minS);
    static readonly char[] DFA252_max = DFA.UnpackEncodedStringToUnsignedChars(DFA252_maxS);
    static readonly short[] DFA252_accept = DFA.UnpackEncodedString(DFA252_acceptS);
    static readonly short[] DFA252_special = DFA.UnpackEncodedString(DFA252_specialS);
    static readonly short[][] DFA252_transition = DFA.UnpackEncodedStringArray(DFA252_transitionS);

    protected class DFA252 : DFA
    {
        public DFA252(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 252;
            this.eot = DFA252_eot;
            this.eof = DFA252_eof;
            this.min = DFA252_min;
            this.max = DFA252_max;
            this.accept = DFA252_accept;
            this.special = DFA252_special;
            this.transition = DFA252_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 819:55: ( LineTerminator )*"; }
        }

    }

    const string DFA254_eotS =
        "\x0b\uffff";
    const string DFA254_eofS =
        "\x0b\uffff";
    const string DFA254_minS =
        "\x01\x05\x0a\uffff";
    const string DFA254_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA254_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA254_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA254_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA254_eot = DFA.UnpackEncodedString(DFA254_eotS);
    static readonly short[] DFA254_eof = DFA.UnpackEncodedString(DFA254_eofS);
    static readonly char[] DFA254_min = DFA.UnpackEncodedStringToUnsignedChars(DFA254_minS);
    static readonly char[] DFA254_max = DFA.UnpackEncodedStringToUnsignedChars(DFA254_maxS);
    static readonly short[] DFA254_accept = DFA.UnpackEncodedString(DFA254_acceptS);
    static readonly short[] DFA254_special = DFA.UnpackEncodedString(DFA254_specialS);
    static readonly short[][] DFA254_transition = DFA.UnpackEncodedStringArray(DFA254_transitionS);

    protected class DFA254 : DFA
    {
        public DFA254(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 254;
            this.eot = DFA254_eot;
            this.eof = DFA254_eof;
            this.min = DFA254_min;
            this.max = DFA254_max;
            this.accept = DFA254_accept;
            this.special = DFA254_special;
            this.transition = DFA254_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 823:58: ( LineTerminator )*"; }
        }

    }

    const string DFA256_eotS =
        "\x0b\uffff";
    const string DFA256_eofS =
        "\x0b\uffff";
    const string DFA256_minS =
        "\x01\x05\x0a\uffff";
    const string DFA256_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA256_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA256_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA256_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA256_eot = DFA.UnpackEncodedString(DFA256_eotS);
    static readonly short[] DFA256_eof = DFA.UnpackEncodedString(DFA256_eofS);
    static readonly char[] DFA256_min = DFA.UnpackEncodedStringToUnsignedChars(DFA256_minS);
    static readonly char[] DFA256_max = DFA.UnpackEncodedStringToUnsignedChars(DFA256_maxS);
    static readonly short[] DFA256_accept = DFA.UnpackEncodedString(DFA256_acceptS);
    static readonly short[] DFA256_special = DFA.UnpackEncodedString(DFA256_specialS);
    static readonly short[][] DFA256_transition = DFA.UnpackEncodedStringArray(DFA256_transitionS);

    protected class DFA256 : DFA
    {
        public DFA256(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 256;
            this.eot = DFA256_eot;
            this.eof = DFA256_eof;
            this.min = DFA256_min;
            this.max = DFA256_max;
            this.accept = DFA256_accept;
            this.special = DFA256_special;
            this.transition = DFA256_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 827:62: ( LineTerminator )*"; }
        }

    }

    const string DFA258_eotS =
        "\x0b\uffff";
    const string DFA258_eofS =
        "\x0b\uffff";
    const string DFA258_minS =
        "\x01\x05\x0a\uffff";
    const string DFA258_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA258_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA258_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA258_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA258_eot = DFA.UnpackEncodedString(DFA258_eotS);
    static readonly short[] DFA258_eof = DFA.UnpackEncodedString(DFA258_eofS);
    static readonly char[] DFA258_min = DFA.UnpackEncodedStringToUnsignedChars(DFA258_minS);
    static readonly char[] DFA258_max = DFA.UnpackEncodedStringToUnsignedChars(DFA258_maxS);
    static readonly short[] DFA258_accept = DFA.UnpackEncodedString(DFA258_acceptS);
    static readonly short[] DFA258_special = DFA.UnpackEncodedString(DFA258_specialS);
    static readonly short[][] DFA258_transition = DFA.UnpackEncodedStringArray(DFA258_transitionS);

    protected class DFA258 : DFA
    {
        public DFA258(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 258;
            this.eot = DFA258_eot;
            this.eof = DFA258_eof;
            this.min = DFA258_min;
            this.max = DFA258_max;
            this.accept = DFA258_accept;
            this.special = DFA258_special;
            this.transition = DFA258_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 831:85: ( LineTerminator )*"; }
        }

    }

    const string DFA260_eotS =
        "\x0b\uffff";
    const string DFA260_eofS =
        "\x0b\uffff";
    const string DFA260_minS =
        "\x01\x05\x0a\uffff";
    const string DFA260_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA260_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA260_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA260_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA260_eot = DFA.UnpackEncodedString(DFA260_eotS);
    static readonly short[] DFA260_eof = DFA.UnpackEncodedString(DFA260_eofS);
    static readonly char[] DFA260_min = DFA.UnpackEncodedStringToUnsignedChars(DFA260_minS);
    static readonly char[] DFA260_max = DFA.UnpackEncodedStringToUnsignedChars(DFA260_maxS);
    static readonly short[] DFA260_accept = DFA.UnpackEncodedString(DFA260_acceptS);
    static readonly short[] DFA260_special = DFA.UnpackEncodedString(DFA260_specialS);
    static readonly short[][] DFA260_transition = DFA.UnpackEncodedStringArray(DFA260_transitionS);

    protected class DFA260 : DFA
    {
        public DFA260(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 260;
            this.eot = DFA260_eot;
            this.eof = DFA260_eof;
            this.min = DFA260_min;
            this.max = DFA260_max;
            this.accept = DFA260_accept;
            this.special = DFA260_special;
            this.transition = DFA260_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 835:79: ( LineTerminator )*"; }
        }

    }

    const string DFA262_eotS =
        "\x0b\uffff";
    const string DFA262_eofS =
        "\x0b\uffff";
    const string DFA262_minS =
        "\x01\x05\x0a\uffff";
    const string DFA262_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA262_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA262_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA262_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA262_eot = DFA.UnpackEncodedString(DFA262_eotS);
    static readonly short[] DFA262_eof = DFA.UnpackEncodedString(DFA262_eofS);
    static readonly char[] DFA262_min = DFA.UnpackEncodedStringToUnsignedChars(DFA262_minS);
    static readonly char[] DFA262_max = DFA.UnpackEncodedStringToUnsignedChars(DFA262_maxS);
    static readonly short[] DFA262_accept = DFA.UnpackEncodedString(DFA262_acceptS);
    static readonly short[] DFA262_special = DFA.UnpackEncodedString(DFA262_specialS);
    static readonly short[][] DFA262_transition = DFA.UnpackEncodedStringArray(DFA262_transitionS);

    protected class DFA262 : DFA
    {
        public DFA262(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 262;
            this.eot = DFA262_eot;
            this.eof = DFA262_eof;
            this.min = DFA262_min;
            this.max = DFA262_max;
            this.accept = DFA262_accept;
            this.special = DFA262_special;
            this.transition = DFA262_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 839:72: ( LineTerminator )*"; }
        }

    }

    const string DFA264_eotS =
        "\x0b\uffff";
    const string DFA264_eofS =
        "\x0b\uffff";
    const string DFA264_minS =
        "\x01\x05\x0a\uffff";
    const string DFA264_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA264_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA264_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA264_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA264_eot = DFA.UnpackEncodedString(DFA264_eotS);
    static readonly short[] DFA264_eof = DFA.UnpackEncodedString(DFA264_eofS);
    static readonly char[] DFA264_min = DFA.UnpackEncodedStringToUnsignedChars(DFA264_minS);
    static readonly char[] DFA264_max = DFA.UnpackEncodedStringToUnsignedChars(DFA264_maxS);
    static readonly short[] DFA264_accept = DFA.UnpackEncodedString(DFA264_acceptS);
    static readonly short[] DFA264_special = DFA.UnpackEncodedString(DFA264_specialS);
    static readonly short[][] DFA264_transition = DFA.UnpackEncodedStringArray(DFA264_transitionS);

    protected class DFA264 : DFA
    {
        public DFA264(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 264;
            this.eot = DFA264_eot;
            this.eof = DFA264_eof;
            this.min = DFA264_min;
            this.max = DFA264_max;
            this.accept = DFA264_accept;
            this.special = DFA264_special;
            this.transition = DFA264_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 843:76: ( LineTerminator )*"; }
        }

    }

    const string DFA266_eotS =
        "\x0b\uffff";
    const string DFA266_eofS =
        "\x0b\uffff";
    const string DFA266_minS =
        "\x01\x05\x0a\uffff";
    const string DFA266_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA266_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA266_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA266_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA266_eot = DFA.UnpackEncodedString(DFA266_eotS);
    static readonly short[] DFA266_eof = DFA.UnpackEncodedString(DFA266_eofS);
    static readonly char[] DFA266_min = DFA.UnpackEncodedStringToUnsignedChars(DFA266_minS);
    static readonly char[] DFA266_max = DFA.UnpackEncodedStringToUnsignedChars(DFA266_maxS);
    static readonly short[] DFA266_accept = DFA.UnpackEncodedString(DFA266_acceptS);
    static readonly short[] DFA266_special = DFA.UnpackEncodedString(DFA266_specialS);
    static readonly short[][] DFA266_transition = DFA.UnpackEncodedStringArray(DFA266_transitionS);

    protected class DFA266 : DFA
    {
        public DFA266(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 266;
            this.eot = DFA266_eot;
            this.eof = DFA266_eof;
            this.min = DFA266_min;
            this.max = DFA266_max;
            this.accept = DFA266_accept;
            this.special = DFA266_special;
            this.transition = DFA266_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 847:44: ( LineTerminator )*"; }
        }

    }

    const string DFA268_eotS =
        "\x0b\uffff";
    const string DFA268_eofS =
        "\x0b\uffff";
    const string DFA268_minS =
        "\x01\x05\x0a\uffff";
    const string DFA268_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA268_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA268_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA268_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA268_eot = DFA.UnpackEncodedString(DFA268_eotS);
    static readonly short[] DFA268_eof = DFA.UnpackEncodedString(DFA268_eofS);
    static readonly char[] DFA268_min = DFA.UnpackEncodedStringToUnsignedChars(DFA268_minS);
    static readonly char[] DFA268_max = DFA.UnpackEncodedStringToUnsignedChars(DFA268_maxS);
    static readonly short[] DFA268_accept = DFA.UnpackEncodedString(DFA268_acceptS);
    static readonly short[] DFA268_special = DFA.UnpackEncodedString(DFA268_specialS);
    static readonly short[][] DFA268_transition = DFA.UnpackEncodedStringArray(DFA268_transitionS);

    protected class DFA268 : DFA
    {
        public DFA268(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = DFA268_eot;
            this.eof = DFA268_eof;
            this.min = DFA268_min;
            this.max = DFA268_max;
            this.accept = DFA268_accept;
            this.special = DFA268_special;
            this.transition = DFA268_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 851:48: ( LineTerminator )*"; }
        }

    }

    const string DFA270_eotS =
        "\x0b\uffff";
    const string DFA270_eofS =
        "\x0b\uffff";
    const string DFA270_minS =
        "\x01\x05\x0a\uffff";
    const string DFA270_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA270_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA270_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA270_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA270_eot = DFA.UnpackEncodedString(DFA270_eotS);
    static readonly short[] DFA270_eof = DFA.UnpackEncodedString(DFA270_eofS);
    static readonly char[] DFA270_min = DFA.UnpackEncodedStringToUnsignedChars(DFA270_minS);
    static readonly char[] DFA270_max = DFA.UnpackEncodedStringToUnsignedChars(DFA270_maxS);
    static readonly short[] DFA270_accept = DFA.UnpackEncodedString(DFA270_acceptS);
    static readonly short[] DFA270_special = DFA.UnpackEncodedString(DFA270_specialS);
    static readonly short[][] DFA270_transition = DFA.UnpackEncodedStringArray(DFA270_transitionS);

    protected class DFA270 : DFA
    {
        public DFA270(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 270;
            this.eot = DFA270_eot;
            this.eof = DFA270_eof;
            this.min = DFA270_min;
            this.max = DFA270_max;
            this.accept = DFA270_accept;
            this.special = DFA270_special;
            this.transition = DFA270_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 855:46: ( LineTerminator )*"; }
        }

    }

    const string DFA272_eotS =
        "\x0b\uffff";
    const string DFA272_eofS =
        "\x0b\uffff";
    const string DFA272_minS =
        "\x01\x05\x0a\uffff";
    const string DFA272_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA272_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA272_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA272_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA272_eot = DFA.UnpackEncodedString(DFA272_eotS);
    static readonly short[] DFA272_eof = DFA.UnpackEncodedString(DFA272_eofS);
    static readonly char[] DFA272_min = DFA.UnpackEncodedStringToUnsignedChars(DFA272_minS);
    static readonly char[] DFA272_max = DFA.UnpackEncodedStringToUnsignedChars(DFA272_maxS);
    static readonly short[] DFA272_accept = DFA.UnpackEncodedString(DFA272_acceptS);
    static readonly short[] DFA272_special = DFA.UnpackEncodedString(DFA272_specialS);
    static readonly short[][] DFA272_transition = DFA.UnpackEncodedStringArray(DFA272_transitionS);

    protected class DFA272 : DFA
    {
        public DFA272(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = DFA272_eot;
            this.eof = DFA272_eof;
            this.min = DFA272_min;
            this.max = DFA272_max;
            this.accept = DFA272_accept;
            this.special = DFA272_special;
            this.transition = DFA272_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 859:50: ( LineTerminator )*"; }
        }

    }

    const string DFA274_eotS =
        "\x0b\uffff";
    const string DFA274_eofS =
        "\x0b\uffff";
    const string DFA274_minS =
        "\x01\x05\x0a\uffff";
    const string DFA274_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA274_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA274_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA274_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA274_eot = DFA.UnpackEncodedString(DFA274_eotS);
    static readonly short[] DFA274_eof = DFA.UnpackEncodedString(DFA274_eofS);
    static readonly char[] DFA274_min = DFA.UnpackEncodedStringToUnsignedChars(DFA274_minS);
    static readonly char[] DFA274_max = DFA.UnpackEncodedStringToUnsignedChars(DFA274_maxS);
    static readonly short[] DFA274_accept = DFA.UnpackEncodedString(DFA274_acceptS);
    static readonly short[] DFA274_special = DFA.UnpackEncodedString(DFA274_specialS);
    static readonly short[][] DFA274_transition = DFA.UnpackEncodedStringArray(DFA274_transitionS);

    protected class DFA274 : DFA
    {
        public DFA274(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 274;
            this.eot = DFA274_eot;
            this.eof = DFA274_eof;
            this.min = DFA274_min;
            this.max = DFA274_max;
            this.accept = DFA274_accept;
            this.special = DFA274_special;
            this.transition = DFA274_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 863:46: ( LineTerminator )*"; }
        }

    }

    const string DFA276_eotS =
        "\x0b\uffff";
    const string DFA276_eofS =
        "\x0b\uffff";
    const string DFA276_minS =
        "\x01\x05\x0a\uffff";
    const string DFA276_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA276_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA276_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA276_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA276_eot = DFA.UnpackEncodedString(DFA276_eotS);
    static readonly short[] DFA276_eof = DFA.UnpackEncodedString(DFA276_eofS);
    static readonly char[] DFA276_min = DFA.UnpackEncodedStringToUnsignedChars(DFA276_minS);
    static readonly char[] DFA276_max = DFA.UnpackEncodedStringToUnsignedChars(DFA276_maxS);
    static readonly short[] DFA276_accept = DFA.UnpackEncodedString(DFA276_acceptS);
    static readonly short[] DFA276_special = DFA.UnpackEncodedString(DFA276_specialS);
    static readonly short[][] DFA276_transition = DFA.UnpackEncodedStringArray(DFA276_transitionS);

    protected class DFA276 : DFA
    {
        public DFA276(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 276;
            this.eot = DFA276_eot;
            this.eof = DFA276_eof;
            this.min = DFA276_min;
            this.max = DFA276_max;
            this.accept = DFA276_accept;
            this.special = DFA276_special;
            this.transition = DFA276_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 867:50: ( LineTerminator )*"; }
        }

    }

    const string DFA278_eotS =
        "\x0b\uffff";
    const string DFA278_eofS =
        "\x0b\uffff";
    const string DFA278_minS =
        "\x01\x05\x0a\uffff";
    const string DFA278_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA278_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA278_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA278_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA278_eot = DFA.UnpackEncodedString(DFA278_eotS);
    static readonly short[] DFA278_eof = DFA.UnpackEncodedString(DFA278_eofS);
    static readonly char[] DFA278_min = DFA.UnpackEncodedStringToUnsignedChars(DFA278_minS);
    static readonly char[] DFA278_max = DFA.UnpackEncodedStringToUnsignedChars(DFA278_maxS);
    static readonly short[] DFA278_accept = DFA.UnpackEncodedString(DFA278_acceptS);
    static readonly short[] DFA278_special = DFA.UnpackEncodedString(DFA278_specialS);
    static readonly short[][] DFA278_transition = DFA.UnpackEncodedStringArray(DFA278_transitionS);

    protected class DFA278 : DFA
    {
        public DFA278(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 278;
            this.eot = DFA278_eot;
            this.eof = DFA278_eof;
            this.min = DFA278_min;
            this.max = DFA278_max;
            this.accept = DFA278_accept;
            this.special = DFA278_special;
            this.transition = DFA278_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 871:46: ( LineTerminator )*"; }
        }

    }

    const string DFA280_eotS =
        "\x0b\uffff";
    const string DFA280_eofS =
        "\x0b\uffff";
    const string DFA280_minS =
        "\x01\x05\x0a\uffff";
    const string DFA280_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA280_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA280_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA280_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA280_eot = DFA.UnpackEncodedString(DFA280_eotS);
    static readonly short[] DFA280_eof = DFA.UnpackEncodedString(DFA280_eofS);
    static readonly char[] DFA280_min = DFA.UnpackEncodedStringToUnsignedChars(DFA280_minS);
    static readonly char[] DFA280_max = DFA.UnpackEncodedStringToUnsignedChars(DFA280_maxS);
    static readonly short[] DFA280_accept = DFA.UnpackEncodedString(DFA280_acceptS);
    static readonly short[] DFA280_special = DFA.UnpackEncodedString(DFA280_specialS);
    static readonly short[][] DFA280_transition = DFA.UnpackEncodedStringArray(DFA280_transitionS);

    protected class DFA280 : DFA
    {
        public DFA280(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 280;
            this.eot = DFA280_eot;
            this.eof = DFA280_eof;
            this.min = DFA280_min;
            this.max = DFA280_max;
            this.accept = DFA280_accept;
            this.special = DFA280_special;
            this.transition = DFA280_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 875:50: ( LineTerminator )*"; }
        }

    }

    const string DFA282_eotS =
        "\x0b\uffff";
    const string DFA282_eofS =
        "\x0b\uffff";
    const string DFA282_minS =
        "\x01\x05\x0a\uffff";
    const string DFA282_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA282_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA282_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA282_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA282_eot = DFA.UnpackEncodedString(DFA282_eotS);
    static readonly short[] DFA282_eof = DFA.UnpackEncodedString(DFA282_eofS);
    static readonly char[] DFA282_min = DFA.UnpackEncodedStringToUnsignedChars(DFA282_minS);
    static readonly char[] DFA282_max = DFA.UnpackEncodedStringToUnsignedChars(DFA282_maxS);
    static readonly short[] DFA282_accept = DFA.UnpackEncodedString(DFA282_acceptS);
    static readonly short[] DFA282_special = DFA.UnpackEncodedString(DFA282_specialS);
    static readonly short[][] DFA282_transition = DFA.UnpackEncodedStringArray(DFA282_transitionS);

    protected class DFA282 : DFA
    {
        public DFA282(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 282;
            this.eot = DFA282_eot;
            this.eof = DFA282_eof;
            this.min = DFA282_min;
            this.max = DFA282_max;
            this.accept = DFA282_accept;
            this.special = DFA282_special;
            this.transition = DFA282_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 879:47: ( LineTerminator )*"; }
        }

    }

    const string DFA284_eotS =
        "\x0b\uffff";
    const string DFA284_eofS =
        "\x0b\uffff";
    const string DFA284_minS =
        "\x01\x05\x0a\uffff";
    const string DFA284_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA284_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA284_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA284_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA284_eot = DFA.UnpackEncodedString(DFA284_eotS);
    static readonly short[] DFA284_eof = DFA.UnpackEncodedString(DFA284_eofS);
    static readonly char[] DFA284_min = DFA.UnpackEncodedStringToUnsignedChars(DFA284_minS);
    static readonly char[] DFA284_max = DFA.UnpackEncodedStringToUnsignedChars(DFA284_maxS);
    static readonly short[] DFA284_accept = DFA.UnpackEncodedString(DFA284_acceptS);
    static readonly short[] DFA284_special = DFA.UnpackEncodedString(DFA284_specialS);
    static readonly short[][] DFA284_transition = DFA.UnpackEncodedStringArray(DFA284_transitionS);

    protected class DFA284 : DFA
    {
        public DFA284(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 284;
            this.eot = DFA284_eot;
            this.eof = DFA284_eof;
            this.min = DFA284_min;
            this.max = DFA284_max;
            this.accept = DFA284_accept;
            this.special = DFA284_special;
            this.transition = DFA284_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 883:51: ( LineTerminator )*"; }
        }

    }

    const string DFA286_eotS =
        "\x0b\uffff";
    const string DFA286_eofS =
        "\x0b\uffff";
    const string DFA286_minS =
        "\x01\x05\x0a\uffff";
    const string DFA286_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA286_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA286_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA286_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA286_eot = DFA.UnpackEncodedString(DFA286_eotS);
    static readonly short[] DFA286_eof = DFA.UnpackEncodedString(DFA286_eofS);
    static readonly char[] DFA286_min = DFA.UnpackEncodedStringToUnsignedChars(DFA286_minS);
    static readonly char[] DFA286_max = DFA.UnpackEncodedStringToUnsignedChars(DFA286_maxS);
    static readonly short[] DFA286_accept = DFA.UnpackEncodedString(DFA286_acceptS);
    static readonly short[] DFA286_special = DFA.UnpackEncodedString(DFA286_specialS);
    static readonly short[][] DFA286_transition = DFA.UnpackEncodedStringArray(DFA286_transitionS);

    protected class DFA286 : DFA
    {
        public DFA286(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 286;
            this.eot = DFA286_eot;
            this.eof = DFA286_eof;
            this.min = DFA286_min;
            this.max = DFA286_max;
            this.accept = DFA286_accept;
            this.special = DFA286_special;
            this.transition = DFA286_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 887:45: ( LineTerminator )*"; }
        }

    }

    const string DFA288_eotS =
        "\x0b\uffff";
    const string DFA288_eofS =
        "\x0b\uffff";
    const string DFA288_minS =
        "\x01\x05\x0a\uffff";
    const string DFA288_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA288_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA288_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA288_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA288_eot = DFA.UnpackEncodedString(DFA288_eotS);
    static readonly short[] DFA288_eof = DFA.UnpackEncodedString(DFA288_eofS);
    static readonly char[] DFA288_min = DFA.UnpackEncodedStringToUnsignedChars(DFA288_minS);
    static readonly char[] DFA288_max = DFA.UnpackEncodedStringToUnsignedChars(DFA288_maxS);
    static readonly short[] DFA288_accept = DFA.UnpackEncodedString(DFA288_acceptS);
    static readonly short[] DFA288_special = DFA.UnpackEncodedString(DFA288_specialS);
    static readonly short[][] DFA288_transition = DFA.UnpackEncodedStringArray(DFA288_transitionS);

    protected class DFA288 : DFA
    {
        public DFA288(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 288;
            this.eot = DFA288_eot;
            this.eof = DFA288_eof;
            this.min = DFA288_min;
            this.max = DFA288_max;
            this.accept = DFA288_accept;
            this.special = DFA288_special;
            this.transition = DFA288_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 887:102: ( LineTerminator )*"; }
        }

    }

    const string DFA290_eotS =
        "\x0b\uffff";
    const string DFA290_eofS =
        "\x0b\uffff";
    const string DFA290_minS =
        "\x01\x05\x0a\uffff";
    const string DFA290_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA290_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA290_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA290_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA290_eot = DFA.UnpackEncodedString(DFA290_eotS);
    static readonly short[] DFA290_eof = DFA.UnpackEncodedString(DFA290_eofS);
    static readonly char[] DFA290_min = DFA.UnpackEncodedStringToUnsignedChars(DFA290_minS);
    static readonly char[] DFA290_max = DFA.UnpackEncodedStringToUnsignedChars(DFA290_maxS);
    static readonly short[] DFA290_accept = DFA.UnpackEncodedString(DFA290_acceptS);
    static readonly short[] DFA290_special = DFA.UnpackEncodedString(DFA290_specialS);
    static readonly short[][] DFA290_transition = DFA.UnpackEncodedStringArray(DFA290_transitionS);

    protected class DFA290 : DFA
    {
        public DFA290(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 290;
            this.eot = DFA290_eot;
            this.eof = DFA290_eof;
            this.min = DFA290_min;
            this.max = DFA290_max;
            this.accept = DFA290_accept;
            this.special = DFA290_special;
            this.transition = DFA290_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 891:49: ( LineTerminator )*"; }
        }

    }

    const string DFA292_eotS =
        "\x0b\uffff";
    const string DFA292_eofS =
        "\x0b\uffff";
    const string DFA292_minS =
        "\x01\x05\x0a\uffff";
    const string DFA292_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA292_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA292_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA292_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA292_eot = DFA.UnpackEncodedString(DFA292_eotS);
    static readonly short[] DFA292_eof = DFA.UnpackEncodedString(DFA292_eofS);
    static readonly char[] DFA292_min = DFA.UnpackEncodedStringToUnsignedChars(DFA292_minS);
    static readonly char[] DFA292_max = DFA.UnpackEncodedStringToUnsignedChars(DFA292_maxS);
    static readonly short[] DFA292_accept = DFA.UnpackEncodedString(DFA292_acceptS);
    static readonly short[] DFA292_special = DFA.UnpackEncodedString(DFA292_specialS);
    static readonly short[][] DFA292_transition = DFA.UnpackEncodedStringArray(DFA292_transitionS);

    protected class DFA292 : DFA
    {
        public DFA292(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 292;
            this.eot = DFA292_eot;
            this.eof = DFA292_eof;
            this.min = DFA292_min;
            this.max = DFA292_max;
            this.accept = DFA292_accept;
            this.special = DFA292_special;
            this.transition = DFA292_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 891:106: ( LineTerminator )*"; }
        }

    }

    const string DFA294_eotS =
        "\x0b\uffff";
    const string DFA294_eofS =
        "\x0b\uffff";
    const string DFA294_minS =
        "\x01\x05\x0a\uffff";
    const string DFA294_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA294_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA294_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA294_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA294_eot = DFA.UnpackEncodedString(DFA294_eotS);
    static readonly short[] DFA294_eof = DFA.UnpackEncodedString(DFA294_eofS);
    static readonly char[] DFA294_min = DFA.UnpackEncodedStringToUnsignedChars(DFA294_minS);
    static readonly char[] DFA294_max = DFA.UnpackEncodedStringToUnsignedChars(DFA294_maxS);
    static readonly short[] DFA294_accept = DFA.UnpackEncodedString(DFA294_acceptS);
    static readonly short[] DFA294_special = DFA.UnpackEncodedString(DFA294_specialS);
    static readonly short[][] DFA294_transition = DFA.UnpackEncodedStringArray(DFA294_transitionS);

    protected class DFA294 : DFA
    {
        public DFA294(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 294;
            this.eot = DFA294_eot;
            this.eof = DFA294_eof;
            this.min = DFA294_min;
            this.max = DFA294_max;
            this.accept = DFA294_accept;
            this.special = DFA294_special;
            this.transition = DFA294_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 909:46: ( LineTerminator )*"; }
        }

    }

    const string DFA296_eotS =
        "\x0b\uffff";
    const string DFA296_eofS =
        "\x0b\uffff";
    const string DFA296_minS =
        "\x01\x05\x0a\uffff";
    const string DFA296_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA296_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA296_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA296_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA296_eot = DFA.UnpackEncodedString(DFA296_eotS);
    static readonly short[] DFA296_eof = DFA.UnpackEncodedString(DFA296_eofS);
    static readonly char[] DFA296_min = DFA.UnpackEncodedStringToUnsignedChars(DFA296_minS);
    static readonly char[] DFA296_max = DFA.UnpackEncodedStringToUnsignedChars(DFA296_maxS);
    static readonly short[] DFA296_accept = DFA.UnpackEncodedString(DFA296_acceptS);
    static readonly short[] DFA296_special = DFA.UnpackEncodedString(DFA296_specialS);
    static readonly short[][] DFA296_transition = DFA.UnpackEncodedStringArray(DFA296_transitionS);

    protected class DFA296 : DFA
    {
        public DFA296(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 296;
            this.eot = DFA296_eot;
            this.eof = DFA296_eof;
            this.min = DFA296_min;
            this.max = DFA296_max;
            this.accept = DFA296_accept;
            this.special = DFA296_special;
            this.transition = DFA296_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 913:50: ( LineTerminator )*"; }
        }

    }

    const string DFA297_eotS =
        "\x18\uffff";
    const string DFA297_eofS =
        "\x18\uffff";
    const string DFA297_minS =
        "\x01\x05\x17\uffff";
    const string DFA297_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA297_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA297_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA297_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA297_eot = DFA.UnpackEncodedString(DFA297_eotS);
    static readonly short[] DFA297_eof = DFA.UnpackEncodedString(DFA297_eofS);
    static readonly char[] DFA297_min = DFA.UnpackEncodedStringToUnsignedChars(DFA297_minS);
    static readonly char[] DFA297_max = DFA.UnpackEncodedStringToUnsignedChars(DFA297_maxS);
    static readonly short[] DFA297_accept = DFA.UnpackEncodedString(DFA297_acceptS);
    static readonly short[] DFA297_special = DFA.UnpackEncodedString(DFA297_specialS);
    static readonly short[][] DFA297_transition = DFA.UnpackEncodedStringArray(DFA297_transitionS);

    protected class DFA297 : DFA
    {
        public DFA297(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 297;
            this.eot = DFA297_eot;
            this.eof = DFA297_eof;
            this.min = DFA297_min;
            this.max = DFA297_max;
            this.accept = DFA297_accept;
            this.special = DFA297_special;
            this.transition = DFA297_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 942:15: ( LineTerminator )*"; }
        }

    }

    const string DFA308_eotS =
        "\x18\uffff";
    const string DFA308_eofS =
        "\x18\uffff";
    const string DFA308_minS =
        "\x01\x05\x17\uffff";
    const string DFA308_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA308_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA308_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA308_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA308_eot = DFA.UnpackEncodedString(DFA308_eotS);
    static readonly short[] DFA308_eof = DFA.UnpackEncodedString(DFA308_eofS);
    static readonly char[] DFA308_min = DFA.UnpackEncodedStringToUnsignedChars(DFA308_minS);
    static readonly char[] DFA308_max = DFA.UnpackEncodedStringToUnsignedChars(DFA308_maxS);
    static readonly short[] DFA308_accept = DFA.UnpackEncodedString(DFA308_acceptS);
    static readonly short[] DFA308_special = DFA.UnpackEncodedString(DFA308_specialS);
    static readonly short[][] DFA308_transition = DFA.UnpackEncodedStringArray(DFA308_transitionS);

    protected class DFA308 : DFA
    {
        public DFA308(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 308;
            this.eot = DFA308_eot;
            this.eof = DFA308_eof;
            this.min = DFA308_min;
            this.max = DFA308_max;
            this.accept = DFA308_accept;
            this.special = DFA308_special;
            this.transition = DFA308_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 982:126: ( LineTerminator )*"; }
        }

    }

    const string DFA309_eotS =
        "\x0c\uffff";
    const string DFA309_eofS =
        "\x0c\uffff";
    const string DFA309_minS =
        "\x01\x05\x0b\uffff";
    const string DFA309_maxS =
        "\x01\x6b\x0b\uffff";
    const string DFA309_acceptS =
        "\x01\uffff\x01\x02\x09\uffff\x01\x01";
    const string DFA309_specialS =
        "\x0c\uffff}>";
    static readonly string[] DFA309_transitionS = {
            "\x01\x0b\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x01\x01\x11\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA309_eot = DFA.UnpackEncodedString(DFA309_eotS);
    static readonly short[] DFA309_eof = DFA.UnpackEncodedString(DFA309_eofS);
    static readonly char[] DFA309_min = DFA.UnpackEncodedStringToUnsignedChars(DFA309_minS);
    static readonly char[] DFA309_max = DFA.UnpackEncodedStringToUnsignedChars(DFA309_maxS);
    static readonly short[] DFA309_accept = DFA.UnpackEncodedString(DFA309_acceptS);
    static readonly short[] DFA309_special = DFA.UnpackEncodedString(DFA309_specialS);
    static readonly short[][] DFA309_transition = DFA.UnpackEncodedStringArray(DFA309_transitionS);

    protected class DFA309 : DFA
    {
        public DFA309(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 309;
            this.eot = DFA309_eot;
            this.eof = DFA309_eof;
            this.min = DFA309_min;
            this.max = DFA309_max;
            this.accept = DFA309_accept;
            this.special = DFA309_special;
            this.transition = DFA309_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1001:31: ( LineTerminator )*"; }
        }

    }

    const string DFA310_eotS =
        "\x0b\uffff";
    const string DFA310_eofS =
        "\x0b\uffff";
    const string DFA310_minS =
        "\x01\x05\x0a\uffff";
    const string DFA310_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA310_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA310_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA310_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA310_eot = DFA.UnpackEncodedString(DFA310_eotS);
    static readonly short[] DFA310_eof = DFA.UnpackEncodedString(DFA310_eofS);
    static readonly char[] DFA310_min = DFA.UnpackEncodedStringToUnsignedChars(DFA310_minS);
    static readonly char[] DFA310_max = DFA.UnpackEncodedStringToUnsignedChars(DFA310_maxS);
    static readonly short[] DFA310_accept = DFA.UnpackEncodedString(DFA310_acceptS);
    static readonly short[] DFA310_special = DFA.UnpackEncodedString(DFA310_specialS);
    static readonly short[][] DFA310_transition = DFA.UnpackEncodedStringArray(DFA310_transitionS);

    protected class DFA310 : DFA
    {
        public DFA310(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 310;
            this.eot = DFA310_eot;
            this.eof = DFA310_eof;
            this.min = DFA310_min;
            this.max = DFA310_max;
            this.accept = DFA310_accept;
            this.special = DFA310_special;
            this.transition = DFA310_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1001:98: ( LineTerminator )*"; }
        }

    }

    const string DFA311_eotS =
        "\x0b\uffff";
    const string DFA311_eofS =
        "\x0b\uffff";
    const string DFA311_minS =
        "\x01\x05\x0a\uffff";
    const string DFA311_maxS =
        "\x01\x6b\x0a\uffff";
    const string DFA311_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA311_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA311_transitionS = {
            "\x01\x0a\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x34\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA311_eot = DFA.UnpackEncodedString(DFA311_eotS);
    static readonly short[] DFA311_eof = DFA.UnpackEncodedString(DFA311_eofS);
    static readonly char[] DFA311_min = DFA.UnpackEncodedStringToUnsignedChars(DFA311_minS);
    static readonly char[] DFA311_max = DFA.UnpackEncodedStringToUnsignedChars(DFA311_maxS);
    static readonly short[] DFA311_accept = DFA.UnpackEncodedString(DFA311_acceptS);
    static readonly short[] DFA311_special = DFA.UnpackEncodedString(DFA311_specialS);
    static readonly short[][] DFA311_transition = DFA.UnpackEncodedStringArray(DFA311_transitionS);

    protected class DFA311 : DFA
    {
        public DFA311(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 311;
            this.eot = DFA311_eot;
            this.eof = DFA311_eof;
            this.min = DFA311_min;
            this.max = DFA311_max;
            this.accept = DFA311_accept;
            this.special = DFA311_special;
            this.transition = DFA311_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1001:148: ( LineTerminator )*"; }
        }

    }

    const string DFA325_eotS =
        "\x18\uffff";
    const string DFA325_eofS =
        "\x18\uffff";
    const string DFA325_minS =
        "\x01\x05\x17\uffff";
    const string DFA325_maxS =
        "\x01\x6b\x17\uffff";
    const string DFA325_acceptS =
        "\x01\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA325_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA325_transitionS = {
            "\x01\x17\x06\uffff\x01\x01\x05\uffff\x04\x01\x0d\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x02\uffff\x01\x01\x02\uffff\x01\x01\x01"+
            "\uffff\x09\x01\x22\uffff\x03\x01\x01\uffff\x08\x01\x02\uffff"+
            "\x02\x01\x02\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA325_eot = DFA.UnpackEncodedString(DFA325_eotS);
    static readonly short[] DFA325_eof = DFA.UnpackEncodedString(DFA325_eofS);
    static readonly char[] DFA325_min = DFA.UnpackEncodedStringToUnsignedChars(DFA325_minS);
    static readonly char[] DFA325_max = DFA.UnpackEncodedStringToUnsignedChars(DFA325_maxS);
    static readonly short[] DFA325_accept = DFA.UnpackEncodedString(DFA325_acceptS);
    static readonly short[] DFA325_special = DFA.UnpackEncodedString(DFA325_specialS);
    static readonly short[][] DFA325_transition = DFA.UnpackEncodedStringArray(DFA325_transitionS);

    protected class DFA325 : DFA
    {
        public DFA325(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 325;
            this.eot = DFA325_eot;
            this.eof = DFA325_eof;
            this.min = DFA325_min;
            this.max = DFA325_max;
            this.accept = DFA325_accept;
            this.special = DFA325_special;
            this.transition = DFA325_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1095:19: ( LineTerminator )*"; }
        }

    }

 

    public static readonly BitSet FOLLOW_program_in_compilationUnit87 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_literal0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_35_in_primaryExpression3581 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_Identifier_in_primaryExpression3586 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_literal_in_primaryExpression3591 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arrayLiteral_in_primaryExpression3596 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_objectLiteral_in_primaryExpression3601 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_36_in_primaryExpression3606 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_primaryExpression3609 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_primaryExpression3612 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_primaryExpression3614 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_37_in_primaryExpression3617 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_38_in_arrayLiteral3629 = new BitSet(new ulong[]{0x007FD3D8003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_arrayLiteral3631 = new BitSet(new ulong[]{0x007FD3D8003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_arrayLiteral3634 = new BitSet(new ulong[]{0x0000018000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_arrayLiteral3638 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_arrayLiteral3641 = new BitSet(new ulong[]{0x007FD3D8003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_arrayLiteral3644 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_arrayLiteral3647 = new BitSet(new ulong[]{0x0000018000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_arrayLiteral3653 = new BitSet(new ulong[]{0x0000010000000020UL});
    public static readonly BitSet FOLLOW_40_in_arrayLiteral3656 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_41_in_objectLiteral3668 = new BitSet(new ulong[]{0x0000000000301020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_objectLiteral3670 = new BitSet(new ulong[]{0x0000000000301020UL});
    public static readonly BitSet FOLLOW_propertyNameAndValue_in_objectLiteral3673 = new BitSet(new ulong[]{0x0000048000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_objectLiteral3676 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_objectLiteral3679 = new BitSet(new ulong[]{0x0000000000301020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_objectLiteral3681 = new BitSet(new ulong[]{0x0000000000301020UL});
    public static readonly BitSet FOLLOW_propertyNameAndValue_in_objectLiteral3684 = new BitSet(new ulong[]{0x0000048000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_objectLiteral3688 = new BitSet(new ulong[]{0x0000040000000020UL});
    public static readonly BitSet FOLLOW_42_in_objectLiteral3691 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_propertyName_in_propertyNameAndValue3702 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_propertyNameAndValue3704 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_propertyNameAndValue3707 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_propertyNameAndValue3709 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_propertyNameAndValue3712 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_propertyName0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primaryExpression_in_memberExpression3746 = new BitSet(new ulong[]{0x0000204000000022UL});
    public static readonly BitSet FOLLOW_functionExpression_in_memberExpression3750 = new BitSet(new ulong[]{0x0000204000000022UL});
    public static readonly BitSet FOLLOW_44_in_memberExpression3754 = new BitSet(new ulong[]{0x00001258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_memberExpression3756 = new BitSet(new ulong[]{0x00001258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_memberExpression_in_memberExpression3759 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_memberExpression3761 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_argumentList_in_memberExpression3764 = new BitSet(new ulong[]{0x0000204000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_memberExpression3768 = new BitSet(new ulong[]{0x0000204000000020UL});
    public static readonly BitSet FOLLOW_memberExpressionSuffix_in_memberExpression3771 = new BitSet(new ulong[]{0x0000204000000022UL});
    public static readonly BitSet FOLLOW_indexSuffix_in_memberExpressionSuffix3785 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3790 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_memberExpression_in_newExpression3802 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_44_in_newExpression3807 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_newExpression3809 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_newExpression_in_newExpression3812 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_memberExpression_in_callExpression3824 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_callExpression3826 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_argumentList_in_callExpression3829 = new BitSet(new ulong[]{0x0000205000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_callExpression3832 = new BitSet(new ulong[]{0x0000205000000020UL});
    public static readonly BitSet FOLLOW_callExpressionSuffix_in_callExpression3835 = new BitSet(new ulong[]{0x0000205000000022UL});
    public static readonly BitSet FOLLOW_argumentList_in_callExpressionSuffix3849 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_indexSuffix_in_callExpressionSuffix3854 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3859 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_38_in_indexSuffix3870 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_indexSuffix3872 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_indexSuffix3875 = new BitSet(new ulong[]{0x0000010000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_indexSuffix3877 = new BitSet(new ulong[]{0x0000010000000020UL});
    public static readonly BitSet FOLLOW_40_in_indexSuffix3880 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_45_in_propertyReferenceSuffix3893 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_propertyReferenceSuffix3895 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_propertyReferenceSuffix3898 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_36_in_argumentList3910 = new BitSet(new ulong[]{0x007FD278003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_argumentList3913 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_argumentList3916 = new BitSet(new ulong[]{0x000000A000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_argumentList3919 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_argumentList3922 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_argumentList3924 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_argumentList3927 = new BitSet(new ulong[]{0x000000A000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_argumentList3933 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_37_in_argumentList3936 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_callExpression_in_leftHandSideExpression3948 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_newExpression_in_leftHandSideExpression3953 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_leftHandSideExpression_in_postfixExpression3964 = new BitSet(new ulong[]{0x0000C00000000002UL});
    public static readonly BitSet FOLLOW_set_in_postfixExpression3966 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_postfixExpression_in_unaryExpression3984 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_unaryExpression3989 = new BitSet(new ulong[]{0x007FD258003C1000UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpression4025 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unaryExpression_in_multiplicativeExpression4036 = new BitSet(new ulong[]{0x0380000000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_multiplicativeExpression4039 = new BitSet(new ulong[]{0x0380000000000020UL});
    public static readonly BitSet FOLLOW_set_in_multiplicativeExpression4042 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_multiplicativeExpression4054 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_unaryExpression_in_multiplicativeExpression4057 = new BitSet(new ulong[]{0x0380000000000022UL});
    public static readonly BitSet FOLLOW_multiplicativeExpression_in_additiveExpression4070 = new BitSet(new ulong[]{0x0018000000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_additiveExpression4073 = new BitSet(new ulong[]{0x0018000000000020UL});
    public static readonly BitSet FOLLOW_set_in_additiveExpression4076 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_additiveExpression4084 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_multiplicativeExpression_in_additiveExpression4087 = new BitSet(new ulong[]{0x0018000000000022UL});
    public static readonly BitSet FOLLOW_additiveExpression_in_shiftExpression4100 = new BitSet(new ulong[]{0x1C00000000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_shiftExpression4103 = new BitSet(new ulong[]{0x1C00000000000020UL});
    public static readonly BitSet FOLLOW_set_in_shiftExpression4106 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_shiftExpression4118 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_additiveExpression_in_shiftExpression4121 = new BitSet(new ulong[]{0x1C00000000000022UL});
    public static readonly BitSet FOLLOW_shiftExpression_in_relationalExpression4134 = new BitSet(new ulong[]{0xE000000000000022UL,0x0000000000000007UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_relationalExpression4137 = new BitSet(new ulong[]{0xE000000000000020UL,0x0000000000000007UL});
    public static readonly BitSet FOLLOW_set_in_relationalExpression4140 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_relationalExpression4164 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_shiftExpression_in_relationalExpression4167 = new BitSet(new ulong[]{0xE000000000000022UL,0x0000000000000007UL});
    public static readonly BitSet FOLLOW_shiftExpression_in_relationalExpressionNoIn4181 = new BitSet(new ulong[]{0xE000000000000022UL,0x0000000000000003UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_relationalExpressionNoIn4184 = new BitSet(new ulong[]{0xE000000000000020UL,0x0000000000000003UL});
    public static readonly BitSet FOLLOW_set_in_relationalExpressionNoIn4187 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_relationalExpressionNoIn4208 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_shiftExpression_in_relationalExpressionNoIn4211 = new BitSet(new ulong[]{0xE000000000000022UL,0x0000000000000003UL});
    public static readonly BitSet FOLLOW_relationalExpression_in_equalityExpression4225 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000078UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_equalityExpression4228 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000078UL});
    public static readonly BitSet FOLLOW_set_in_equalityExpression4231 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_equalityExpression4247 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_relationalExpression_in_equalityExpression4250 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000078UL});
    public static readonly BitSet FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4263 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000078UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_equalityExpressionNoIn4266 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000078UL});
    public static readonly BitSet FOLLOW_set_in_equalityExpressionNoIn4269 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_equalityExpressionNoIn4285 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4288 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000078UL});
    public static readonly BitSet FOLLOW_equalityExpression_in_bitwiseANDExpression4301 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseANDExpression4304 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_71_in_bitwiseANDExpression4307 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseANDExpression4309 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_equalityExpression_in_bitwiseANDExpression4312 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4326 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseANDExpressionNoIn4329 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_71_in_bitwiseANDExpressionNoIn4332 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseANDExpressionNoIn4334 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4337 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4350 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseXORExpression4353 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_72_in_bitwiseXORExpression4356 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseXORExpression4358 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4361 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4375 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseXORExpressionNoIn4378 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_72_in_bitwiseXORExpressionNoIn4381 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseXORExpressionNoIn4383 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4386 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4400 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseORExpression4403 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_73_in_bitwiseORExpression4406 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseORExpression4408 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4411 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4425 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseORExpressionNoIn4428 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_73_in_bitwiseORExpressionNoIn4431 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_bitwiseORExpressionNoIn4433 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4436 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_bitwiseORExpression_in_logicalANDExpression4450 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_logicalANDExpression4453 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_74_in_logicalANDExpression4456 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_logicalANDExpression4458 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseORExpression_in_logicalANDExpression4461 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4475 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_logicalANDExpressionNoIn4478 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_74_in_logicalANDExpressionNoIn4481 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_logicalANDExpressionNoIn4483 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4486 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_logicalANDExpression_in_logicalORExpression4500 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_logicalORExpression4503 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_75_in_logicalORExpression4506 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_logicalORExpression4508 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_logicalANDExpression_in_logicalORExpression4511 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4524 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_logicalORExpressionNoIn4527 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_75_in_logicalORExpressionNoIn4530 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_logicalORExpressionNoIn4532 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4535 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_logicalORExpression_in_conditionalExpression4549 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_conditionalExpression4552 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_76_in_conditionalExpression4555 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_conditionalExpression4557 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_conditionalExpression4560 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_conditionalExpression4562 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_conditionalExpression4565 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_conditionalExpression4567 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_conditionalExpression4570 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn4584 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_conditionalExpressionNoIn4587 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_76_in_conditionalExpressionNoIn4590 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_conditionalExpressionNoIn4592 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_conditionalExpressionNoIn4595 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_conditionalExpressionNoIn4597 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_conditionalExpressionNoIn4600 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_conditionalExpressionNoIn4602 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_conditionalExpressionNoIn4605 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_conditionalExpression_in_assignmentExpression4618 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_leftHandSideExpression_in_assignmentExpression4623 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000001FFE000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_assignmentExpression4625 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000001FFE000UL});
    public static readonly BitSet FOLLOW_assignmentOperator_in_assignmentExpression4628 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_assignmentExpression4630 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_assignmentExpression4633 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4645 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4650 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000001FFE000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_assignmentExpressionNoIn4652 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000001FFE000UL});
    public static readonly BitSet FOLLOW_assignmentOperator_in_assignmentExpressionNoIn4655 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_assignmentExpressionNoIn4657 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn4660 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_assignmentOperator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_expression4728 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_expression4731 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_expression4734 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_expression4736 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_expression4739 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4753 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_expressionNoIn4756 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_expressionNoIn4759 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_expressionNoIn4761 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4764 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_blockStatement_in_statement4782 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variableStatement_in_statement4787 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_emptyStatement_in_statement4792 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expressionStatement_in_statement4797 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ifStatement_in_statement4802 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_iterationStatement_in_statement4807 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_continueStatement_in_statement4812 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_breakStatement_in_statement4817 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_returnStatement_in_statement4822 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_withStatement_in_statement4827 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_labelledStatement_in_statement4832 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_switchStatement_in_statement4837 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_throwStatement_in_statement4842 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_tryStatement_in_statement4847 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_41_in_blockStatement4858 = new BitSet(new ulong[]{0x007FD278003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_blockStatement4860 = new BitSet(new ulong[]{0x007FD278003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statementList_in_blockStatement4863 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_blockStatement4866 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_37_in_blockStatement4869 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_in_statementList4881 = new BitSet(new ulong[]{0x007FD258003C1022UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_statementList4884 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statement_in_statementList4887 = new BitSet(new ulong[]{0x007FD258003C1022UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_89_in_variableStatement4901 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_variableStatement4903 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_variableDeclarationList_in_variableStatement4906 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_set_in_variableStatement4908 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variableDeclaration_in_variableDeclarationList4926 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_variableDeclarationList4929 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_variableDeclarationList4932 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_variableDeclarationList4934 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_variableDeclaration_in_variableDeclarationList4937 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn4951 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_variableDeclarationListNoIn4954 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_variableDeclarationListNoIn4957 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_variableDeclarationListNoIn4959 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn4962 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_Identifier_in_variableDeclaration4975 = new BitSet(new ulong[]{0x0000080000000022UL,0x0000000000002000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_variableDeclaration4978 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_variableDeclaration4981 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_variableDeclaration4983 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_variableDeclaration4986 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000002000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_variableDeclaration4990 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000002000UL});
    public static readonly BitSet FOLLOW_initialiser_in_variableDeclaration4993 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_Identifier_in_variableDeclarationNoIn5005 = new BitSet(new ulong[]{0x0000080000000022UL,0x0000000000002000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_variableDeclarationNoIn5008 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_variableDeclarationNoIn5011 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_variableDeclarationNoIn5013 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_variableDeclarationNoIn5016 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000002000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_variableDeclarationNoIn5020 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000000002000UL});
    public static readonly BitSet FOLLOW_initialiserNoIn_in_variableDeclarationNoIn5023 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_77_in_initialiser5035 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_initialiser5037 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_initialiser5040 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_77_in_initialiserNoIn5052 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_initialiserNoIn5054 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn5057 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_90_in_emptyStatement5069 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_expressionStatement5081 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_expressionStatement5084 = new BitSet(new ulong[]{0x0000000000000022UL});
    public static readonly BitSet FOLLOW_90_in_expressionStatement5089 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_91_in_ifStatement5101 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_ifStatement5103 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_36_in_ifStatement5106 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_ifStatement5108 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_ifStatement5111 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_ifStatement5113 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_37_in_ifStatement5116 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FFE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_ifStatement5118 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FFE000000UL});
    public static readonly BitSet FOLLOW_statement_in_ifStatement5121 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_ifStatement5124 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_92_in_ifStatement5127 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_ifStatement5129 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statement_in_ifStatement5132 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_doWhileStatement_in_iterationStatement5145 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_whileStatement_in_iterationStatement5150 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_forStatement_in_iterationStatement5155 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_forInStatement_in_iterationStatement5160 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_93_in_doWhileStatement5172 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_doWhileStatement5174 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statement_in_doWhileStatement5177 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_doWhileStatement5179 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_94_in_doWhileStatement5182 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_doWhileStatement5184 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_36_in_doWhileStatement5187 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_doWhileStatement5189 = new BitSet(new ulong[]{0x0000002000000000UL});
    public static readonly BitSet FOLLOW_37_in_doWhileStatement5191 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_set_in_doWhileStatement5193 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_94_in_whileStatement5211 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_whileStatement5213 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_36_in_whileStatement5216 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_whileStatement5218 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_whileStatement5221 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_whileStatement5223 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_37_in_whileStatement5226 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_whileStatement5228 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statement_in_whileStatement5231 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_95_in_forStatement5243 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forStatement5245 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_36_in_forStatement5248 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080006000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forStatement5251 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080002000000UL});
    public static readonly BitSet FOLLOW_forStatementInitialiserPart_in_forStatement5254 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forStatement5258 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_90_in_forStatement5261 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080004000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forStatement5264 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_forStatement5267 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forStatement5271 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_90_in_forStatement5274 = new BitSet(new ulong[]{0x007FD278003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forStatement5277 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_forStatement5280 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forStatement5284 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_37_in_forStatement5287 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forStatement5289 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statement_in_forStatement5292 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expressionNoIn_in_forStatementInitialiserPart5304 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_89_in_forStatementInitialiserPart5309 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forStatementInitialiserPart5311 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart5314 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_95_in_forInStatement5326 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forInStatement5328 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_36_in_forInStatement5331 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080002000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forInStatement5333 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080002000000UL});
    public static readonly BitSet FOLLOW_forInStatementInitialiserPart_in_forInStatement5336 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forInStatement5338 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_66_in_forInStatement5341 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forInStatement5343 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_forInStatement5346 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forInStatement5348 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_37_in_forInStatement5351 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forInStatement5353 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statement_in_forInStatement5356 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart5368 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_89_in_forInStatementInitialiserPart5373 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_forInStatementInitialiserPart5375 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart5378 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_96_in_continueStatement5389 = new BitSet(new ulong[]{0x0000000000001020UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_Identifier_in_continueStatement5391 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_set_in_continueStatement5394 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_97_in_breakStatement5411 = new BitSet(new ulong[]{0x0000000000001020UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_Identifier_in_breakStatement5413 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_set_in_breakStatement5416 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_98_in_returnStatement5433 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080004000000UL});
    public static readonly BitSet FOLLOW_expression_in_returnStatement5435 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_set_in_returnStatement5438 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_99_in_withStatement5456 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_withStatement5458 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_36_in_withStatement5461 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_withStatement5463 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_withStatement5466 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_withStatement5468 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_37_in_withStatement5471 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_withStatement5473 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statement_in_withStatement5476 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_100_in_switchStatement5488 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_switchStatement5490 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_36_in_switchStatement5493 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_switchStatement5495 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_switchStatement5498 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_switchStatement5500 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_37_in_switchStatement5503 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_switchStatement5505 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_caseBlock_in_switchStatement5508 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_41_in_caseBlock5520 = new BitSet(new ulong[]{0x0000040000000020UL,0x0000006000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_caseBlock5523 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000002000000000UL});
    public static readonly BitSet FOLLOW_caseClause_in_caseBlock5526 = new BitSet(new ulong[]{0x0000040000000020UL,0x0000006000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_caseBlock5531 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000004000000000UL});
    public static readonly BitSet FOLLOW_defaultClause_in_caseBlock5534 = new BitSet(new ulong[]{0x0000040000000020UL,0x0000006000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_caseBlock5537 = new BitSet(new ulong[]{0x0000040000000020UL,0x0000006000000000UL});
    public static readonly BitSet FOLLOW_caseClause_in_caseBlock5540 = new BitSet(new ulong[]{0x0000040000000020UL,0x0000006000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_caseBlock5546 = new BitSet(new ulong[]{0x0000040000000020UL});
    public static readonly BitSet FOLLOW_42_in_caseBlock5549 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_101_in_caseClause5560 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_caseClause5562 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_caseClause5565 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_caseClause5567 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_caseClause5570 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_caseClause5572 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statementList_in_caseClause5575 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_102_in_defaultClause5588 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_defaultClause5590 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_defaultClause5593 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_defaultClause5595 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statementList_in_defaultClause5598 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_Identifier_in_labelledStatement5611 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_labelledStatement5613 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_labelledStatement5616 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_labelledStatement5618 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statement_in_labelledStatement5621 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_103_in_throwStatement5633 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_throwStatement5635 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_throwStatement5638 = new BitSet(new ulong[]{0x0000000000000022UL});
    public static readonly BitSet FOLLOW_90_in_throwStatement5643 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_104_in_tryStatement5655 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_tryStatement5657 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_blockStatement_in_tryStatement5660 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000060000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_tryStatement5662 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000060000000000UL});
    public static readonly BitSet FOLLOW_finallyClause_in_tryStatement5666 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_catchClause_in_tryStatement5670 = new BitSet(new ulong[]{0x0000000000000022UL,0x0000040000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_tryStatement5673 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000040000000000UL});
    public static readonly BitSet FOLLOW_finallyClause_in_tryStatement5676 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_105_in_catchClause5697 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_catchClause5699 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_36_in_catchClause5702 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_catchClause5704 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_catchClause5707 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_catchClause5709 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_37_in_catchClause5712 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_catchClause5714 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_blockStatement_in_catchClause5717 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_106_in_finallyClause5729 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_finallyClause5731 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_blockStatement_in_finallyClause5734 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_107_in_functionDeclaration5749 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_functionDeclaration5751 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_functionDeclaration5754 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_functionDeclaration5756 = new BitSet(new ulong[]{0x0000001000000020UL});
    public static readonly BitSet FOLLOW_formalParameterList_in_functionDeclaration5759 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_functionDeclaration5761 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_functionBody_in_functionDeclaration5764 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_107_in_functionExpression5776 = new BitSet(new ulong[]{0x0000001000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_functionExpression5778 = new BitSet(new ulong[]{0x0000001000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_functionExpression5781 = new BitSet(new ulong[]{0x0000001000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_functionExpression5784 = new BitSet(new ulong[]{0x0000001000001020UL});
    public static readonly BitSet FOLLOW_formalParameterList_in_functionExpression5787 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_functionExpression5789 = new BitSet(new ulong[]{0x0000020000000020UL});
    public static readonly BitSet FOLLOW_functionBody_in_functionExpression5792 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_36_in_formalParameterList5803 = new BitSet(new ulong[]{0x0000002000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_formalParameterList5806 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_formalParameterList5809 = new BitSet(new ulong[]{0x000000A000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_formalParameterList5812 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_formalParameterList5815 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_formalParameterList5817 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_formalParameterList5820 = new BitSet(new ulong[]{0x000000A000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_formalParameterList5826 = new BitSet(new ulong[]{0x0000002000000020UL});
    public static readonly BitSet FOLLOW_37_in_formalParameterList5829 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_41_in_functionBody5841 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_functionBody5843 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_sourceElements_in_functionBody5846 = new BitSet(new ulong[]{0x0000040000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_functionBody5848 = new BitSet(new ulong[]{0x0000040000000020UL});
    public static readonly BitSet FOLLOW_42_in_functionBody5851 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_program5863 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_sourceElements_in_program5866 = new BitSet(new ulong[]{0x0000000000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_program5868 = new BitSet(new ulong[]{0x0000000000000020UL});
    public static readonly BitSet FOLLOW_EOF_in_program5871 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_sourceElement_in_sourceElements5882 = new BitSet(new ulong[]{0x007FD258003C1022UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_sourceElements5885 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_sourceElement_in_sourceElements5888 = new BitSet(new ulong[]{0x007FD258003C1022UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statement_in_sourceElement5901 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_functionDeclaration_in_sourceElement5906 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred11_AS33631 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred15_AS33644 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_synpred15_AS33647 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred16_AS33638 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_synpred16_AS33641 = new BitSet(new ulong[]{0x007FD258003C1022UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred16_AS33644 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_synpred16_AS33647 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred21_AS33676 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_synpred21_AS33679 = new BitSet(new ulong[]{0x0000000000301020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred21_AS33681 = new BitSet(new ulong[]{0x0000000000301020UL});
    public static readonly BitSet FOLLOW_propertyNameAndValue_in_synpred21_AS33684 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred32_AS33768 = new BitSet(new ulong[]{0x0000204000000020UL});
    public static readonly BitSet FOLLOW_memberExpressionSuffix_in_synpred32_AS33771 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_memberExpression_in_synpred34_AS33802 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred38_AS33832 = new BitSet(new ulong[]{0x0000205000000020UL});
    public static readonly BitSet FOLLOW_callExpressionSuffix_in_synpred38_AS33835 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred47_AS33919 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_synpred47_AS33922 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred47_AS33924 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_synpred47_AS33927 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred48_AS33913 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_synpred48_AS33916 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred48_AS33919 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_synpred48_AS33922 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred48_AS33924 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_synpred48_AS33927 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_callExpression_in_synpred50_AS33948 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred66_AS34039 = new BitSet(new ulong[]{0x0380000000000020UL});
    public static readonly BitSet FOLLOW_set_in_synpred66_AS34042 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred66_AS34054 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_unaryExpression_in_synpred66_AS34057 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred70_AS34073 = new BitSet(new ulong[]{0x0018000000000020UL});
    public static readonly BitSet FOLLOW_set_in_synpred70_AS34076 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred70_AS34084 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_multiplicativeExpression_in_synpred70_AS34087 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred75_AS34103 = new BitSet(new ulong[]{0x1C00000000000020UL});
    public static readonly BitSet FOLLOW_set_in_synpred75_AS34106 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred75_AS34118 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_additiveExpression_in_synpred75_AS34121 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred83_AS34137 = new BitSet(new ulong[]{0xE000000000000020UL,0x0000000000000007UL});
    public static readonly BitSet FOLLOW_set_in_synpred83_AS34140 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred83_AS34164 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_shiftExpression_in_synpred83_AS34167 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred90_AS34184 = new BitSet(new ulong[]{0xE000000000000020UL,0x0000000000000003UL});
    public static readonly BitSet FOLLOW_set_in_synpred90_AS34187 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred90_AS34208 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_shiftExpression_in_synpred90_AS34211 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred96_AS34228 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000078UL});
    public static readonly BitSet FOLLOW_set_in_synpred96_AS34231 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred96_AS34247 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_relationalExpression_in_synpred96_AS34250 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred102_AS34266 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000078UL});
    public static readonly BitSet FOLLOW_set_in_synpred102_AS34269 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred102_AS34285 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_relationalExpressionNoIn_in_synpred102_AS34288 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred105_AS34304 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_71_in_synpred105_AS34307 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred105_AS34309 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_equalityExpression_in_synpred105_AS34312 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred108_AS34329 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000080UL});
    public static readonly BitSet FOLLOW_71_in_synpred108_AS34332 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred108_AS34334 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_equalityExpressionNoIn_in_synpred108_AS34337 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred111_AS34353 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_72_in_synpred111_AS34356 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred111_AS34358 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseANDExpression_in_synpred111_AS34361 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred114_AS34378 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000100UL});
    public static readonly BitSet FOLLOW_72_in_synpred114_AS34381 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred114_AS34383 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseANDExpressionNoIn_in_synpred114_AS34386 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred117_AS34403 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_73_in_synpred117_AS34406 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred117_AS34408 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseXORExpression_in_synpred117_AS34411 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred120_AS34428 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_73_in_synpred120_AS34431 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred120_AS34433 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseXORExpressionNoIn_in_synpred120_AS34436 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred123_AS34453 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_74_in_synpred123_AS34456 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred123_AS34458 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseORExpression_in_synpred123_AS34461 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred126_AS34478 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_74_in_synpred126_AS34481 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred126_AS34483 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_bitwiseORExpressionNoIn_in_synpred126_AS34486 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred129_AS34503 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_75_in_synpred129_AS34506 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred129_AS34508 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_logicalANDExpression_in_synpred129_AS34511 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred132_AS34527 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_75_in_synpred132_AS34530 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred132_AS34532 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_logicalANDExpressionNoIn_in_synpred132_AS34535 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred137_AS34552 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_76_in_synpred137_AS34555 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred137_AS34557 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_synpred137_AS34560 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred137_AS34562 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_synpred137_AS34565 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred137_AS34567 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_synpred137_AS34570 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred142_AS34587 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_76_in_synpred142_AS34590 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred142_AS34592 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_synpred142_AS34595 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred142_AS34597 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_synpred142_AS34600 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred142_AS34602 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_synpred142_AS34605 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_conditionalExpression_in_synpred143_AS34618 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_conditionalExpressionNoIn_in_synpred146_AS34645 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred162_AS34731 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_synpred162_AS34734 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred162_AS34736 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_synpred162_AS34739 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred165_AS34756 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_synpred165_AS34759 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred165_AS34761 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_assignmentExpressionNoIn_in_synpred165_AS34764 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_blockStatement_in_synpred166_AS34782 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expressionStatement_in_synpred169_AS34797 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_labelledStatement_in_synpred176_AS34832 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred179_AS34860 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred183_AS34884 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statement_in_synpred183_AS34887 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred188_AS34929 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_synpred188_AS34932 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred188_AS34934 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_variableDeclaration_in_synpred188_AS34937 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred191_AS34954 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_synpred191_AS34957 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred191_AS34959 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_variableDeclarationNoIn_in_synpred191_AS34962 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred194_AS34978 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_synpred194_AS34981 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred194_AS34983 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_synpred194_AS34986 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred195_AS34990 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred199_AS35008 = new BitSet(new ulong[]{0x0000080000000020UL});
    public static readonly BitSet FOLLOW_43_in_synpred199_AS35011 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred199_AS35013 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_synpred199_AS35016 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred200_AS35020 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred204_AS35084 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred205_AS35084 = new BitSet(new ulong[]{0x0000000000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred212_AS35124 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_92_in_synpred212_AS35127 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred212_AS35129 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_statement_in_synpred212_AS35132 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_forStatement_in_synpred215_AS35155 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred226_AS35251 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080002000000UL});
    public static readonly BitSet FOLLOW_forStatementInitialiserPart_in_synpred226_AS35254 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred229_AS35264 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_synpred229_AS35267 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred232_AS35277 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_expression_in_synpred232_AS35280 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred260_AS35523 = new BitSet(new ulong[]{0x0000040000000020UL,0x0000006000000000UL});
    public static readonly BitSet FOLLOW_caseClause_in_synpred260_AS35526 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred263_AS35537 = new BitSet(new ulong[]{0x0000040000000020UL,0x0000006000000000UL});
    public static readonly BitSet FOLLOW_caseClause_in_synpred263_AS35540 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred264_AS35531 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000004000000000UL});
    public static readonly BitSet FOLLOW_defaultClause_in_synpred264_AS35534 = new BitSet(new ulong[]{0x0000040000000022UL,0x0000006000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred264_AS35537 = new BitSet(new ulong[]{0x0000040000000020UL,0x0000006000000000UL});
    public static readonly BitSet FOLLOW_caseClause_in_synpred264_AS35540 = new BitSet(new ulong[]{0x0000040000000022UL,0x0000006000000000UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred268_AS35572 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred271_AS35595 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred275_AS35638 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred276_AS35638 = new BitSet(new ulong[]{0x0000000000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred281_AS35673 = new BitSet(new ulong[]{0x0000000000000020UL,0x0000040000000000UL});
    public static readonly BitSet FOLLOW_finallyClause_in_synpred281_AS35676 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred290_AS35778 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred297_AS35812 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_synpred297_AS35815 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred297_AS35817 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_synpred297_AS35820 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred298_AS35806 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_synpred298_AS35809 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred298_AS35812 = new BitSet(new ulong[]{0x0000008000000020UL});
    public static readonly BitSet FOLLOW_39_in_synpred298_AS35815 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred298_AS35817 = new BitSet(new ulong[]{0x0000000000001020UL});
    public static readonly BitSet FOLLOW_Identifier_in_synpred298_AS35820 = new BitSet(new ulong[]{0x0000008000000022UL});
    public static readonly BitSet FOLLOW_LineTerminator_in_synpred305_AS35885 = new BitSet(new ulong[]{0x007FD258003C1020UL,0x0000099FEE000000UL});
    public static readonly BitSet FOLLOW_sourceElement_in_synpred305_AS35888 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_in_synpred306_AS35901 = new BitSet(new ulong[]{0x0000000000000002UL});

}
}